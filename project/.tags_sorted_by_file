main	main.cpp	/^int main(void)$/;"	f
ADDR	sqlite\sqlite3.c	14185;"	d	file:
AGGREGATE	sqlite\sqlite3.c	15941;"	d	file:
AGGREGATE2	sqlite\sqlite3.c	15944;"	d	file:
ALLBITS	sqlite\sqlite3.c	16799;"	d	file:
ALWAYS	sqlite\sqlite3.c	12691;"	d	file:
ALWAYS	sqlite\sqlite3.c	12694;"	d	file:
ALWAYS	sqlite\sqlite3.c	12697;"	d	file:
ALWAYS	sqlite\sqlite3.c	150357;"	d	file:
ALWAYS	sqlite\sqlite3.c	150360;"	d	file:
ALWAYS	sqlite\sqlite3.c	150365;"	d	file:
ALWAYS	sqlite\sqlite3.c	188903;"	d	file:
ASSERT_SZLEAF_OK	sqlite\sqlite3.c	196991;"	d	file:
AdjustTree	sqlite\sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	sqlite\sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	sqlite\sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	sqlite\sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	sqlite\sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApplyCostMultiplier	sqlite\sqlite3.c	136894;"	d	file:
ApplyCostMultiplier	sqlite\sqlite3.c	136896;"	d	file:
ArraySize	sqlite\sqlite3.c	13516;"	d	file:
ArraySize	sqlite\sqlite3.c	188899;"	d	file:
AsciiTokenizer	sqlite\sqlite3.c	/^struct AsciiTokenizer {$/;"	s	file:
AsciiTokenizer	sqlite\sqlite3.c	/^typedef struct AsciiTokenizer AsciiTokenizer;$/;"	t	typeref:struct:AsciiTokenizer	file:
AuthContext	sqlite\sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	sqlite\sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	sqlite\sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	sqlite\sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	sqlite\sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	sqlite\sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BITVEC_HASH	sqlite\sqlite3.c	45984;"	d	file:
BITVEC_MXHASH	sqlite\sqlite3.c	45979;"	d	file:
BITVEC_NBIT	sqlite\sqlite3.c	45973;"	d	file:
BITVEC_NELEM	sqlite\sqlite3.c	45971;"	d	file:
BITVEC_NINT	sqlite\sqlite3.c	45976;"	d	file:
BITVEC_NPTR	sqlite\sqlite3.c	45986;"	d	file:
BITVEC_SZ	sqlite\sqlite3.c	45956;"	d	file:
BITVEC_SZELEM	sqlite\sqlite3.c	45969;"	d	file:
BITVEC_TELEM	sqlite\sqlite3.c	45967;"	d	file:
BITVEC_USIZE	sqlite\sqlite3.c	45960;"	d	file:
BMS	sqlite\sqlite3.c	16792;"	d	file:
BTALLOC_ANY	sqlite\sqlite3.c	61647;"	d	file:
BTALLOC_EXACT	sqlite\sqlite3.c	61648;"	d	file:
BTALLOC_LE	sqlite\sqlite3.c	61649;"	d	file:
BTCF_AtLast	sqlite\sqlite3.c	61133;"	d	file:
BTCF_Incrblob	sqlite\sqlite3.c	61134;"	d	file:
BTCF_Multiple	sqlite\sqlite3.c	61135;"	d	file:
BTCF_ValidNKey	sqlite\sqlite3.c	61131;"	d	file:
BTCF_ValidOvfl	sqlite\sqlite3.c	61132;"	d	file:
BTCF_WriteFlag	sqlite\sqlite3.c	61130;"	d	file:
BTCURSOR_FIRST_UNINIT	sqlite\sqlite3.c	61112;"	d	file:
BTCURSOR_MAX_DEPTH	sqlite\sqlite3.c	61078;"	d	file:
BTREE_APPEND	sqlite\sqlite3.c	13898;"	d	file:
BTREE_APPLICATION_ID	sqlite\sqlite3.c	13794;"	d	file:
BTREE_AUTOVACUUM_FULL	sqlite\sqlite3.c	13675;"	d	file:
BTREE_AUTOVACUUM_INCR	sqlite\sqlite3.c	13676;"	d	file:
BTREE_AUTOVACUUM_NONE	sqlite\sqlite3.c	13674;"	d	file:
BTREE_AUXDELETE	sqlite\sqlite3.c	13897;"	d	file:
BTREE_BLOBKEY	sqlite\sqlite3.c	13757;"	d	file:
BTREE_BULKLOAD	sqlite\sqlite3.c	13839;"	d	file:
BTREE_DATA_VERSION	sqlite\sqlite3.c	13795;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	sqlite\sqlite3.c	13789;"	d	file:
BTREE_FILE_FORMAT	sqlite\sqlite3.c	13788;"	d	file:
BTREE_FORDELETE	sqlite\sqlite3.c	13866;"	d	file:
BTREE_FREE_PAGE_COUNT	sqlite\sqlite3.c	13786;"	d	file:
BTREE_HINT_RANGE	sqlite\sqlite3.c	13824;"	d	file:
BTREE_INCR_VACUUM	sqlite\sqlite3.c	13793;"	d	file:
BTREE_INTKEY	sqlite\sqlite3.c	13756;"	d	file:
BTREE_LARGEST_ROOT_PAGE	sqlite\sqlite3.c	13790;"	d	file:
BTREE_MEMORY	sqlite\sqlite3.c	13703;"	d	file:
BTREE_OMIT_JOURNAL	sqlite\sqlite3.c	13702;"	d	file:
BTREE_SAVEPOSITION	sqlite\sqlite3.c	13896;"	d	file:
BTREE_SCHEMA_VERSION	sqlite\sqlite3.c	13787;"	d	file:
BTREE_SEEK_EQ	sqlite\sqlite3.c	13840;"	d	file:
BTREE_SINGLE	sqlite\sqlite3.c	13704;"	d	file:
BTREE_TEXT_ENCODING	sqlite\sqlite3.c	13791;"	d	file:
BTREE_UNORDERED	sqlite\sqlite3.c	13705;"	d	file:
BTREE_USER_VERSION	sqlite\sqlite3.c	13792;"	d	file:
BTREE_WRCSR	sqlite\sqlite3.c	13865;"	d	file:
BTS_EXCLUSIVE	sqlite\sqlite3.c	61053;"	d	file:
BTS_FAST_SECURE	sqlite\sqlite3.c	61050;"	d	file:
BTS_INITIALLY_EMPTY	sqlite\sqlite3.c	61051;"	d	file:
BTS_NO_WAL	sqlite\sqlite3.c	61052;"	d	file:
BTS_OVERWRITE	sqlite\sqlite3.c	61049;"	d	file:
BTS_PAGESIZE_FIXED	sqlite\sqlite3.c	61047;"	d	file:
BTS_PENDING	sqlite\sqlite3.c	61054;"	d	file:
BTS_READ_ONLY	sqlite\sqlite3.c	61046;"	d	file:
BTS_SECURE_DELETE	sqlite\sqlite3.c	61048;"	d	file:
BYTESWAP32	sqlite\sqlite3.c	57417;"	d	file:
BenignMallocHooks	sqlite\sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	sqlite\sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
BitFlagAllTest	sqlite\sqlite3.c	203258;"	d	file:
BitFlagTest	sqlite\sqlite3.c	203259;"	d	file:
Bitmask	sqlite\sqlite3.c	/^  typedef SQLITE_BITMASK_TYPE Bitmask;$/;"	t	file:
Bitmask	sqlite\sqlite3.c	/^  typedef u64 Bitmask;$/;"	t	file:
Bitvec	sqlite\sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	sqlite\sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Blob	sqlite\sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	sqlite\sqlite3.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Bool	sqlite\sqlite3.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	sqlite\sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	sqlite\sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	sqlite\sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	sqlite\sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	sqlite\sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	sqlite\sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	sqlite\sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	sqlite\sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BtreePayload	sqlite\sqlite3.c	/^struct BtreePayload {$/;"	s	file:
BtreePayload	sqlite\sqlite3.c	/^typedef struct BtreePayload BtreePayload;$/;"	t	typeref:struct:BtreePayload	file:
BusyHandler	sqlite\sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	sqlite\sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	sqlite\sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	sqlite\sqlite3.c	19148;"	d	file:
CC_AND	sqlite\sqlite3.c	143812;"	d	file:
CC_BANG	sqlite\sqlite3.c	143803;"	d	file:
CC_COMMA	sqlite\sqlite3.c	143811;"	d	file:
CC_DIGIT	sqlite\sqlite3.c	143791;"	d	file:
CC_DOLLAR	sqlite\sqlite3.c	143792;"	d	file:
CC_DOT	sqlite\sqlite3.c	143814;"	d	file:
CC_EQ	sqlite\sqlite3.c	143802;"	d	file:
CC_GT	sqlite\sqlite3.c	143801;"	d	file:
CC_ID	sqlite\sqlite3.c	143790;"	d	file:
CC_ILLEGAL	sqlite\sqlite3.c	143815;"	d	file:
CC_KYWD	sqlite\sqlite3.c	143789;"	d	file:
CC_LP	sqlite\sqlite3.c	143805;"	d	file:
CC_LT	sqlite\sqlite3.c	143800;"	d	file:
CC_MINUS	sqlite\sqlite3.c	143799;"	d	file:
CC_PERCENT	sqlite\sqlite3.c	143810;"	d	file:
CC_PIPE	sqlite\sqlite3.c	143798;"	d	file:
CC_PLUS	sqlite\sqlite3.c	143808;"	d	file:
CC_QUOTE	sqlite\sqlite3.c	143796;"	d	file:
CC_QUOTE2	sqlite\sqlite3.c	143797;"	d	file:
CC_RP	sqlite\sqlite3.c	143806;"	d	file:
CC_SEMI	sqlite\sqlite3.c	143807;"	d	file:
CC_SLASH	sqlite\sqlite3.c	143804;"	d	file:
CC_SPACE	sqlite\sqlite3.c	143795;"	d	file:
CC_STAR	sqlite\sqlite3.c	143809;"	d	file:
CC_TILDA	sqlite\sqlite3.c	143813;"	d	file:
CC_VARALPHA	sqlite\sqlite3.c	143793;"	d	file:
CC_VARNUM	sqlite\sqlite3.c	143794;"	d	file:
CC_X	sqlite\sqlite3.c	143788;"	d	file:
CCurHint	sqlite\sqlite3.c	/^struct CCurHint {$/;"	s	file:
CHECK_PAGE	sqlite\sqlite3.c	50387;"	d	file:
CHECK_PAGE	sqlite\sqlite3.c	50398;"	d	file:
CInstIter	sqlite\sqlite3.c	/^struct CInstIter {$/;"	s	file:
CInstIter	sqlite\sqlite3.c	/^typedef struct CInstIter CInstIter;$/;"	t	typeref:struct:CInstIter	file:
CKCNSTRNT_COLUMN	sqlite\sqlite3.c	113511;"	d	file:
CKCNSTRNT_ROWID	sqlite\sqlite3.c	113512;"	d	file:
CKPT_SYNC_FLAGS	sqlite\sqlite3.c	49016;"	d	file:
CLEARBIT	sqlite\sqlite3.c	46220;"	d	file:
CODEC1	sqlite\sqlite3.c	49531;"	d	file:
CODEC1	sqlite\sqlite3.c	49537;"	d	file:
CODEC2	sqlite\sqlite3.c	49533;"	d	file:
CODEC2	sqlite\sqlite3.c	49538;"	d	file:
COLFLAG_HASTYPE	sqlite\sqlite3.c	16001;"	d	file:
COLFLAG_HIDDEN	sqlite\sqlite3.c	16000;"	d	file:
COLFLAG_PRIMKEY	sqlite\sqlite3.c	15999;"	d	file:
COLFLAG_UNIQUE	sqlite\sqlite3.c	16002;"	d	file:
COLNAME_COLUMN	sqlite\sqlite3.c	14168;"	d	file:
COLNAME_DATABASE	sqlite\sqlite3.c	14166;"	d	file:
COLNAME_DECLTYPE	sqlite\sqlite3.c	14165;"	d	file:
COLNAME_N	sqlite\sqlite3.c	14170;"	d	file:
COLNAME_N	sqlite\sqlite3.c	14173;"	d	file:
COLNAME_N	sqlite\sqlite3.c	14175;"	d	file:
COLNAME_NAME	sqlite\sqlite3.c	14164;"	d	file:
COLNAME_TABLE	sqlite\sqlite3.c	14167;"	d	file:
COLUMN_MASK	sqlite\sqlite3.c	112038;"	d	file:
CORRUPT_DB	sqlite\sqlite3.c	17582;"	d	file:
CTIMEOPT_VAL	sqlite\sqlite3.c	56;"	d	file:
CTIMEOPT_VAL_	sqlite\sqlite3.c	55;"	d	file:
CTRL_FREE	sqlite\sqlite3.c	23364;"	d	file:
CTRL_LOGSIZE	sqlite\sqlite3.c	23363;"	d	file:
CURSOR_FAULT	sqlite\sqlite3.c	61171;"	d	file:
CURSOR_INVALID	sqlite\sqlite3.c	61168;"	d	file:
CURSOR_REQUIRESEEK	sqlite\sqlite3.c	61170;"	d	file:
CURSOR_SKIPNEXT	sqlite\sqlite3.c	61169;"	d	file:
CURSOR_VALID	sqlite\sqlite3.c	61167;"	d	file:
CURTYPE_BTREE	sqlite\sqlite3.c	19071;"	d	file:
CURTYPE_PSEUDO	sqlite\sqlite3.c	19074;"	d	file:
CURTYPE_SORTER	sqlite\sqlite3.c	19072;"	d	file:
CURTYPE_VTAB	sqlite\sqlite3.c	19073;"	d	file:
CellArray	sqlite\sqlite3.c	/^struct CellArray {$/;"	s	file:
CellArray	sqlite\sqlite3.c	/^typedef struct CellArray CellArray;$/;"	t	typeref:struct:CellArray	file:
CellInfo	sqlite\sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	sqlite\sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
CheckMutex	sqlite\sqlite3.c	/^struct CheckMutex {$/;"	s	file:
CheckMutex	sqlite\sqlite3.c	/^typedef struct CheckMutex CheckMutex;$/;"	t	typeref:struct:CheckMutex	file:
ChooseLeaf	sqlite\sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
CollSeq	sqlite\sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	sqlite\sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	sqlite\sqlite3.c	/^struct Column {$/;"	s	file:
Column	sqlite\sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
ConstFactorOk	sqlite\sqlite3.c	15791;"	d	file:
CountCtx	sqlite\sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	sqlite\sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
CsrFlagClear	sqlite\sqlite3.c	203266;"	d	file:
CsrFlagSet	sqlite\sqlite3.c	203265;"	d	file:
CsrFlagTest	sqlite\sqlite3.c	203267;"	d	file:
Cte	sqlite\sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
D	sqlite\sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DBFLAG_PreferBuiltin	sqlite\sqlite3.c	15756;"	d	file:
DBFLAG_SchemaChange	sqlite\sqlite3.c	15755;"	d	file:
DBFLAG_Vacuum	sqlite\sqlite3.c	15757;"	d	file:
DBPAGE_COLUMN_DATA	sqlite\sqlite3.c	180108;"	d	file:
DBPAGE_COLUMN_PGNO	sqlite\sqlite3.c	180107;"	d	file:
DBPAGE_COLUMN_SCHEMA	sqlite\sqlite3.c	180109;"	d	file:
DB_Empty	sqlite\sqlite3.c	15463;"	d	file:
DB_ResetWanted	sqlite\sqlite3.c	15464;"	d	file:
DB_SchemaLoaded	sqlite\sqlite3.c	15461;"	d	file:
DB_UnresetViews	sqlite\sqlite3.c	15462;"	d	file:
DCOORD	sqlite\sqlite3.c	169063;"	d	file:
DCOORD	sqlite\sqlite3.c	169065;"	d	file:
DFUNCTION	sqlite\sqlite3.c	15926;"	d	file:
DIRECT_MODE	sqlite\sqlite3.c	55340;"	d	file:
DOCID_CMP	sqlite\sqlite3.c	153020;"	d	file:
DOTLOCK_SUFFIX	sqlite\sqlite3.c	33383;"	d	file:
DO_OS_MALLOC_TEST	sqlite\sqlite3.c	21256;"	d	file:
DO_OS_MALLOC_TEST	sqlite\sqlite3.c	21263;"	d	file:
DateTime	sqlite\sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	sqlite\sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	sqlite\sqlite3.c	/^struct Db {$/;"	s	file:
Db	sqlite\sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	sqlite\sqlite3.c	15449;"	d	file:
DbFixer	sqlite\sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	sqlite\sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	sqlite\sqlite3.c	15447;"	d	file:
DbHasProperty	sqlite\sqlite3.c	15446;"	d	file:
DbMaskAllZero	sqlite\sqlite3.c	17176;"	d	file:
DbMaskAllZero	sqlite\sqlite3.c	17183;"	d	file:
DbMaskNonZero	sqlite\sqlite3.c	17177;"	d	file:
DbMaskNonZero	sqlite\sqlite3.c	17184;"	d	file:
DbMaskSet	sqlite\sqlite3.c	17175;"	d	file:
DbMaskSet	sqlite\sqlite3.c	17182;"	d	file:
DbMaskTest	sqlite\sqlite3.c	17173;"	d	file:
DbMaskTest	sqlite\sqlite3.c	17180;"	d	file:
DbMaskZero	sqlite\sqlite3.c	17174;"	d	file:
DbMaskZero	sqlite\sqlite3.c	17181;"	d	file:
DbPage	sqlite\sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	sqlite\sqlite3.c	15448;"	d	file:
DbpageCursor	sqlite\sqlite3.c	/^struct DbpageCursor {$/;"	s	file:
DbpageCursor	sqlite\sqlite3.c	/^typedef struct DbpageCursor DbpageCursor;$/;"	t	typeref:struct:DbpageCursor	file:
DbpageTable	sqlite\sqlite3.c	/^struct DbpageTable {$/;"	s	file:
DbpageTable	sqlite\sqlite3.c	/^typedef struct DbpageTable DbpageTable;$/;"	t	typeref:struct:DbpageTable	file:
Deephemeralize	sqlite\sqlite3.c	81332;"	d	file:
DistinctCtx	sqlite\sqlite3.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	sqlite\sqlite3.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
EIGHT_BYTE_ALIGNMENT	sqlite\sqlite3.c	13408;"	d	file:
EIGHT_BYTE_ALIGNMENT	sqlite\sqlite3.c	13410;"	d	file:
ENC	sqlite\sqlite3.c	15704;"	d	file:
EP_Agg	sqlite\sqlite3.c	16653;"	d	file:
EP_Alias	sqlite\sqlite3.c	16674;"	d	file:
EP_CanBeNull	sqlite\sqlite3.c	16672;"	d	file:
EP_Collate	sqlite\sqlite3.c	16660;"	d	file:
EP_ConstFunc	sqlite\sqlite3.c	16671;"	d	file:
EP_DblQuoted	sqlite\sqlite3.c	16658;"	d	file:
EP_Distinct	sqlite\sqlite3.c	16656;"	d	file:
EP_FromJoin	sqlite\sqlite3.c	16652;"	d	file:
EP_Generic	sqlite\sqlite3.c	16661;"	d	file:
EP_HasFunc	sqlite\sqlite3.c	16654;"	d	file:
EP_InfixFunc	sqlite\sqlite3.c	16659;"	d	file:
EP_IntValue	sqlite\sqlite3.c	16662;"	d	file:
EP_Leaf	sqlite\sqlite3.c	16675;"	d	file:
EP_MemToken	sqlite\sqlite3.c	16668;"	d	file:
EP_NoReduce	sqlite\sqlite3.c	16669;"	d	file:
EP_Propagate	sqlite\sqlite3.c	16681;"	d	file:
EP_Reduced	sqlite\sqlite3.c	16665;"	d	file:
EP_Skip	sqlite\sqlite3.c	16664;"	d	file:
EP_Static	sqlite\sqlite3.c	16667;"	d	file:
EP_Subquery	sqlite\sqlite3.c	16673;"	d	file:
EP_TokenOnly	sqlite\sqlite3.c	16666;"	d	file:
EP_Unlikely	sqlite\sqlite3.c	16670;"	d	file:
EP_VarSelect	sqlite\sqlite3.c	16657;"	d	file:
EP_xIsSelect	sqlite\sqlite3.c	16663;"	d	file:
EXCLUSIVE_LOCK	sqlite\sqlite3.c	15162;"	d	file:
EXPRDUP_REDUCE	sqlite\sqlite3.c	16715;"	d	file:
EXPR_FULLSIZE	sqlite\sqlite3.c	16707;"	d	file:
EXPR_REDUCEDSIZE	sqlite\sqlite3.c	16708;"	d	file:
EXPR_TOKENONLYSIZE	sqlite\sqlite3.c	16709;"	d	file:
EntropyGatherer	sqlite\sqlite3.c	/^struct EntropyGatherer {$/;"	s	file:
EntropyGatherer	sqlite\sqlite3.c	/^typedef struct EntropyGatherer EntropyGatherer;$/;"	t	typeref:struct:EntropyGatherer	file:
ExpandBlob	sqlite\sqlite3.c	19563;"	d	file:
ExpandBlob	sqlite\sqlite3.c	19566;"	d	file:
Expr	sqlite\sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	sqlite\sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	sqlite\sqlite3.c	16690;"	d	file:
ExprHasAllProperty	sqlite\sqlite3.c	16688;"	d	file:
ExprHasProperty	sqlite\sqlite3.c	16687;"	d	file:
ExprList	sqlite\sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	sqlite\sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	sqlite\sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	sqlite\sqlite3.c	16689;"	d	file:
ExprSetVVAProperty	sqlite\sqlite3.c	16697;"	d	file:
ExprSetVVAProperty	sqlite\sqlite3.c	16699;"	d	file:
F2FS_FEATURE_ATOMIC_WRITE	sqlite\sqlite3.c	31587;"	d	file:
F2FS_IOCTL_MAGIC	sqlite\sqlite3.c	31581;"	d	file:
F2FS_IOC_ABORT_VOLATILE_WRITE	sqlite\sqlite3.c	31585;"	d	file:
F2FS_IOC_COMMIT_ATOMIC_WRITE	sqlite\sqlite3.c	31583;"	d	file:
F2FS_IOC_GET_FEATURES	sqlite\sqlite3.c	31586;"	d	file:
F2FS_IOC_START_ATOMIC_WRITE	sqlite\sqlite3.c	31582;"	d	file:
F2FS_IOC_START_VOLATILE_WRITE	sqlite\sqlite3.c	31584;"	d	file:
FILEHANDLEID	sqlite\sqlite3.c	49250;"	d	file:
FILE_ATTRIBUTE_MASK	sqlite\sqlite3.c	39469;"	d	file:
FILE_FLAG_MASK	sqlite\sqlite3.c	39465;"	d	file:
FKey	sqlite\sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	sqlite\sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_SIGNED	sqlite\sqlite3.c	26310;"	d	file:
FLAG_STRING	sqlite\sqlite3.c	26311;"	d	file:
FOREGUARD	sqlite\sqlite3.c	22127;"	d	file:
FOUR_BYTE_INT	sqlite\sqlite3.c	77638;"	d	file:
FOUR_BYTE_UINT	sqlite\sqlite3.c	77637;"	d	file:
FTS3_AUX_SCHEMA	sqlite\sqlite3.c	156558;"	d	file:
FTS3_DOCID_SEARCH	sqlite\sqlite3.c	150559;"	d	file:
FTS3_EVAL_FILTER	sqlite\sqlite3.c	150539;"	d	file:
FTS3_EVAL_MATCHINFO	sqlite\sqlite3.c	150541;"	d	file:
FTS3_EVAL_NEXT	sqlite\sqlite3.c	150540;"	d	file:
FTS3_FULLSCAN_SEARCH	sqlite\sqlite3.c	150558;"	d	file:
FTS3_FULLTEXT_SEARCH	sqlite\sqlite3.c	150560;"	d	file:
FTS3_HASH_BINARY	sqlite\sqlite3.c	150216;"	d	file:
FTS3_HASH_STRING	sqlite\sqlite3.c	150215;"	d	file:
FTS3_HAVE_DOCID_GE	sqlite\sqlite3.c	150569;"	d	file:
FTS3_HAVE_DOCID_LE	sqlite\sqlite3.c	150570;"	d	file:
FTS3_HAVE_LANGID	sqlite\sqlite3.c	150568;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	sqlite\sqlite3.c	166352;"	d	file:
FTS3_MATCHINFO_DEFAULT	sqlite\sqlite3.c	166362;"	d	file:
FTS3_MATCHINFO_HITS	sqlite\sqlite3.c	166355;"	d	file:
FTS3_MATCHINFO_LCS	sqlite\sqlite3.c	166354;"	d	file:
FTS3_MATCHINFO_LENGTH	sqlite\sqlite3.c	166353;"	d	file:
FTS3_MATCHINFO_LHITS	sqlite\sqlite3.c	166356;"	d	file:
FTS3_MATCHINFO_LHITS_BM	sqlite\sqlite3.c	166357;"	d	file:
FTS3_MATCHINFO_NCOL	sqlite\sqlite3.c	166350;"	d	file:
FTS3_MATCHINFO_NDOC	sqlite\sqlite3.c	166351;"	d	file:
FTS3_MATCHINFO_NPHRASE	sqlite\sqlite3.c	166349;"	d	file:
FTS3_MAX_PENDING_DATA	sqlite\sqlite3.c	150291;"	d	file:
FTS3_MERGE_COUNT	sqlite\sqlite3.c	150281;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite\sqlite3.c	160700;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite\sqlite3.c	160703;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite\sqlite3.c	160701;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite\sqlite3.c	160704;"	d	file:
FTS3_NODE_PADDING	sqlite\sqlite3.c	160678;"	d	file:
FTS3_SEGCURSOR_ALL	sqlite\sqlite3.c	150714;"	d	file:
FTS3_SEGCURSOR_PENDING	sqlite\sqlite3.c	150713;"	d	file:
FTS3_SEGDIR_MAXLEVEL	sqlite\sqlite3.c	150329;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	sqlite\sqlite3.c	150330;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	sqlite\sqlite3.c	150726;"	d	file:
FTS3_SEGMENT_FIRST	sqlite\sqlite3.c	150729;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	sqlite\sqlite3.c	150725;"	d	file:
FTS3_SEGMENT_PREFIX	sqlite\sqlite3.c	150727;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	sqlite\sqlite3.c	150724;"	d	file:
FTS3_SEGMENT_SCAN	sqlite\sqlite3.c	150728;"	d	file:
FTS3_TOK_SCHEMA	sqlite\sqlite3.c	160327;"	d	file:
FTS3_VARINT_MAX	sqlite\sqlite3.c	150312;"	d	file:
FTS4AUX_EQ_CONSTRAINT	sqlite\sqlite3.c	156651;"	d	file:
FTS4AUX_GE_CONSTRAINT	sqlite\sqlite3.c	156652;"	d	file:
FTS4AUX_LE_CONSTRAINT	sqlite\sqlite3.c	156653;"	d	file:
FTS5CSR_EOF	sqlite\sqlite3.c	203250;"	d	file:
FTS5CSR_FREE_ZRANK	sqlite\sqlite3.c	203254;"	d	file:
FTS5CSR_REQUIRE_CONTENT	sqlite\sqlite3.c	203251;"	d	file:
FTS5CSR_REQUIRE_DOCSIZE	sqlite\sqlite3.c	203252;"	d	file:
FTS5CSR_REQUIRE_INST	sqlite\sqlite3.c	203253;"	d	file:
FTS5CSR_REQUIRE_POSLIST	sqlite\sqlite3.c	203256;"	d	file:
FTS5CSR_REQUIRE_RESEEK	sqlite\sqlite3.c	203255;"	d	file:
FTS5INDEX_QUERY_DESC	sqlite\sqlite3.c	189215;"	d	file:
FTS5INDEX_QUERY_NOOUTPUT	sqlite\sqlite3.c	189223;"	d	file:
FTS5INDEX_QUERY_PREFIX	sqlite\sqlite3.c	189214;"	d	file:
FTS5INDEX_QUERY_SCAN	sqlite\sqlite3.c	189217;"	d	file:
FTS5INDEX_QUERY_SKIPEMPTY	sqlite\sqlite3.c	189222;"	d	file:
FTS5INDEX_QUERY_TEST_NOIDX	sqlite\sqlite3.c	189216;"	d	file:
FTS5TOKEN	sqlite\sqlite3.c	190848;"	d	file:
FTS5_AND	sqlite\sqlite3.c	189662;"	d	file:
FTS5_AVERAGES_ROWID	sqlite\sqlite3.c	196734;"	d	file:
FTS5_BEGIN	sqlite\sqlite3.c	203277;"	d	file:
FTS5_BI_MATCH	sqlite\sqlite3.c	203237;"	d	file:
FTS5_BI_ORDER_DESC	sqlite\sqlite3.c	203245;"	d	file:
FTS5_BI_ORDER_RANK	sqlite\sqlite3.c	203243;"	d	file:
FTS5_BI_ORDER_ROWID	sqlite\sqlite3.c	203244;"	d	file:
FTS5_BI_RANK	sqlite\sqlite3.c	203238;"	d	file:
FTS5_BI_ROWID_EQ	sqlite\sqlite3.c	203239;"	d	file:
FTS5_BI_ROWID_GE	sqlite\sqlite3.c	203241;"	d	file:
FTS5_BI_ROWID_LE	sqlite\sqlite3.c	203240;"	d	file:
FTS5_CARET	sqlite\sqlite3.c	189672;"	d	file:
FTS5_COLON	sqlite\sqlite3.c	189665;"	d	file:
FTS5_COMMA	sqlite\sqlite3.c	189673;"	d	file:
FTS5_COMMIT	sqlite\sqlite3.c	203279;"	d	file:
FTS5_CONTENT_EXTERNAL	sqlite\sqlite3.c	189064;"	d	file:
FTS5_CONTENT_NONE	sqlite\sqlite3.c	189063;"	d	file:
FTS5_CONTENT_NORMAL	sqlite\sqlite3.c	189062;"	d	file:
FTS5_CORRUPT	sqlite\sqlite3.c	188937;"	d	file:
FTS5_CORRUPT	sqlite\sqlite3.c	188940;"	d	file:
FTS5_CURRENT_VERSION	sqlite\sqlite3.c	189060;"	d	file:
FTS5_DATA_DLI_B	sqlite\sqlite3.c	196749;"	d	file:
FTS5_DATA_HEIGHT_B	sqlite\sqlite3.c	196750;"	d	file:
FTS5_DATA_ID_B	sqlite\sqlite3.c	196748;"	d	file:
FTS5_DATA_PADDING	sqlite\sqlite3.c	196779;"	d	file:
FTS5_DATA_PAGE_B	sqlite\sqlite3.c	196751;"	d	file:
FTS5_DATA_ZERO_PADDING	sqlite\sqlite3.c	196778;"	d	file:
FTS5_DEFAULT_AUTOMERGE	sqlite\sqlite3.c	192198;"	d	file:
FTS5_DEFAULT_CRISISMERGE	sqlite\sqlite3.c	192200;"	d	file:
FTS5_DEFAULT_HASHSIZE	sqlite\sqlite3.c	192201;"	d	file:
FTS5_DEFAULT_NEARDIST	sqlite\sqlite3.c	188929;"	d	file:
FTS5_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	192197;"	d	file:
FTS5_DEFAULT_RANK	sqlite\sqlite3.c	188930;"	d	file:
FTS5_DEFAULT_USERMERGE	sqlite\sqlite3.c	192199;"	d	file:
FTS5_DETAIL_COLUMNS	sqlite\sqlite3.c	189068;"	d	file:
FTS5_DETAIL_FULL	sqlite\sqlite3.c	189066;"	d	file:
FTS5_DETAIL_NONE	sqlite\sqlite3.c	189067;"	d	file:
FTS5_DLIDX_ROWID	sqlite\sqlite3.c	196761;"	d	file:
FTS5_EOF	sqlite\sqlite3.c	193163;"	d	file:
FTS5_LARGEST_INT64	sqlite\sqlite3.c	193165;"	d	file:
FTS5_LCP	sqlite\sqlite3.c	189667;"	d	file:
FTS5_LOOKAHEAD_EOF	sqlite\sqlite3.c	193655;"	d	file:
FTS5_LP	sqlite\sqlite3.c	189670;"	d	file:
FTS5_MAIN_PREFIX	sqlite\sqlite3.c	196572;"	d	file:
FTS5_MAX_PAGE_SIZE	sqlite\sqlite3.c	192204;"	d	file:
FTS5_MAX_PREFIX_INDEXES	sqlite\sqlite3.c	188927;"	d	file:
FTS5_MAX_SEGMENT	sqlite\sqlite3.c	196766;"	d	file:
FTS5_MAX_TOKEN_SIZE	sqlite\sqlite3.c	188920;"	d	file:
FTS5_MINUS	sqlite\sqlite3.c	189666;"	d	file:
FTS5_MIN_DLIDX_SIZE	sqlite\sqlite3.c	196570;"	d	file:
FTS5_NOINLINE	sqlite\sqlite3.c	208798;"	d	file:
FTS5_NOINLINE	sqlite\sqlite3.c	208800;"	d	file:
FTS5_NOT	sqlite\sqlite3.c	189663;"	d	file:
FTS5_OPT_WORK_UNIT	sqlite\sqlite3.c	196567;"	d	file:
FTS5_OR	sqlite\sqlite3.c	189661;"	d	file:
FTS5_PLAN_MATCH	sqlite\sqlite3.c	203473;"	d	file:
FTS5_PLAN_ROWID	sqlite\sqlite3.c	203478;"	d	file:
FTS5_PLAN_SCAN	sqlite\sqlite3.c	203477;"	d	file:
FTS5_PLAN_SORTED_MATCH	sqlite\sqlite3.c	203476;"	d	file:
FTS5_PLAN_SOURCE	sqlite\sqlite3.c	203474;"	d	file:
FTS5_PLAN_SPECIAL	sqlite\sqlite3.c	203475;"	d	file:
FTS5_PLUS	sqlite\sqlite3.c	189674;"	d	file:
FTS5_PORTER_MAX_TOKEN	sqlite\sqlite3.c	207414;"	d	file:
FTS5_POS2COLUMN	sqlite\sqlite3.c	189141;"	d	file:
FTS5_POS2OFFSET	sqlite\sqlite3.c	189142;"	d	file:
FTS5_RANK_NAME	sqlite\sqlite3.c	188933;"	d	file:
FTS5_RCP	sqlite\sqlite3.c	189668;"	d	file:
FTS5_RELEASE	sqlite\sqlite3.c	203282;"	d	file:
FTS5_ROLLBACK	sqlite\sqlite3.c	203280;"	d	file:
FTS5_ROLLBACKTO	sqlite\sqlite3.c	203283;"	d	file:
FTS5_ROWID_NAME	sqlite\sqlite3.c	188934;"	d	file:
FTS5_RP	sqlite\sqlite3.c	189671;"	d	file:
FTS5_SAVEPOINT	sqlite\sqlite3.c	203281;"	d	file:
FTS5_SEGITER_ONETERM	sqlite\sqlite3.c	196995;"	d	file:
FTS5_SEGITER_REVERSE	sqlite\sqlite3.c	196996;"	d	file:
FTS5_SEGMENT_ROWID	sqlite\sqlite3.c	196760;"	d	file:
FTS5_STAR	sqlite\sqlite3.c	189675;"	d	file:
FTS5_STMT_DELETE_CONTENT	sqlite\sqlite3.c	205821;"	d	file:
FTS5_STMT_DELETE_DOCSIZE	sqlite\sqlite3.c	205823;"	d	file:
FTS5_STMT_INSERT_CONTENT	sqlite\sqlite3.c	205819;"	d	file:
FTS5_STMT_LOOKUP	sqlite\sqlite3.c	189462;"	d	file:
FTS5_STMT_LOOKUP_DOCSIZE	sqlite\sqlite3.c	205824;"	d	file:
FTS5_STMT_REPLACE_CONFIG	sqlite\sqlite3.c	205825;"	d	file:
FTS5_STMT_REPLACE_CONTENT	sqlite\sqlite3.c	205820;"	d	file:
FTS5_STMT_REPLACE_DOCSIZE	sqlite\sqlite3.c	205822;"	d	file:
FTS5_STMT_SCAN	sqlite\sqlite3.c	205826;"	d	file:
FTS5_STMT_SCAN_ASC	sqlite\sqlite3.c	189460;"	d	file:
FTS5_STMT_SCAN_DESC	sqlite\sqlite3.c	189461;"	d	file:
FTS5_STRING	sqlite\sqlite3.c	189669;"	d	file:
FTS5_STRUCTURE_ROWID	sqlite\sqlite3.c	196735;"	d	file:
FTS5_SYNC	sqlite\sqlite3.c	203278;"	d	file:
FTS5_TERM	sqlite\sqlite3.c	189664;"	d	file:
FTS5_TOKENIZE_AUX	sqlite\sqlite3.c	12147;"	d	file:
FTS5_TOKENIZE_AUX	sqlite\sqlite3.c	188812;"	d	file:
FTS5_TOKENIZE_DOCUMENT	sqlite\sqlite3.c	12146;"	d	file:
FTS5_TOKENIZE_DOCUMENT	sqlite\sqlite3.c	188811;"	d	file:
FTS5_TOKENIZE_PREFIX	sqlite\sqlite3.c	12145;"	d	file:
FTS5_TOKENIZE_PREFIX	sqlite\sqlite3.c	188810;"	d	file:
FTS5_TOKENIZE_QUERY	sqlite\sqlite3.c	12144;"	d	file:
FTS5_TOKENIZE_QUERY	sqlite\sqlite3.c	188809;"	d	file:
FTS5_TOKEN_COLOCATED	sqlite\sqlite3.c	12151;"	d	file:
FTS5_TOKEN_COLOCATED	sqlite\sqlite3.c	188816;"	d	file:
FTS5_VOCAB_COL	sqlite\sqlite3.c	208944;"	d	file:
FTS5_VOCAB_COL_SCHEMA	sqlite\sqlite3.c	208948;"	d	file:
FTS5_VOCAB_INSTANCE	sqlite\sqlite3.c	208946;"	d	file:
FTS5_VOCAB_INST_SCHEMA	sqlite\sqlite3.c	208950;"	d	file:
FTS5_VOCAB_ROW	sqlite\sqlite3.c	208945;"	d	file:
FTS5_VOCAB_ROW_SCHEMA	sqlite\sqlite3.c	208949;"	d	file:
FTS5_VOCAB_TERM_EQ	sqlite\sqlite3.c	208955;"	d	file:
FTS5_VOCAB_TERM_GE	sqlite\sqlite3.c	208956;"	d	file:
FTS5_VOCAB_TERM_LE	sqlite\sqlite3.c	208957;"	d	file:
FTS5_WORK_UNIT	sqlite\sqlite3.c	196568;"	d	file:
FTSQUERY_AND	sqlite\sqlite3.c	150674;"	d	file:
FTSQUERY_NEAR	sqlite\sqlite3.c	150672;"	d	file:
FTSQUERY_NOT	sqlite\sqlite3.c	150673;"	d	file:
FTSQUERY_OR	sqlite\sqlite3.c	150675;"	d	file:
FTSQUERY_PHRASE	sqlite\sqlite3.c	150676;"	d	file:
FTS_CORRUPT_VTAB	sqlite\sqlite3.c	150405;"	d	file:
FTS_CORRUPT_VTAB	sqlite\sqlite3.c	150407;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	sqlite\sqlite3.c	160666;"	d	file:
FTS_STAT_AUTOINCRMERGE	sqlite\sqlite3.c	160713;"	d	file:
FTS_STAT_DOCTOTAL	sqlite\sqlite3.c	160711;"	d	file:
FTS_STAT_INCRMERGEHINT	sqlite\sqlite3.c	160712;"	d	file:
FULLY_WITHIN	sqlite\sqlite3.c	10026;"	d	file:
FUNCTION	sqlite\sqlite3.c	15920;"	d	file:
FUNCTION2	sqlite\sqlite3.c	15932;"	d	file:
FUNC_PERFECT_MATCH	sqlite\sqlite3.c	107891;"	d	file:
FileChunk	sqlite\sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	sqlite\sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	sqlite\sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	sqlite\sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	sqlite\sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	sqlite\sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	sqlite\sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	sqlite\sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	sqlite\sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	sqlite\sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	sqlite\sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	sqlite\sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	sqlite\sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	sqlite\sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	sqlite\sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	sqlite\sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	sqlite\sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	sqlite\sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	sqlite\sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	sqlite\sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	sqlite\sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	sqlite\sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	sqlite\sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	sqlite\sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	sqlite\sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	sqlite\sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	sqlite\sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	sqlite\sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	sqlite\sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	sqlite\sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	sqlite\sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	sqlite\sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	sqlite\sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	sqlite\sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	sqlite\sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	sqlite\sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3tokCursor	sqlite\sqlite3.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	sqlite\sqlite3.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokTable	sqlite\sqlite3.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	sqlite\sqlite3.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
Fts5Auxdata	sqlite\sqlite3.c	/^struct Fts5Auxdata {$/;"	s	file:
Fts5Auxdata	sqlite\sqlite3.c	/^typedef struct Fts5Auxdata Fts5Auxdata;$/;"	t	typeref:struct:Fts5Auxdata	file:
Fts5Auxiliary	sqlite\sqlite3.c	/^struct Fts5Auxiliary {$/;"	s	file:
Fts5Auxiliary	sqlite\sqlite3.c	/^typedef struct Fts5Auxiliary Fts5Auxiliary;$/;"	t	typeref:struct:Fts5Auxiliary	file:
Fts5Bm25Data	sqlite\sqlite3.c	/^struct Fts5Bm25Data {$/;"	s	file:
Fts5Bm25Data	sqlite\sqlite3.c	/^typedef struct Fts5Bm25Data Fts5Bm25Data;$/;"	t	typeref:struct:Fts5Bm25Data	file:
Fts5Buffer	sqlite\sqlite3.c	/^struct Fts5Buffer {$/;"	s	file:
Fts5Buffer	sqlite\sqlite3.c	/^typedef struct Fts5Buffer Fts5Buffer;$/;"	t	typeref:struct:Fts5Buffer	file:
Fts5CResult	sqlite\sqlite3.c	/^struct Fts5CResult {$/;"	s	file:
Fts5CResult	sqlite\sqlite3.c	/^typedef struct Fts5CResult Fts5CResult;$/;"	t	typeref:struct:Fts5CResult	file:
Fts5Colset	sqlite\sqlite3.c	/^struct Fts5Colset {$/;"	s	file:
Fts5Colset	sqlite\sqlite3.c	/^typedef struct Fts5Colset Fts5Colset;$/;"	t	typeref:struct:Fts5Colset	file:
Fts5Config	sqlite\sqlite3.c	/^struct Fts5Config {$/;"	s	file:
Fts5Config	sqlite\sqlite3.c	/^typedef struct Fts5Config Fts5Config;$/;"	t	typeref:struct:Fts5Config	file:
Fts5Context	sqlite\sqlite3.c	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context	file:
Fts5Cursor	sqlite\sqlite3.c	/^struct Fts5Cursor {$/;"	s	file:
Fts5Cursor	sqlite\sqlite3.c	/^typedef struct Fts5Cursor Fts5Cursor;$/;"	t	typeref:struct:Fts5Cursor	file:
Fts5Data	sqlite\sqlite3.c	/^struct Fts5Data {$/;"	s	file:
Fts5Data	sqlite\sqlite3.c	/^typedef struct Fts5Data Fts5Data;$/;"	t	typeref:struct:Fts5Data	file:
Fts5DlidxIter	sqlite\sqlite3.c	/^struct Fts5DlidxIter {$/;"	s	file:
Fts5DlidxIter	sqlite\sqlite3.c	/^typedef struct Fts5DlidxIter Fts5DlidxIter;$/;"	t	typeref:struct:Fts5DlidxIter	file:
Fts5DlidxLvl	sqlite\sqlite3.c	/^struct Fts5DlidxLvl {$/;"	s	file:
Fts5DlidxLvl	sqlite\sqlite3.c	/^typedef struct Fts5DlidxLvl Fts5DlidxLvl;$/;"	t	typeref:struct:Fts5DlidxLvl	file:
Fts5DlidxWriter	sqlite\sqlite3.c	/^struct Fts5DlidxWriter {$/;"	s	file:
Fts5DlidxWriter	sqlite\sqlite3.c	/^typedef struct Fts5DlidxWriter Fts5DlidxWriter;$/;"	t	typeref:struct:Fts5DlidxWriter	file:
Fts5DoclistIter	sqlite\sqlite3.c	/^struct Fts5DoclistIter {$/;"	s	file:
Fts5DoclistIter	sqlite\sqlite3.c	/^typedef struct Fts5DoclistIter Fts5DoclistIter;$/;"	t	typeref:struct:Fts5DoclistIter	file:
Fts5Enum	sqlite\sqlite3.c	/^struct Fts5Enum {$/;"	s	file:
Fts5Enum	sqlite\sqlite3.c	/^typedef struct Fts5Enum Fts5Enum;$/;"	t	typeref:struct:Fts5Enum	file:
Fts5Expr	sqlite\sqlite3.c	/^struct Fts5Expr {$/;"	s	file:
Fts5Expr	sqlite\sqlite3.c	/^typedef struct Fts5Expr Fts5Expr;$/;"	t	typeref:struct:Fts5Expr	file:
Fts5ExprCtx	sqlite\sqlite3.c	/^struct Fts5ExprCtx {$/;"	s	file:
Fts5ExprCtx	sqlite\sqlite3.c	/^typedef struct Fts5ExprCtx Fts5ExprCtx;$/;"	t	typeref:struct:Fts5ExprCtx	file:
Fts5ExprNearset	sqlite\sqlite3.c	/^struct Fts5ExprNearset {$/;"	s	file:
Fts5ExprNearset	sqlite\sqlite3.c	/^typedef struct Fts5ExprNearset Fts5ExprNearset;$/;"	t	typeref:struct:Fts5ExprNearset	file:
Fts5ExprNode	sqlite\sqlite3.c	/^struct Fts5ExprNode {$/;"	s	file:
Fts5ExprNode	sqlite\sqlite3.c	/^typedef struct Fts5ExprNode Fts5ExprNode;$/;"	t	typeref:struct:Fts5ExprNode	file:
Fts5ExprPhrase	sqlite\sqlite3.c	/^struct Fts5ExprPhrase {$/;"	s	file:
Fts5ExprPhrase	sqlite\sqlite3.c	/^typedef struct Fts5ExprPhrase Fts5ExprPhrase;$/;"	t	typeref:struct:Fts5ExprPhrase	file:
Fts5ExprTerm	sqlite\sqlite3.c	/^struct Fts5ExprTerm {$/;"	s	file:
Fts5ExprTerm	sqlite\sqlite3.c	/^typedef struct Fts5ExprTerm Fts5ExprTerm;$/;"	t	typeref:struct:Fts5ExprTerm	file:
Fts5ExtensionApi	sqlite\sqlite3.c	/^struct Fts5ExtensionApi {$/;"	s	file:
Fts5ExtensionApi	sqlite\sqlite3.c	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi	file:
Fts5FlushCtx	sqlite\sqlite3.c	/^struct Fts5FlushCtx {$/;"	s	file:
Fts5FlushCtx	sqlite\sqlite3.c	/^typedef struct Fts5FlushCtx Fts5FlushCtx;$/;"	t	typeref:struct:Fts5FlushCtx	file:
Fts5Global	sqlite\sqlite3.c	/^struct Fts5Global {$/;"	s	file:
Fts5Global	sqlite\sqlite3.c	/^typedef struct Fts5Global Fts5Global;$/;"	t	typeref:struct:Fts5Global	file:
Fts5Hash	sqlite\sqlite3.c	/^struct Fts5Hash {$/;"	s	file:
Fts5Hash	sqlite\sqlite3.c	/^typedef struct Fts5Hash Fts5Hash;$/;"	t	typeref:struct:Fts5Hash	file:
Fts5HashEntry	sqlite\sqlite3.c	/^struct Fts5HashEntry {$/;"	s	file:
Fts5HashEntry	sqlite\sqlite3.c	/^typedef struct Fts5HashEntry Fts5HashEntry;$/;"	t	typeref:struct:Fts5HashEntry	file:
Fts5Index	sqlite\sqlite3.c	/^struct Fts5Index {$/;"	s	file:
Fts5Index	sqlite\sqlite3.c	/^typedef struct Fts5Index Fts5Index;$/;"	t	typeref:struct:Fts5Index	file:
Fts5IndexIter	sqlite\sqlite3.c	/^struct Fts5IndexIter {$/;"	s	file:
Fts5IndexIter	sqlite\sqlite3.c	/^typedef struct Fts5IndexIter Fts5IndexIter;$/;"	t	typeref:struct:Fts5IndexIter	file:
Fts5InsertCtx	sqlite\sqlite3.c	/^struct Fts5InsertCtx {$/;"	s	file:
Fts5InsertCtx	sqlite\sqlite3.c	/^typedef struct Fts5InsertCtx Fts5InsertCtx;$/;"	t	typeref:struct:Fts5InsertCtx	file:
Fts5IntegrityCtx	sqlite\sqlite3.c	/^struct Fts5IntegrityCtx {$/;"	s	file:
Fts5IntegrityCtx	sqlite\sqlite3.c	/^typedef struct Fts5IntegrityCtx Fts5IntegrityCtx;$/;"	t	typeref:struct:Fts5IntegrityCtx	file:
Fts5Iter	sqlite\sqlite3.c	/^struct Fts5Iter {$/;"	s	file:
Fts5Iter	sqlite\sqlite3.c	/^typedef struct Fts5Iter Fts5Iter;$/;"	t	typeref:struct:Fts5Iter	file:
Fts5LookaheadReader	sqlite\sqlite3.c	/^struct Fts5LookaheadReader {$/;"	s	file:
Fts5LookaheadReader	sqlite\sqlite3.c	/^typedef struct Fts5LookaheadReader Fts5LookaheadReader;$/;"	t	typeref:struct:Fts5LookaheadReader	file:
Fts5MatchPhrase	sqlite\sqlite3.c	/^struct Fts5MatchPhrase {$/;"	s	file:
Fts5NearTrimmer	sqlite\sqlite3.c	/^struct Fts5NearTrimmer {$/;"	s	file:
Fts5NearTrimmer	sqlite\sqlite3.c	/^typedef struct Fts5NearTrimmer Fts5NearTrimmer;$/;"	t	typeref:struct:Fts5NearTrimmer	file:
Fts5NodeIsString	sqlite\sqlite3.c	193217;"	d	file:
Fts5PageWriter	sqlite\sqlite3.c	/^struct Fts5PageWriter {$/;"	s	file:
Fts5PageWriter	sqlite\sqlite3.c	/^typedef struct Fts5PageWriter Fts5PageWriter;$/;"	t	typeref:struct:Fts5PageWriter	file:
Fts5Parse	sqlite\sqlite3.c	/^struct Fts5Parse {$/;"	s	file:
Fts5Parse	sqlite\sqlite3.c	/^typedef struct Fts5Parse Fts5Parse;$/;"	t	typeref:struct:Fts5Parse	file:
Fts5PhraseIter	sqlite\sqlite3.c	/^struct Fts5PhraseIter {$/;"	s	file:
Fts5PhraseIter	sqlite\sqlite3.c	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter	file:
Fts5PoslistPopulator	sqlite\sqlite3.c	/^struct Fts5PoslistPopulator {$/;"	s	file:
Fts5PoslistPopulator	sqlite\sqlite3.c	/^typedef struct Fts5PoslistPopulator Fts5PoslistPopulator;$/;"	t	typeref:struct:Fts5PoslistPopulator	file:
Fts5PoslistReader	sqlite\sqlite3.c	/^struct Fts5PoslistReader {$/;"	s	file:
Fts5PoslistReader	sqlite\sqlite3.c	/^typedef struct Fts5PoslistReader Fts5PoslistReader;$/;"	t	typeref:struct:Fts5PoslistReader	file:
Fts5PoslistWriter	sqlite\sqlite3.c	/^struct Fts5PoslistWriter {$/;"	s	file:
Fts5PoslistWriter	sqlite\sqlite3.c	/^typedef struct Fts5PoslistWriter Fts5PoslistWriter;$/;"	t	typeref:struct:Fts5PoslistWriter	file:
Fts5SFinder	sqlite\sqlite3.c	/^struct Fts5SFinder {$/;"	s	file:
Fts5SFinder	sqlite\sqlite3.c	/^typedef struct Fts5SFinder Fts5SFinder;$/;"	t	typeref:struct:Fts5SFinder	file:
Fts5SegIter	sqlite\sqlite3.c	/^struct Fts5SegIter {$/;"	s	file:
Fts5SegIter	sqlite\sqlite3.c	/^typedef struct Fts5SegIter Fts5SegIter;$/;"	t	typeref:struct:Fts5SegIter	file:
Fts5SegWriter	sqlite\sqlite3.c	/^struct Fts5SegWriter {$/;"	s	file:
Fts5SegWriter	sqlite\sqlite3.c	/^typedef struct Fts5SegWriter Fts5SegWriter;$/;"	t	typeref:struct:Fts5SegWriter	file:
Fts5Sorter	sqlite\sqlite3.c	/^struct Fts5Sorter {$/;"	s	file:
Fts5Sorter	sqlite\sqlite3.c	/^typedef struct Fts5Sorter Fts5Sorter;$/;"	t	typeref:struct:Fts5Sorter	file:
Fts5Storage	sqlite\sqlite3.c	/^struct Fts5Storage {$/;"	s	file:
Fts5Storage	sqlite\sqlite3.c	/^typedef struct Fts5Storage Fts5Storage;$/;"	t	typeref:struct:Fts5Storage	file:
Fts5Structure	sqlite\sqlite3.c	/^struct Fts5Structure {$/;"	s	file:
Fts5Structure	sqlite\sqlite3.c	/^typedef struct Fts5Structure Fts5Structure;$/;"	t	typeref:struct:Fts5Structure	file:
Fts5StructureLevel	sqlite\sqlite3.c	/^struct Fts5StructureLevel {$/;"	s	file:
Fts5StructureLevel	sqlite\sqlite3.c	/^typedef struct Fts5StructureLevel Fts5StructureLevel;$/;"	t	typeref:struct:Fts5StructureLevel	file:
Fts5StructureSegment	sqlite\sqlite3.c	/^struct Fts5StructureSegment {$/;"	s	file:
Fts5StructureSegment	sqlite\sqlite3.c	/^typedef struct Fts5StructureSegment Fts5StructureSegment;$/;"	t	typeref:struct:Fts5StructureSegment	file:
Fts5Table	sqlite\sqlite3.c	/^struct Fts5Table {$/;"	s	file:
Fts5Table	sqlite\sqlite3.c	/^typedef struct Fts5Table Fts5Table;$/;"	t	typeref:struct:Fts5Table	file:
Fts5Termset	sqlite\sqlite3.c	/^struct Fts5Termset {$/;"	s	file:
Fts5Termset	sqlite\sqlite3.c	/^typedef struct Fts5Termset Fts5Termset;$/;"	t	typeref:struct:Fts5Termset	file:
Fts5TermsetEntry	sqlite\sqlite3.c	/^struct Fts5TermsetEntry {$/;"	s	file:
Fts5TermsetEntry	sqlite\sqlite3.c	/^typedef struct Fts5TermsetEntry Fts5TermsetEntry;$/;"	t	typeref:struct:Fts5TermsetEntry	file:
Fts5Token	sqlite\sqlite3.c	/^struct Fts5Token {$/;"	s	file:
Fts5Token	sqlite\sqlite3.c	/^typedef struct Fts5Token Fts5Token;$/;"	t	typeref:struct:Fts5Token	file:
Fts5Tokenizer	sqlite\sqlite3.c	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer	file:
Fts5TokenizerModule	sqlite\sqlite3.c	/^struct Fts5TokenizerModule {$/;"	s	file:
Fts5TokenizerModule	sqlite\sqlite3.c	/^typedef struct Fts5TokenizerModule Fts5TokenizerModule;$/;"	t	typeref:struct:Fts5TokenizerModule	file:
Fts5TransactionState	sqlite\sqlite3.c	/^struct Fts5TransactionState {$/;"	s	file:
Fts5VocabCursor	sqlite\sqlite3.c	/^struct Fts5VocabCursor {$/;"	s	file:
Fts5VocabCursor	sqlite\sqlite3.c	/^typedef struct Fts5VocabCursor Fts5VocabCursor;$/;"	t	typeref:struct:Fts5VocabCursor	file:
Fts5VocabTable	sqlite\sqlite3.c	/^struct Fts5VocabTable {$/;"	s	file:
Fts5VocabTable	sqlite\sqlite3.c	/^typedef struct Fts5VocabTable Fts5VocabTable;$/;"	t	typeref:struct:Fts5VocabTable	file:
FuncDef	sqlite\sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	sqlite\sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	sqlite\sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	sqlite\sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	sqlite\sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	sqlite\sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GCC_VERSION	sqlite\sqlite3.c	169169;"	d	file:
GCC_VERSION	sqlite\sqlite3.c	169171;"	d	file:
GCC_VERSION	sqlite\sqlite3.c	968;"	d	file:
GCC_VERSION	sqlite\sqlite3.c	970;"	d	file:
GETVARINT_INIT	sqlite\sqlite3.c	150890;"	d	file:
GETVARINT_STEP	sqlite\sqlite3.c	150887;"	d	file:
GLOBAL	sqlite\sqlite3.c	13549;"	d	file:
GLOBAL	sqlite\sqlite3.c	13555;"	d	file:
HANDLE_TO_WINFILE	sqlite\sqlite3.c	41441;"	d	file:
HASHSIZE	sqlite\sqlite3.c	168899;"	d	file:
HASHTABLE_HASH_1	sqlite\sqlite3.c	57309;"	d	file:
HASHTABLE_NPAGE	sqlite\sqlite3.c	57308;"	d	file:
HASHTABLE_NPAGE_ONE	sqlite\sqlite3.c	57317;"	d	file:
HASHTABLE_NSLOT	sqlite\sqlite3.c	57310;"	d	file:
HASH_APPEND	sqlite\sqlite3.c	180875;"	d	file:
HAS_UPDATE_HOOK	sqlite\sqlite3.c	81253;"	d	file:
HAS_UPDATE_HOOK	sqlite\sqlite3.c	81255;"	d	file:
HAVE_FCHOWN	sqlite\sqlite3.c	914;"	d	file:
HAVE_FULLFSYNC	sqlite\sqlite3.c	34705;"	d	file:
HAVE_FULLFSYNC	sqlite\sqlite3.c	34707;"	d	file:
HAVE_GETHOSTUUID	sqlite\sqlite3.c	31158;"	d	file:
HAVE_LOCALTIME_S	sqlite\sqlite3.c	20434;"	d	file:
HAVE_LOCALTIME_S	sqlite\sqlite3.c	20435;"	d	file:
HAVE_LSTAT	sqlite\sqlite3.c	916;"	d	file:
HAVE_MREMAP	sqlite\sqlite3.c	31563;"	d	file:
HAVE_MREMAP	sqlite\sqlite3.c	31565;"	d	file:
HAVE_PREAD	sqlite\sqlite3.c	31122;"	d	file:
HAVE_PWRITE	sqlite\sqlite3.c	31123;"	d	file:
HAVE_READLINK	sqlite\sqlite3.c	915;"	d	file:
HAVE_UTIME	sqlite\sqlite3.c	910;"	d	file:
HasRowid	sqlite\sqlite3.c	16211;"	d	file:
Hash	sqlite\sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	sqlite\sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	sqlite\sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	sqlite\sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
HiddenIndexInfo	sqlite\sqlite3.c	/^struct HiddenIndexInfo {$/;"	s	file:
HiddenIndexInfo	sqlite\sqlite3.c	/^typedef struct HiddenIndexInfo HiddenIndexInfo;$/;"	t	typeref:struct:HiddenIndexInfo	file:
HighlightContext	sqlite\sqlite3.c	/^struct HighlightContext {$/;"	s	file:
HighlightContext	sqlite\sqlite3.c	/^typedef struct HighlightContext HighlightContext;$/;"	t	typeref:struct:HighlightContext	file:
INCRINIT_NORMAL	sqlite\sqlite3.c	91177;"	d	file:
INCRINIT_ROOT	sqlite\sqlite3.c	91179;"	d	file:
INCRINIT_TASK	sqlite\sqlite3.c	91178;"	d	file:
INT16_TYPE	sqlite\sqlite3.c	13229;"	d	file:
INT16_TYPE	sqlite\sqlite3.c	13231;"	d	file:
INT8_TYPE	sqlite\sqlite3.c	13243;"	d	file:
INT8_TYPE	sqlite\sqlite3.c	13245;"	d	file:
INTERFACE	sqlite\sqlite3.c	140005;"	d	file:
INTERFACE	sqlite\sqlite3.c	189787;"	d	file:
INT_464269060799999	sqlite\sqlite3.c	20343;"	d	file:
INVALID_FILE_ATTRIBUTES	sqlite\sqlite3.c	39461;"	d	file:
INVALID_SET_FILE_POINTER	sqlite\sqlite3.c	41793;"	d	file:
IN_DECLARE_VTAB	sqlite\sqlite3.c	17322;"	d	file:
IN_DECLARE_VTAB	sqlite\sqlite3.c	17324;"	d	file:
IN_INDEX_EPH	sqlite\sqlite3.c	18554;"	d	file:
IN_INDEX_INDEX_ASC	sqlite\sqlite3.c	18555;"	d	file:
IN_INDEX_INDEX_DESC	sqlite\sqlite3.c	18556;"	d	file:
IN_INDEX_LOOP	sqlite\sqlite3.c	18563;"	d	file:
IN_INDEX_MEMBERSHIP	sqlite\sqlite3.c	18562;"	d	file:
IN_INDEX_NOOP	sqlite\sqlite3.c	18557;"	d	file:
IN_INDEX_NOOP_OK	sqlite\sqlite3.c	18561;"	d	file:
IN_INDEX_ROWID	sqlite\sqlite3.c	18553;"	d	file:
IOMETHODS	sqlite\sqlite3.c	36379;"	d	file:
IOTRACE	sqlite\sqlite3.c	18611;"	d	file:
IOTRACE	sqlite\sqlite3.c	18615;"	d	file:
ISAUTOVACUUM	sqlite\sqlite3.c	61250;"	d	file:
ISAUTOVACUUM	sqlite\sqlite3.c	61252;"	d	file:
IS_BIG_INT	sqlite\sqlite3.c	12769;"	d	file:
IS_LOCK_ERROR	sqlite\sqlite3.c	31225;"	d	file:
IcuCursor	sqlite\sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	sqlite\sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	sqlite\sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	sqlite\sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	sqlite\sqlite3.c	144224;"	d	file:
IdChar	sqlite\sqlite3.c	144242;"	d	file:
IdChar	sqlite\sqlite3.c	144705;"	d	file:
IdChar	sqlite\sqlite3.c	144709;"	d	file:
IdList	sqlite\sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	sqlite\sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	sqlite\sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IdxCover	sqlite\sqlite3.c	/^struct IdxCover {$/;"	s	file:
IdxExprTrans	sqlite\sqlite3.c	/^typedef struct IdxExprTrans {$/;"	s	file:
IdxExprTrans	sqlite\sqlite3.c	/^} IdxExprTrans;$/;"	t	typeref:struct:IdxExprTrans	file:
IfNotOmitAV	sqlite\sqlite3.c	61658;"	d	file:
IfNotOmitAV	sqlite\sqlite3.c	61660;"	d	file:
IgnorableOrderby	sqlite\sqlite3.c	17097;"	d	file:
InLoop	sqlite\sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon20::__anon21	file:
IncrMerger	sqlite\sqlite3.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	sqlite\sqlite3.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	sqlite\sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	sqlite\sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrmergeWriter	sqlite\sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	sqlite\sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
Index	sqlite\sqlite3.c	/^struct Index {$/;"	s	file:
Index	sqlite\sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	sqlite\sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	sqlite\sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	sqlite\sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon9	file:
IntegrityCk	sqlite\sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	sqlite\sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	sqlite\sqlite3.c	16199;"	d	file:
IsHiddenColumn	sqlite\sqlite3.c	16202;"	d	file:
IsHiddenColumn	sqlite\sqlite3.c	16205;"	d	file:
IsOrdinaryHiddenColumn	sqlite\sqlite3.c	16200;"	d	file:
IsOrdinaryHiddenColumn	sqlite\sqlite3.c	16203;"	d	file:
IsOrdinaryHiddenColumn	sqlite\sqlite3.c	16206;"	d	file:
IsPowerOfTwo	sqlite\sqlite3.c	13521;"	d	file:
IsPrimaryKeyIndex	sqlite\sqlite3.c	16442;"	d	file:
IsStat3	sqlite\sqlite3.c	100486;"	d	file:
IsStat3	sqlite\sqlite3.c	100489;"	d	file:
IsStat3	sqlite\sqlite3.c	100492;"	d	file:
IsStat34	sqlite\sqlite3.c	100496;"	d	file:
IsStat4	sqlite\sqlite3.c	100485;"	d	file:
IsStat4	sqlite\sqlite3.c	100488;"	d	file:
IsStat4	sqlite\sqlite3.c	100491;"	d	file:
IsUniqueIndex	sqlite\sqlite3.c	16445;"	d	file:
IsVirtual	sqlite\sqlite3.c	16187;"	d	file:
IsVirtual	sqlite\sqlite3.c	16189;"	d	file:
JEACH_ATOM	sqlite\sqlite3.c	187752;"	d	file:
JEACH_FULLKEY	sqlite\sqlite3.c	187755;"	d	file:
JEACH_ID	sqlite\sqlite3.c	187753;"	d	file:
JEACH_JSON	sqlite\sqlite3.c	187757;"	d	file:
JEACH_KEY	sqlite\sqlite3.c	187749;"	d	file:
JEACH_PARENT	sqlite\sqlite3.c	187754;"	d	file:
JEACH_PATH	sqlite\sqlite3.c	187756;"	d	file:
JEACH_ROOT	sqlite\sqlite3.c	187758;"	d	file:
JEACH_TYPE	sqlite\sqlite3.c	187751;"	d	file:
JEACH_VALUE	sqlite\sqlite3.c	187750;"	d	file:
JNODE_APPEND	sqlite\sqlite3.c	185988;"	d	file:
JNODE_ESCAPE	sqlite\sqlite3.c	185984;"	d	file:
JNODE_LABEL	sqlite\sqlite3.c	185989;"	d	file:
JNODE_PATCH	sqlite\sqlite3.c	185987;"	d	file:
JNODE_RAW	sqlite\sqlite3.c	185983;"	d	file:
JNODE_REMOVE	sqlite\sqlite3.c	185985;"	d	file:
JNODE_REPLACE	sqlite\sqlite3.c	185986;"	d	file:
JOURNAL_HDR_SZ	sqlite\sqlite3.c	49903;"	d	file:
JOURNAL_PG_SZ	sqlite\sqlite3.c	49897;"	d	file:
JSON_ARRAY	sqlite\sqlite3.c	185968;"	d	file:
JSON_CACHE_ID	sqlite\sqlite3.c	186823;"	d	file:
JSON_FALSE	sqlite\sqlite3.c	185964;"	d	file:
JSON_INT	sqlite\sqlite3.c	185965;"	d	file:
JSON_MAX_DEPTH	sqlite\sqlite3.c	186028;"	d	file:
JSON_NOINLINE	sqlite\sqlite3.c	186518;"	d	file:
JSON_NOINLINE	sqlite\sqlite3.c	186520;"	d	file:
JSON_NOINLINE	sqlite\sqlite3.c	186522;"	d	file:
JSON_NULL	sqlite\sqlite3.c	185962;"	d	file:
JSON_OBJECT	sqlite\sqlite3.c	185969;"	d	file:
JSON_REAL	sqlite\sqlite3.c	185966;"	d	file:
JSON_STRING	sqlite\sqlite3.c	185967;"	d	file:
JSON_SUBTYPE	sqlite\sqlite3.c	185972;"	d	file:
JSON_TRUE	sqlite\sqlite3.c	185963;"	d	file:
JT_CROSS	sqlite\sqlite3.c	16861;"	d	file:
JT_ERROR	sqlite\sqlite3.c	16866;"	d	file:
JT_INNER	sqlite\sqlite3.c	16860;"	d	file:
JT_LEFT	sqlite\sqlite3.c	16863;"	d	file:
JT_NATURAL	sqlite\sqlite3.c	16862;"	d	file:
JT_OUTER	sqlite\sqlite3.c	16865;"	d	file:
JT_RIGHT	sqlite\sqlite3.c	16864;"	d	file:
JsonEachCursor	sqlite\sqlite3.c	/^struct JsonEachCursor {$/;"	s	file:
JsonEachCursor	sqlite\sqlite3.c	/^typedef struct JsonEachCursor JsonEachCursor;$/;"	t	typeref:struct:JsonEachCursor	file:
JsonNode	sqlite\sqlite3.c	/^struct JsonNode {$/;"	s	file:
JsonNode	sqlite\sqlite3.c	/^typedef struct JsonNode JsonNode;$/;"	t	typeref:struct:JsonNode	file:
JsonParse	sqlite\sqlite3.c	/^struct JsonParse {$/;"	s	file:
JsonParse	sqlite\sqlite3.c	/^typedef struct JsonParse JsonParse;$/;"	t	typeref:struct:JsonParse	file:
JsonString	sqlite\sqlite3.c	/^struct JsonString {$/;"	s	file:
JsonString	sqlite\sqlite3.c	/^typedef struct JsonString JsonString;$/;"	t	typeref:struct:JsonString	file:
KeyClass	sqlite\sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	sqlite\sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	sqlite\sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	sqlite\sqlite3.c	13384;"	d	file:
LARGEST_INT64	sqlite\sqlite3.c	153708;"	d	file:
LARGEST_INT64	sqlite\sqlite3.c	185885;"	d	file:
LARGEST_INT64	sqlite\sqlite3.c	188912;"	d	file:
LCS_ITERATOR_FINISHED	sqlite\sqlite3.c	167396;"	d	file:
LIKEFUNC	sqlite\sqlite3.c	15938;"	d	file:
LOCATE_NOERR	sqlite\sqlite3.c	18056;"	d	file:
LOCATE_VIEW	sqlite\sqlite3.c	18055;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	sqlite\sqlite3.c	42311;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	sqlite\sqlite3.c	42307;"	d	file:
LOGMAX	sqlite\sqlite3.c	23358;"	d	file:
LONGDOUBLE_TYPE	sqlite\sqlite3.c	13080;"	d	file:
LONGDOUBLE_TYPE	sqlite\sqlite3.c	13249;"	d	file:
LcsIterator	sqlite\sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	sqlite\sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LoadDoclistCtx	sqlite\sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	sqlite\sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LogEst	sqlite\sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	sqlite\sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	sqlite\sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	sqlite\sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	sqlite\sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	sqlite\sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASKBIT	sqlite\sqlite3.c	16797;"	d	file:
MASKBIT32	sqlite\sqlite3.c	16798;"	d	file:
MASTER_NAME	sqlite\sqlite3.c	13499;"	d	file:
MASTER_ROOT	sqlite\sqlite3.c	13505;"	d	file:
MAX	sqlite\sqlite3.c	13188;"	d	file:
MAX	sqlite\sqlite3.c	150305;"	d	file:
MAX	sqlite\sqlite3.c	169156;"	d	file:
MAX	sqlite\sqlite3.c	188907;"	d	file:
MAX_6BYTE	sqlite\sqlite3.c	77454;"	d	file:
MAX_INCR_PHRASE_TOKENS	sqlite\sqlite3.c	154808;"	d	file:
MAX_PATH	sqlite\sqlite3.c	39345;"	d	file:
MAX_PATHNAME	sqlite\sqlite3.c	31210;"	d	file:
MAX_ROWID	sqlite\sqlite3.c	85562;"	d	file:
MAX_SECTOR_SIZE	sqlite\sqlite3.c	49547;"	d	file:
MEM5LINK	sqlite\sqlite3.c	23423;"	d	file:
MEMCELLSIZE	sqlite\sqlite3.c	19231;"	d	file:
MEMDB	sqlite\sqlite3.c	49912;"	d	file:
MEMDB	sqlite\sqlite3.c	49914;"	d	file:
MEMJOURNAL_DFLT_FILECHUNKSIZE	sqlite\sqlite3.c	91903;"	d	file:
MEMTYPE_HEAP	sqlite\sqlite3.c	18656;"	d	file:
MEMTYPE_LOOKASIDE	sqlite\sqlite3.c	18657;"	d	file:
MEMTYPE_PCACHE	sqlite\sqlite3.c	18658;"	d	file:
MEM_AffMask	sqlite\sqlite3.c	19251;"	d	file:
MEM_Agg	sqlite\sqlite3.c	19268;"	d	file:
MEM_Blob	sqlite\sqlite3.c	19250;"	d	file:
MEM_Cleared	sqlite\sqlite3.c	19255;"	d	file:
MEM_Dyn	sqlite\sqlite3.c	19265;"	d	file:
MEM_Ephem	sqlite\sqlite3.c	19267;"	d	file:
MEM_Frame	sqlite\sqlite3.c	19253;"	d	file:
MEM_Int	sqlite\sqlite3.c	19248;"	d	file:
MEM_Null	sqlite\sqlite3.c	19246;"	d	file:
MEM_Real	sqlite\sqlite3.c	19249;"	d	file:
MEM_RowSet	sqlite\sqlite3.c	19252;"	d	file:
MEM_Static	sqlite\sqlite3.c	19266;"	d	file:
MEM_Str	sqlite\sqlite3.c	19247;"	d	file:
MEM_Subtype	sqlite\sqlite3.c	19270;"	d	file:
MEM_Term	sqlite\sqlite3.c	19264;"	d	file:
MEM_TypeMask	sqlite\sqlite3.c	19256;"	d	file:
MEM_Undefined	sqlite\sqlite3.c	19254;"	d	file:
MEM_Zero	sqlite\sqlite3.c	19269;"	d	file:
MEM_Zero	sqlite\sqlite3.c	19272;"	d	file:
MEM_Zero	sqlite\sqlite3.c	19273;"	d	file:
MIN	sqlite\sqlite3.c	13185;"	d	file:
MIN	sqlite\sqlite3.c	150302;"	d	file:
MIN	sqlite\sqlite3.c	169159;"	d	file:
MIN	sqlite\sqlite3.c	188906;"	d	file:
MSVC_VERSION	sqlite\sqlite3.c	169208;"	d	file:
MSVC_VERSION	sqlite\sqlite3.c	169210;"	d	file:
MSVC_VERSION	sqlite\sqlite3.c	973;"	d	file:
MSVC_VERSION	sqlite\sqlite3.c	975;"	d	file:
MUTEX_LOGIC	sqlite\sqlite3.c	15357;"	d	file:
MUTEX_LOGIC	sqlite\sqlite3.c	15359;"	d	file:
MX_CELL	sqlite\sqlite3.c	60827;"	d	file:
MX_CELL_SIZE	sqlite\sqlite3.c	60820;"	d	file:
MX_CLOSE_ATTEMPT	sqlite\sqlite3.c	41873;"	d	file:
MX_SMALL	sqlite\sqlite3.c	22630;"	d	file:
MatchInfo	sqlite\sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	sqlite\sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
MatchinfoBuffer	sqlite\sqlite3.c	/^struct MatchinfoBuffer {$/;"	s	file:
MatchinfoBuffer	sqlite\sqlite3.c	/^typedef struct MatchinfoBuffer MatchinfoBuffer;$/;"	t	typeref:struct:MatchinfoBuffer	file:
Mem	sqlite\sqlite3.c	/^typedef struct sqlite3_value Mem;$/;"	t	typeref:struct:sqlite3_value	file:
Mem0Global	sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	sqlite\sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	sqlite\sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	sqlite\sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	sqlite\sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	sqlite\sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	sqlite\sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemFile	sqlite\sqlite3.c	/^struct MemFile {$/;"	s	file:
MemFile	sqlite\sqlite3.c	/^typedef struct MemFile MemFile;$/;"	t	typeref:struct:MemFile	file:
MemJournal	sqlite\sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	sqlite\sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	sqlite\sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	sqlite\sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	sqlite\sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	sqlite\sqlite3.c	19285;"	d	file:
MemValue	sqlite\sqlite3.c	/^  union MemValue {$/;"	u	struct:sqlite3_value	file:
MemVfs	sqlite\sqlite3.c	/^typedef struct sqlite3_vfs MemVfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
MergeEngine	sqlite\sqlite3.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	sqlite\sqlite3.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	sqlite\sqlite3.c	/^struct Module {$/;"	s	file:
Module	sqlite\sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	sqlite\sqlite3.c	68557;"	d	file:
NCELL	sqlite\sqlite3.c	169109;"	d	file:
NCSIZE	sqlite\sqlite3.c	22133;"	d	file:
NC_AllowAgg	sqlite\sqlite3.c	16942;"	d	file:
NC_Complex	sqlite\sqlite3.c	16950;"	d	file:
NC_HasAgg	sqlite\sqlite3.c	16946;"	d	file:
NC_IdxExpr	sqlite\sqlite3.c	16947;"	d	file:
NC_InAggFunc	sqlite\sqlite3.c	16945;"	d	file:
NC_IsCheck	sqlite\sqlite3.c	16944;"	d	file:
NC_MinMaxAgg	sqlite\sqlite3.c	16949;"	d	file:
NC_PartIdx	sqlite\sqlite3.c	16943;"	d	file:
NC_VarSelect	sqlite\sqlite3.c	16948;"	d	file:
NDEBUG	sqlite\sqlite3.c	12616;"	d	file:
NDEBUG	sqlite\sqlite3.c	12619;"	d	file:
NDEBUG	sqlite\sqlite3.c	149953;"	d	file:
NDEBUG	sqlite\sqlite3.c	150387;"	d	file:
NDEBUG	sqlite\sqlite3.c	188280;"	d	file:
NDEBUG	sqlite\sqlite3.c	188283;"	d	file:
NDELAY	sqlite\sqlite3.c	146561;"	d	file:
NEVER	sqlite\sqlite3.c	12692;"	d	file:
NEVER	sqlite\sqlite3.c	12695;"	d	file:
NEVER	sqlite\sqlite3.c	12698;"	d	file:
NEVER	sqlite\sqlite3.c	150358;"	d	file:
NEVER	sqlite\sqlite3.c	150361;"	d	file:
NEVER	sqlite\sqlite3.c	150366;"	d	file:
NEVER	sqlite\sqlite3.c	188904;"	d	file:
NN	sqlite\sqlite3.c	68556;"	d	file:
NOT_WITHIN	sqlite\sqlite3.c	10024;"	d	file:
NO_LOCK	sqlite\sqlite3.c	15158;"	d	file:
NTDDI_WIN8	sqlite\sqlite3.c	39305;"	d	file:
NTDDI_WINBLUE	sqlite\sqlite3.c	39309;"	d	file:
NTDDI_WINTHRESHOLD	sqlite\sqlite3.c	39313;"	d	file:
N_HASH	sqlite\sqlite3.c	22636;"	d	file:
N_OR_COST	sqlite\sqlite3.c	130427;"	d	file:
N_SORT_BUCKET	sqlite\sqlite3.c	47056;"	d	file:
N_STATEMENT	sqlite\sqlite3.c	172087;"	d	file:
NameContext	sqlite\sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	sqlite\sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NodeReader	sqlite\sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	sqlite\sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeWriter	sqlite\sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	sqlite\sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
OE_Abort	sqlite\sqlite3.c	16286;"	d	file:
OE_Cascade	sqlite\sqlite3.c	16294;"	d	file:
OE_Default	sqlite\sqlite3.c	16296;"	d	file:
OE_Fail	sqlite\sqlite3.c	16287;"	d	file:
OE_Ignore	sqlite\sqlite3.c	16288;"	d	file:
OE_None	sqlite\sqlite3.c	16284;"	d	file:
OE_Replace	sqlite\sqlite3.c	16289;"	d	file:
OE_Restrict	sqlite\sqlite3.c	16291;"	d	file:
OE_Rollback	sqlite\sqlite3.c	16285;"	d	file:
OE_SetDflt	sqlite\sqlite3.c	16293;"	d	file:
OE_SetNull	sqlite\sqlite3.c	16292;"	d	file:
OK_IF_ALWAYS_FALSE	sqlite\sqlite3.c	12710;"	d	file:
OK_IF_ALWAYS_FALSE	sqlite\sqlite3.c	12713;"	d	file:
OK_IF_ALWAYS_TRUE	sqlite\sqlite3.c	12709;"	d	file:
OK_IF_ALWAYS_TRUE	sqlite\sqlite3.c	12712;"	d	file:
OMIT_TEMPDB	sqlite\sqlite3.c	13099;"	d	file:
OMIT_TEMPDB	sqlite\sqlite3.c	13101;"	d	file:
ONEPASS_MULTI	sqlite\sqlite3.c	18027;"	d	file:
ONEPASS_OFF	sqlite\sqlite3.c	18025;"	d	file:
ONEPASS_SINGLE	sqlite\sqlite3.c	18026;"	d	file:
ONE_BYTE_INT	sqlite\sqlite3.c	77634;"	d	file:
ONLY_IF_REALLOC_STRESS	sqlite\sqlite3.c	12724;"	d	file:
ONLY_IF_REALLOC_STRESS	sqlite\sqlite3.c	12726;"	d	file:
ONLY_IF_REALLOC_STRESS	sqlite\sqlite3.c	12728;"	d	file:
OPFLAG_APPEND	sqlite\sqlite3.c	17353;"	d	file:
OPFLAG_AUXDELETE	sqlite\sqlite3.c	17364;"	d	file:
OPFLAG_BULKCSR	sqlite\sqlite3.c	17358;"	d	file:
OPFLAG_EPHEM	sqlite\sqlite3.c	17350;"	d	file:
OPFLAG_FORDELETE	sqlite\sqlite3.c	17360;"	d	file:
OPFLAG_ISNOOP	sqlite\sqlite3.c	17355;"	d	file:
OPFLAG_ISUPDATE	sqlite\sqlite3.c	17352;"	d	file:
OPFLAG_LASTROWID	sqlite\sqlite3.c	17351;"	d	file:
OPFLAG_LENGTHARG	sqlite\sqlite3.c	17356;"	d	file:
OPFLAG_NCHANGE	sqlite\sqlite3.c	17348;"	d	file:
OPFLAG_NOCHNG_MAGIC	sqlite\sqlite3.c	17365;"	d	file:
OPFLAG_P2ISREG	sqlite\sqlite3.c	17361;"	d	file:
OPFLAG_PERMUTE	sqlite\sqlite3.c	17362;"	d	file:
OPFLAG_SAVEPOSITION	sqlite\sqlite3.c	17363;"	d	file:
OPFLAG_SEEKEQ	sqlite\sqlite3.c	17359;"	d	file:
OPFLAG_TYPEOFARG	sqlite\sqlite3.c	17357;"	d	file:
OPFLAG_USESEEKRESULT	sqlite\sqlite3.c	17354;"	d	file:
OPFLG_IN1	sqlite\sqlite3.c	14372;"	d	file:
OPFLG_IN2	sqlite\sqlite3.c	14373;"	d	file:
OPFLG_IN3	sqlite\sqlite3.c	14374;"	d	file:
OPFLG_INITIALIZER	sqlite\sqlite3.c	14377;"	d	file:
OPFLG_JUMP	sqlite\sqlite3.c	14371;"	d	file:
OPFLG_OUT2	sqlite\sqlite3.c	14375;"	d	file:
OPFLG_OUT3	sqlite\sqlite3.c	14376;"	d	file:
OP_Add	sqlite\sqlite3.c	14283;"	d	file:
OP_AddImm	sqlite\sqlite3.c	14275;"	d	file:
OP_Affinity	sqlite\sqlite3.c	14295;"	d	file:
OP_AggFinal	sqlite\sqlite3.c	14347;"	d	file:
OP_AggStep	sqlite\sqlite3.c	14346;"	d	file:
OP_AggStep0	sqlite\sqlite3.c	14345;"	d	file:
OP_And	sqlite\sqlite3.c	14239;"	d	file:
OP_AutoCommit	sqlite\sqlite3.c	14196;"	d	file:
OP_BitAnd	sqlite\sqlite3.c	14279;"	d	file:
OP_BitNot	sqlite\sqlite3.c	14290;"	d	file:
OP_BitOr	sqlite\sqlite3.c	14280;"	d	file:
OP_Blob	sqlite\sqlite3.c	14267;"	d	file:
OP_Cast	sqlite\sqlite3.c	14277;"	d	file:
OP_Checkpoint	sqlite\sqlite3.c	14203;"	d	file:
OP_Clear	sqlite\sqlite3.c	14330;"	d	file:
OP_Close	sqlite\sqlite3.c	14309;"	d	file:
OP_CollSeq	sqlite\sqlite3.c	14274;"	d	file:
OP_Column	sqlite\sqlite3.c	14294;"	d	file:
OP_ColumnsUsed	sqlite\sqlite3.c	14310;"	d	file:
OP_Compare	sqlite\sqlite3.c	14289;"	d	file:
OP_Concat	sqlite\sqlite3.c	14288;"	d	file:
OP_Copy	sqlite\sqlite3.c	14270;"	d	file:
OP_Count	sqlite\sqlite3.c	14297;"	d	file:
OP_CreateBtree	sqlite\sqlite3.c	14332;"	d	file:
OP_CursorHint	sqlite\sqlite3.c	14363;"	d	file:
OP_DecrJumpZero	sqlite\sqlite3.c	14254;"	d	file:
OP_DeferredSeek	sqlite\sqlite3.c	14326;"	d	file:
OP_Delete	sqlite\sqlite3.c	14315;"	d	file:
OP_Destroy	sqlite\sqlite3.c	14329;"	d	file:
OP_Divide	sqlite\sqlite3.c	14286;"	d	file:
OP_DropIndex	sqlite\sqlite3.c	14337;"	d	file:
OP_DropTable	sqlite\sqlite3.c	14336;"	d	file:
OP_DropTrigger	sqlite\sqlite3.c	14338;"	d	file:
OP_ElseNotEq	sqlite\sqlite3.c	14253;"	d	file:
OP_EndCoroutine	sqlite\sqlite3.c	14259;"	d	file:
OP_Eq	sqlite\sqlite3.c	14248;"	d	file:
OP_Expire	sqlite\sqlite3.c	14348;"	d	file:
OP_Explain	sqlite\sqlite3.c	14365;"	d	file:
OP_FkCounter	sqlite\sqlite3.c	14342;"	d	file:
OP_FkIfZero	sqlite\sqlite3.c	14242;"	d	file:
OP_Found	sqlite\sqlite3.c	14225;"	d	file:
OP_Function	sqlite\sqlite3.c	14361;"	d	file:
OP_Function0	sqlite\sqlite3.c	14359;"	d	file:
OP_Ge	sqlite\sqlite3.c	14252;"	d	file:
OP_Gosub	sqlite\sqlite3.c	14209;"	d	file:
OP_Goto	sqlite\sqlite3.c	14208;"	d	file:
OP_Gt	sqlite\sqlite3.c	14249;"	d	file:
OP_Halt	sqlite\sqlite3.c	14261;"	d	file:
OP_HaltIfNull	sqlite\sqlite3.c	14260;"	d	file:
OP_IdxDelete	sqlite\sqlite3.c	14325;"	d	file:
OP_IdxGE	sqlite\sqlite3.c	14236;"	d	file:
OP_IdxGT	sqlite\sqlite3.c	14234;"	d	file:
OP_IdxInsert	sqlite\sqlite3.c	14324;"	d	file:
OP_IdxLE	sqlite\sqlite3.c	14233;"	d	file:
OP_IdxLT	sqlite\sqlite3.c	14235;"	d	file:
OP_IdxRowid	sqlite\sqlite3.c	14328;"	d	file:
OP_If	sqlite\sqlite3.c	14216;"	d	file:
OP_IfNot	sqlite\sqlite3.c	14217;"	d	file:
OP_IfNotZero	sqlite\sqlite3.c	14244;"	d	file:
OP_IfNullRow	sqlite\sqlite3.c	14218;"	d	file:
OP_IfPos	sqlite\sqlite3.c	14243;"	d	file:
OP_IfSmaller	sqlite\sqlite3.c	14229;"	d	file:
OP_IncrVacuum	sqlite\sqlite3.c	14255;"	d	file:
OP_Init	sqlite\sqlite3.c	14257;"	d	file:
OP_InitCoroutine	sqlite\sqlite3.c	14210;"	d	file:
OP_Insert	sqlite\sqlite3.c	14313;"	d	file:
OP_InsertInt	sqlite\sqlite3.c	14314;"	d	file:
OP_Int64	sqlite\sqlite3.c	14263;"	d	file:
OP_IntCopy	sqlite\sqlite3.c	14272;"	d	file:
OP_Integer	sqlite\sqlite3.c	14262;"	d	file:
OP_IntegrityCk	sqlite\sqlite3.c	14339;"	d	file:
OP_IsNull	sqlite\sqlite3.c	14245;"	d	file:
OP_IsTrue	sqlite\sqlite3.c	14291;"	d	file:
OP_JournalMode	sqlite\sqlite3.c	14204;"	d	file:
OP_Jump	sqlite\sqlite3.c	14213;"	d	file:
OP_Last	sqlite\sqlite3.c	14228;"	d	file:
OP_Le	sqlite\sqlite3.c	14250;"	d	file:
OP_LoadAnalysis	sqlite\sqlite3.c	14335;"	d	file:
OP_Lt	sqlite\sqlite3.c	14251;"	d	file:
OP_MakeRecord	sqlite\sqlite3.c	14296;"	d	file:
OP_MaxPgcnt	sqlite\sqlite3.c	14357;"	d	file:
OP_MemMax	sqlite\sqlite3.c	14343;"	d	file:
OP_Move	sqlite\sqlite3.c	14269;"	d	file:
OP_Multiply	sqlite\sqlite3.c	14285;"	d	file:
OP_MustBeInt	sqlite\sqlite3.c	14212;"	d	file:
OP_Ne	sqlite\sqlite3.c	14247;"	d	file:
OP_NewRowid	sqlite\sqlite3.c	14312;"	d	file:
OP_Next	sqlite\sqlite3.c	14202;"	d	file:
OP_NextIfOpen	sqlite\sqlite3.c	14200;"	d	file:
OP_NoConflict	sqlite\sqlite3.c	14223;"	d	file:
OP_Noop	sqlite\sqlite3.c	14364;"	d	file:
OP_Not	sqlite\sqlite3.c	14214;"	d	file:
OP_NotExists	sqlite\sqlite3.c	14227;"	d	file:
OP_NotFound	sqlite\sqlite3.c	14224;"	d	file:
OP_NotNull	sqlite\sqlite3.c	14246;"	d	file:
OP_Null	sqlite\sqlite3.c	14265;"	d	file:
OP_NullRow	sqlite\sqlite3.c	14321;"	d	file:
OP_Offset	sqlite\sqlite3.c	14293;"	d	file:
OP_OffsetLimit	sqlite\sqlite3.c	14344;"	d	file:
OP_Once	sqlite\sqlite3.c	14215;"	d	file:
OP_OpenAutoindex	sqlite\sqlite3.c	14304;"	d	file:
OP_OpenDup	sqlite\sqlite3.c	14303;"	d	file:
OP_OpenEphemeral	sqlite\sqlite3.c	14305;"	d	file:
OP_OpenPseudo	sqlite\sqlite3.c	14308;"	d	file:
OP_OpenRead	sqlite\sqlite3.c	14301;"	d	file:
OP_OpenWrite	sqlite\sqlite3.c	14302;"	d	file:
OP_Or	sqlite\sqlite3.c	14238;"	d	file:
OP_Pagecount	sqlite\sqlite3.c	14356;"	d	file:
OP_Param	sqlite\sqlite3.c	14341;"	d	file:
OP_ParseSchema	sqlite\sqlite3.c	14334;"	d	file:
OP_Permutation	sqlite\sqlite3.c	14278;"	d	file:
OP_Prev	sqlite\sqlite3.c	14201;"	d	file:
OP_PrevIfOpen	sqlite\sqlite3.c	14199;"	d	file:
OP_Program	sqlite\sqlite3.c	14241;"	d	file:
OP_PureFunc	sqlite\sqlite3.c	14360;"	d	file:
OP_PureFunc0	sqlite\sqlite3.c	14358;"	d	file:
OP_ReadCookie	sqlite\sqlite3.c	14298;"	d	file:
OP_Real	sqlite\sqlite3.c	14327;"	d	file:
OP_RealAffinity	sqlite\sqlite3.c	14276;"	d	file:
OP_Remainder	sqlite\sqlite3.c	14287;"	d	file:
OP_ReopenIdx	sqlite\sqlite3.c	14300;"	d	file:
OP_ResetCount	sqlite\sqlite3.c	14316;"	d	file:
OP_ResetSorter	sqlite\sqlite3.c	14331;"	d	file:
OP_ResultRow	sqlite\sqlite3.c	14273;"	d	file:
OP_Return	sqlite\sqlite3.c	14258;"	d	file:
OP_Rewind	sqlite\sqlite3.c	14232;"	d	file:
OP_RowData	sqlite\sqlite3.c	14319;"	d	file:
OP_RowSetAdd	sqlite\sqlite3.c	14340;"	d	file:
OP_RowSetRead	sqlite\sqlite3.c	14237;"	d	file:
OP_RowSetTest	sqlite\sqlite3.c	14240;"	d	file:
OP_Rowid	sqlite\sqlite3.c	14320;"	d	file:
OP_SCopy	sqlite\sqlite3.c	14271;"	d	file:
OP_Savepoint	sqlite\sqlite3.c	14195;"	d	file:
OP_SeekEnd	sqlite\sqlite3.c	14322;"	d	file:
OP_SeekGE	sqlite\sqlite3.c	14221;"	d	file:
OP_SeekGT	sqlite\sqlite3.c	14222;"	d	file:
OP_SeekLE	sqlite\sqlite3.c	14220;"	d	file:
OP_SeekLT	sqlite\sqlite3.c	14219;"	d	file:
OP_SeekRowid	sqlite\sqlite3.c	14226;"	d	file:
OP_Sequence	sqlite\sqlite3.c	14311;"	d	file:
OP_SequenceTest	sqlite\sqlite3.c	14307;"	d	file:
OP_SetCookie	sqlite\sqlite3.c	14299;"	d	file:
OP_ShiftLeft	sqlite\sqlite3.c	14281;"	d	file:
OP_ShiftRight	sqlite\sqlite3.c	14282;"	d	file:
OP_SoftNull	sqlite\sqlite3.c	14266;"	d	file:
OP_Sort	sqlite\sqlite3.c	14231;"	d	file:
OP_SorterCompare	sqlite\sqlite3.c	14317;"	d	file:
OP_SorterData	sqlite\sqlite3.c	14318;"	d	file:
OP_SorterInsert	sqlite\sqlite3.c	14323;"	d	file:
OP_SorterNext	sqlite\sqlite3.c	14198;"	d	file:
OP_SorterOpen	sqlite\sqlite3.c	14306;"	d	file:
OP_SorterSort	sqlite\sqlite3.c	14230;"	d	file:
OP_SqlExec	sqlite\sqlite3.c	14333;"	d	file:
OP_String	sqlite\sqlite3.c	14264;"	d	file:
OP_String8	sqlite\sqlite3.c	14292;"	d	file:
OP_Subtract	sqlite\sqlite3.c	14284;"	d	file:
OP_TableLock	sqlite\sqlite3.c	14349;"	d	file:
OP_Trace	sqlite\sqlite3.c	14362;"	d	file:
OP_Transaction	sqlite\sqlite3.c	14197;"	d	file:
OP_VBegin	sqlite\sqlite3.c	14350;"	d	file:
OP_VColumn	sqlite\sqlite3.c	14354;"	d	file:
OP_VCreate	sqlite\sqlite3.c	14351;"	d	file:
OP_VDestroy	sqlite\sqlite3.c	14352;"	d	file:
OP_VFilter	sqlite\sqlite3.c	14206;"	d	file:
OP_VNext	sqlite\sqlite3.c	14256;"	d	file:
OP_VOpen	sqlite\sqlite3.c	14353;"	d	file:
OP_VRename	sqlite\sqlite3.c	14355;"	d	file:
OP_VUpdate	sqlite\sqlite3.c	14207;"	d	file:
OP_Vacuum	sqlite\sqlite3.c	14205;"	d	file:
OP_Variable	sqlite\sqlite3.c	14268;"	d	file:
OP_Yield	sqlite\sqlite3.c	14211;"	d	file:
ORIGVFS	sqlite\sqlite3.c	45355;"	d	file:
OSTRACE	sqlite\sqlite3.c	12737;"	d	file:
OSTRACE	sqlite\sqlite3.c	12740;"	d	file:
OS_VXWORKS	sqlite\sqlite3.c	905;"	d	file:
OS_VXWORKS	sqlite\sqlite3.c	913;"	d	file:
O_BINARY	sqlite\sqlite3.c	31545;"	d	file:
O_LARGEFILE	sqlite\sqlite3.c	31535;"	d	file:
O_LARGEFILE	sqlite\sqlite3.c	31538;"	d	file:
O_LARGEFILE	sqlite\sqlite3.c	31539;"	d	file:
O_NOFOLLOW	sqlite\sqlite3.c	31542;"	d	file:
Op	sqlite\sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	sqlite\sqlite3.c	30863;"	d	file:
OpHelp	sqlite\sqlite3.c	30865;"	d	file:
OpenCounter	sqlite\sqlite3.c	25048;"	d	file:
OpenCounter	sqlite\sqlite3.c	25050;"	d	file:
OpenCounter	sqlite\sqlite3.c	31521;"	d	file:
OpenCounter	sqlite\sqlite3.c	31523;"	d	file:
OpenCounter	sqlite\sqlite3.c	39246;"	d	file:
OpenCounter	sqlite\sqlite3.c	39248;"	d	file:
OptimizationDisabled	sqlite\sqlite3.c	15784;"	d	file:
OptimizationEnabled	sqlite\sqlite3.c	15785;"	d	file:
P4_ADVANCE	sqlite\sqlite3.c	14138;"	d	file:
P4_COLLSEQ	sqlite\sqlite3.c	14135;"	d	file:
P4_DYNAMIC	sqlite\sqlite3.c	14142;"	d	file:
P4_DYNBLOB	sqlite\sqlite3.c	14152;"	d	file:
P4_EXPR	sqlite\sqlite3.c	14145;"	d	file:
P4_FREE_IF_LE	sqlite\sqlite3.c	14141;"	d	file:
P4_FUNCCTX	sqlite\sqlite3.c	14151;"	d	file:
P4_FUNCDEF	sqlite\sqlite3.c	14143;"	d	file:
P4_INT32	sqlite\sqlite3.c	14136;"	d	file:
P4_INT64	sqlite\sqlite3.c	14149;"	d	file:
P4_INTARRAY	sqlite\sqlite3.c	14150;"	d	file:
P4_KEYINFO	sqlite\sqlite3.c	14144;"	d	file:
P4_MEM	sqlite\sqlite3.c	14146;"	d	file:
P4_NOTUSED	sqlite\sqlite3.c	14132;"	d	file:
P4_REAL	sqlite\sqlite3.c	14148;"	d	file:
P4_STATIC	sqlite\sqlite3.c	14134;"	d	file:
P4_SUBPROGRAM	sqlite\sqlite3.c	14137;"	d	file:
P4_TABLE	sqlite\sqlite3.c	14139;"	d	file:
P4_TRANSIENT	sqlite\sqlite3.c	14133;"	d	file:
P4_VTAB	sqlite\sqlite3.c	14147;"	d	file:
P5_ConstraintCheck	sqlite\sqlite3.c	14157;"	d	file:
P5_ConstraintFK	sqlite\sqlite3.c	14158;"	d	file:
P5_ConstraintNotNull	sqlite\sqlite3.c	14155;"	d	file:
P5_ConstraintUnique	sqlite\sqlite3.c	14156;"	d	file:
PAGERID	sqlite\sqlite3.c	49249;"	d	file:
PAGERTRACE	sqlite\sqlite3.c	49238;"	d	file:
PAGER_CACHESPILL	sqlite\sqlite3.c	14677;"	d	file:
PAGER_CKPT_FULLFSYNC	sqlite\sqlite3.c	14676;"	d	file:
PAGER_ERROR	sqlite\sqlite3.c	49475;"	d	file:
PAGER_FLAGS_MASK	sqlite\sqlite3.c	14678;"	d	file:
PAGER_FULLFSYNC	sqlite\sqlite3.c	14675;"	d	file:
PAGER_GET_NOCONTENT	sqlite\sqlite3.c	14659;"	d	file:
PAGER_GET_READONLY	sqlite\sqlite3.c	14660;"	d	file:
PAGER_INCR	sqlite\sqlite3.c	49859;"	d	file:
PAGER_INCR	sqlite\sqlite3.c	49861;"	d	file:
PAGER_JOURNALMODE_DELETE	sqlite\sqlite3.c	14649;"	d	file:
PAGER_JOURNALMODE_MEMORY	sqlite\sqlite3.c	14653;"	d	file:
PAGER_JOURNALMODE_OFF	sqlite\sqlite3.c	14651;"	d	file:
PAGER_JOURNALMODE_PERSIST	sqlite\sqlite3.c	14650;"	d	file:
PAGER_JOURNALMODE_QUERY	sqlite\sqlite3.c	14648;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	sqlite\sqlite3.c	14652;"	d	file:
PAGER_JOURNALMODE_WAL	sqlite\sqlite3.c	14654;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	sqlite\sqlite3.c	14639;"	d	file:
PAGER_LOCKINGMODE_NORMAL	sqlite\sqlite3.c	14638;"	d	file:
PAGER_LOCKINGMODE_QUERY	sqlite\sqlite3.c	14637;"	d	file:
PAGER_MAX_PGNO	sqlite\sqlite3.c	49930;"	d	file:
PAGER_MEMORY	sqlite\sqlite3.c	14632;"	d	file:
PAGER_MJ_PGNO	sqlite\sqlite3.c	14624;"	d	file:
PAGER_OMIT_JOURNAL	sqlite\sqlite3.c	14631;"	d	file:
PAGER_OPEN	sqlite\sqlite3.c	49469;"	d	file:
PAGER_READER	sqlite\sqlite3.c	49470;"	d	file:
PAGER_STAT_HIT	sqlite\sqlite3.c	49845;"	d	file:
PAGER_STAT_MISS	sqlite\sqlite3.c	49846;"	d	file:
PAGER_STAT_SPILL	sqlite\sqlite3.c	49848;"	d	file:
PAGER_STAT_WRITE	sqlite\sqlite3.c	49847;"	d	file:
PAGER_SYNCHRONOUS_EXTRA	sqlite\sqlite3.c	14673;"	d	file:
PAGER_SYNCHRONOUS_FULL	sqlite\sqlite3.c	14672;"	d	file:
PAGER_SYNCHRONOUS_MASK	sqlite\sqlite3.c	14674;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	sqlite\sqlite3.c	14671;"	d	file:
PAGER_SYNCHRONOUS_OFF	sqlite\sqlite3.c	14670;"	d	file:
PAGER_WRITER_CACHEMOD	sqlite\sqlite3.c	49472;"	d	file:
PAGER_WRITER_DBMOD	sqlite\sqlite3.c	49473;"	d	file:
PAGER_WRITER_FINISHED	sqlite\sqlite3.c	49474;"	d	file:
PAGER_WRITER_LOCKED	sqlite\sqlite3.c	49471;"	d	file:
PAGE_IS_PINNED	sqlite\sqlite3.c	47314;"	d	file:
PAGE_IS_UNPINNED	sqlite\sqlite3.c	47315;"	d	file:
PARSE_HDR_SZ	sqlite\sqlite3.c	17313;"	d	file:
PARSE_RECURSE_SZ	sqlite\sqlite3.c	17314;"	d	file:
PARSE_TAIL	sqlite\sqlite3.c	17316;"	d	file:
PARSE_TAIL_SZ	sqlite\sqlite3.c	17315;"	d	file:
PARTLY_WITHIN	sqlite\sqlite3.c	10025;"	d	file:
PCACHE1_MIGHT_USE_GROUP_MUTEX	sqlite\sqlite3.c	47435;"	d	file:
PCACHE1_MIGHT_USE_GROUP_MUTEX	sqlite\sqlite3.c	47439;"	d	file:
PCACHE_DIRTYLIST_ADD	sqlite\sqlite3.c	46479;"	d	file:
PCACHE_DIRTYLIST_FRONT	sqlite\sqlite3.c	46480;"	d	file:
PCACHE_DIRTYLIST_REMOVE	sqlite\sqlite3.c	46478;"	d	file:
PCache	sqlite\sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	sqlite\sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	sqlite\sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	sqlite\sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	sqlite\sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	sqlite\sqlite3.c	15220;"	d	file:
PENDING_BYTE	sqlite\sqlite3.c	15222;"	d	file:
PENDING_BYTE_PAGE	sqlite\sqlite3.c	61176;"	d	file:
PENDING_LOCK	sqlite\sqlite3.c	15161;"	d	file:
PGHDR_CLEAN	sqlite\sqlite3.c	14872;"	d	file:
PGHDR_DIRTY	sqlite\sqlite3.c	14873;"	d	file:
PGHDR_DONT_WRITE	sqlite\sqlite3.c	14877;"	d	file:
PGHDR_MMAP	sqlite\sqlite3.c	14878;"	d	file:
PGHDR_NEED_SYNC	sqlite\sqlite3.c	14875;"	d	file:
PGHDR_WAL_APPEND	sqlite\sqlite3.c	14880;"	d	file:
PGHDR_WRITEABLE	sqlite\sqlite3.c	14874;"	d	file:
PGroup	sqlite\sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	sqlite\sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	sqlite\sqlite3.c	152625;"	d	file:
POS_COLUMN	sqlite\sqlite3.c	150343;"	d	file:
POS_END	sqlite\sqlite3.c	150344;"	d	file:
PROXY_CONCHVERSION	sqlite\sqlite3.c	38118;"	d	file:
PROXY_HEADERLEN	sqlite\sqlite3.c	38119;"	d	file:
PROXY_HOSTIDLEN	sqlite\sqlite3.c	38079;"	d	file:
PROXY_MAXCONCHLEN	sqlite\sqlite3.c	38121;"	d	file:
PROXY_PATHINDEX	sqlite\sqlite3.c	38120;"	d	file:
PTF_INTKEY	sqlite\sqlite3.c	60854;"	d	file:
PTF_LEAF	sqlite\sqlite3.c	60857;"	d	file:
PTF_LEAFDATA	sqlite\sqlite3.c	60856;"	d	file:
PTF_ZERODATA	sqlite\sqlite3.c	60855;"	d	file:
PTRMAP_BTREE	sqlite\sqlite3.c	61232;"	d	file:
PTRMAP_FREEPAGE	sqlite\sqlite3.c	61229;"	d	file:
PTRMAP_ISPAGE	sqlite\sqlite3.c	61195;"	d	file:
PTRMAP_OVERFLOW1	sqlite\sqlite3.c	61230;"	d	file:
PTRMAP_OVERFLOW2	sqlite\sqlite3.c	61231;"	d	file:
PTRMAP_PAGENO	sqlite\sqlite3.c	61193;"	d	file:
PTRMAP_PTROFFSET	sqlite\sqlite3.c	61194;"	d	file:
PTRMAP_ROOTPAGE	sqlite\sqlite3.c	61228;"	d	file:
PURE_DATE	sqlite\sqlite3.c	15929;"	d	file:
Pager	sqlite\sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	sqlite\sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	sqlite\sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	sqlite\sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	sqlite\sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	sqlite\sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	sqlite\sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	sqlite\sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	sqlite\sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	sqlite\sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	sqlite\sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	sqlite\sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	sqlite\sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	sqlite\sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	sqlite\sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	sqlite\sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	sqlite\sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	sqlite\sqlite3.c	/^struct PmaReader {$/;"	s	file:
PmaReader	sqlite\sqlite3.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	sqlite\sqlite3.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	sqlite\sqlite3.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PorterContext	sqlite\sqlite3.c	/^struct PorterContext {$/;"	s	file:
PorterContext	sqlite\sqlite3.c	/^typedef struct PorterContext PorterContext;$/;"	t	typeref:struct:PorterContext	file:
PorterRule	sqlite\sqlite3.c	/^struct PorterRule {$/;"	s	file:
PorterRule	sqlite\sqlite3.c	/^typedef struct PorterRule PorterRule;$/;"	t	typeref:struct:PorterRule	file:
PorterTokenizer	sqlite\sqlite3.c	/^struct PorterTokenizer {$/;"	s	file:
PorterTokenizer	sqlite\sqlite3.c	/^typedef struct PorterTokenizer PorterTokenizer;$/;"	t	typeref:struct:PorterTokenizer	file:
PoslistCallbackCtx	sqlite\sqlite3.c	/^struct PoslistCallbackCtx {$/;"	s	file:
PoslistCallbackCtx	sqlite\sqlite3.c	/^typedef struct PoslistCallbackCtx PoslistCallbackCtx;$/;"	t	typeref:struct:PoslistCallbackCtx	file:
PoslistOffsetsCtx	sqlite\sqlite3.c	/^struct PoslistOffsetsCtx {$/;"	s	file:
PoslistOffsetsCtx	sqlite\sqlite3.c	/^typedef struct PoslistOffsetsCtx PoslistOffsetsCtx;$/;"	t	typeref:struct:PoslistOffsetsCtx	file:
PragFlg_NeedSchema	sqlite\sqlite3.c	116313;"	d	file:
PragFlg_NoColumns	sqlite\sqlite3.c	116314;"	d	file:
PragFlg_NoColumns1	sqlite\sqlite3.c	116315;"	d	file:
PragFlg_ReadOnly	sqlite\sqlite3.c	116316;"	d	file:
PragFlg_Result0	sqlite\sqlite3.c	116317;"	d	file:
PragFlg_Result1	sqlite\sqlite3.c	116318;"	d	file:
PragFlg_SchemaOpt	sqlite\sqlite3.c	116319;"	d	file:
PragFlg_SchemaReq	sqlite\sqlite3.c	116320;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	sqlite\sqlite3.c	116304;"	d	file:
PragTyp_AUTO_VACUUM	sqlite\sqlite3.c	116265;"	d	file:
PragTyp_BUSY_TIMEOUT	sqlite\sqlite3.c	116267;"	d	file:
PragTyp_CACHE_SIZE	sqlite\sqlite3.c	116268;"	d	file:
PragTyp_CACHE_SPILL	sqlite\sqlite3.c	116269;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	sqlite\sqlite3.c	116270;"	d	file:
PragTyp_COLLATION_LIST	sqlite\sqlite3.c	116271;"	d	file:
PragTyp_COMPILE_OPTIONS	sqlite\sqlite3.c	116272;"	d	file:
PragTyp_DATABASE_LIST	sqlite\sqlite3.c	116274;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	sqlite\sqlite3.c	116273;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	sqlite\sqlite3.c	116275;"	d	file:
PragTyp_ENCODING	sqlite\sqlite3.c	116276;"	d	file:
PragTyp_FLAG	sqlite\sqlite3.c	116266;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	sqlite\sqlite3.c	116277;"	d	file:
PragTyp_FOREIGN_KEY_LIST	sqlite\sqlite3.c	116278;"	d	file:
PragTyp_FUNCTION_LIST	sqlite\sqlite3.c	116279;"	d	file:
PragTyp_HEADER_VALUE	sqlite\sqlite3.c	116264;"	d	file:
PragTyp_HEXKEY	sqlite\sqlite3.c	116305;"	d	file:
PragTyp_INCREMENTAL_VACUUM	sqlite\sqlite3.c	116280;"	d	file:
PragTyp_INDEX_INFO	sqlite\sqlite3.c	116281;"	d	file:
PragTyp_INDEX_LIST	sqlite\sqlite3.c	116282;"	d	file:
PragTyp_INTEGRITY_CHECK	sqlite\sqlite3.c	116283;"	d	file:
PragTyp_JOURNAL_MODE	sqlite\sqlite3.c	116284;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	sqlite\sqlite3.c	116285;"	d	file:
PragTyp_KEY	sqlite\sqlite3.c	116306;"	d	file:
PragTyp_LOCKING_MODE	sqlite\sqlite3.c	116287;"	d	file:
PragTyp_LOCK_PROXY_FILE	sqlite\sqlite3.c	116286;"	d	file:
PragTyp_LOCK_STATUS	sqlite\sqlite3.c	116308;"	d	file:
PragTyp_MMAP_SIZE	sqlite\sqlite3.c	116289;"	d	file:
PragTyp_MODULE_LIST	sqlite\sqlite3.c	116290;"	d	file:
PragTyp_OPTIMIZE	sqlite\sqlite3.c	116291;"	d	file:
PragTyp_PAGE_COUNT	sqlite\sqlite3.c	116288;"	d	file:
PragTyp_PAGE_SIZE	sqlite\sqlite3.c	116292;"	d	file:
PragTyp_PARSER_TRACE	sqlite\sqlite3.c	116309;"	d	file:
PragTyp_PRAGMA_LIST	sqlite\sqlite3.c	116293;"	d	file:
PragTyp_REKEY	sqlite\sqlite3.c	116307;"	d	file:
PragTyp_SECURE_DELETE	sqlite\sqlite3.c	116294;"	d	file:
PragTyp_SHRINK_MEMORY	sqlite\sqlite3.c	116295;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	sqlite\sqlite3.c	116296;"	d	file:
PragTyp_STATS	sqlite\sqlite3.c	116310;"	d	file:
PragTyp_SYNCHRONOUS	sqlite\sqlite3.c	116297;"	d	file:
PragTyp_TABLE_INFO	sqlite\sqlite3.c	116298;"	d	file:
PragTyp_TEMP_STORE	sqlite\sqlite3.c	116299;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	sqlite\sqlite3.c	116300;"	d	file:
PragTyp_THREADS	sqlite\sqlite3.c	116301;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	sqlite\sqlite3.c	116302;"	d	file:
PragTyp_WAL_CHECKPOINT	sqlite\sqlite3.c	116303;"	d	file:
PragmaName	sqlite\sqlite3.c	/^typedef struct PragmaName {$/;"	s	file:
PragmaName	sqlite\sqlite3.c	/^} PragmaName;$/;"	t	typeref:struct:PragmaName	file:
PragmaVtab	sqlite\sqlite3.c	/^struct PragmaVtab {$/;"	s	file:
PragmaVtab	sqlite\sqlite3.c	/^typedef struct PragmaVtab PragmaVtab;$/;"	t	typeref:struct:PragmaVtab	file:
PragmaVtabCursor	sqlite\sqlite3.c	/^struct PragmaVtabCursor {$/;"	s	file:
PragmaVtabCursor	sqlite\sqlite3.c	/^typedef struct PragmaVtabCursor PragmaVtabCursor;$/;"	t	typeref:struct:PragmaVtabCursor	file:
PreUpdate	sqlite\sqlite3.c	/^struct PreUpdate {$/;"	s	file:
PreUpdate	sqlite\sqlite3.c	/^typedef struct PreUpdate PreUpdate;$/;"	t	typeref:struct:PreUpdate	file:
PrintfArguments	sqlite\sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	sqlite\sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
RBU_CREATE_STATE	sqlite\sqlite3.c	174639;"	d	file:
RBU_DELETE	sqlite\sqlite3.c	174760;"	d	file:
RBU_ENABLE_DELTA_CKSUM	sqlite\sqlite3.c	174568;"	d	file:
RBU_IDX_DELETE	sqlite\sqlite3.c	174762;"	d	file:
RBU_IDX_INSERT	sqlite\sqlite3.c	174763;"	d	file:
RBU_INSERT	sqlite\sqlite3.c	174759;"	d	file:
RBU_PK_EXTERNAL	sqlite\sqlite3.c	174750;"	d	file:
RBU_PK_IPK	sqlite\sqlite3.c	174749;"	d	file:
RBU_PK_NONE	sqlite\sqlite3.c	174748;"	d	file:
RBU_PK_NOTABLE	sqlite\sqlite3.c	174747;"	d	file:
RBU_PK_VTAB	sqlite\sqlite3.c	174752;"	d	file:
RBU_PK_WITHOUT_ROWID	sqlite\sqlite3.c	174751;"	d	file:
RBU_REPLACE	sqlite\sqlite3.c	174761;"	d	file:
RBU_STAGE_CAPTURE	sqlite\sqlite3.c	174634;"	d	file:
RBU_STAGE_CKPT	sqlite\sqlite3.c	174635;"	d	file:
RBU_STAGE_DONE	sqlite\sqlite3.c	174636;"	d	file:
RBU_STAGE_MOVE	sqlite\sqlite3.c	174633;"	d	file:
RBU_STAGE_OAL	sqlite\sqlite3.c	174632;"	d	file:
RBU_STATE_CKPT	sqlite\sqlite3.c	174627;"	d	file:
RBU_STATE_COOKIE	sqlite\sqlite3.c	174628;"	d	file:
RBU_STATE_IDX	sqlite\sqlite3.c	174624;"	d	file:
RBU_STATE_OALSZ	sqlite\sqlite3.c	174629;"	d	file:
RBU_STATE_PHASEONESTEP	sqlite\sqlite3.c	174630;"	d	file:
RBU_STATE_PROGRESS	sqlite\sqlite3.c	174626;"	d	file:
RBU_STATE_ROW	sqlite\sqlite3.c	174625;"	d	file:
RBU_STATE_STAGE	sqlite\sqlite3.c	174622;"	d	file:
RBU_STATE_TBL	sqlite\sqlite3.c	174623;"	d	file:
RBU_UPDATE	sqlite\sqlite3.c	174765;"	d	file:
READMARK_NOT_USED	sqlite\sqlite3.c	57179;"	d	file:
READ_LOCK	sqlite\sqlite3.c	60918;"	d	file:
READ_UTF16BE	sqlite\sqlite3.c	28540;"	d	file:
READ_UTF16LE	sqlite\sqlite3.c	28530;"	d	file:
READ_UTF8	sqlite\sqlite3.c	168081;"	d	file:
READ_UTF8	sqlite\sqlite3.c	207110;"	d	file:
READ_UTF8	sqlite\sqlite3.c	28577;"	d	file:
REARGUARD	sqlite\sqlite3.c	22128;"	d	file:
REGISTER_TRACE	sqlite\sqlite3.c	81658;"	d	file:
REGISTER_TRACE	sqlite\sqlite3.c	81660;"	d	file:
REOPEN_AS_MEMDB	sqlite\sqlite3.c	102366;"	d	file:
RESERVED_BYTE	sqlite\sqlite3.c	15224;"	d	file:
RESERVED_LOCK	sqlite\sqlite3.c	15160;"	d	file:
RNDAWAY	sqlite\sqlite3.c	171737;"	d	file:
RNDTOWARDS	sqlite\sqlite3.c	171736;"	d	file:
ROUND8	sqlite\sqlite3.c	13391;"	d	file:
ROUNDDOWN8	sqlite\sqlite3.c	13396;"	d	file:
ROWSET_ALLOCATION_SIZE	sqlite\sqlite3.c	48535;"	d	file:
ROWSET_ENTRY_PER_CHUNK	sqlite\sqlite3.c	48540;"	d	file:
ROWSET_NEXT	sqlite\sqlite3.c	48589;"	d	file:
ROWSET_SORTED	sqlite\sqlite3.c	48588;"	d	file:
RTREE_CACHE_SZ	sqlite\sqlite3.c	169022;"	d	file:
RTREE_CHECK_MAX_ERROR	sqlite\sqlite3.c	172431;"	d	file:
RTREE_COORD_INT32	sqlite\sqlite3.c	168960;"	d	file:
RTREE_COORD_REAL32	sqlite\sqlite3.c	168959;"	d	file:
RTREE_DECODE_COORD	sqlite\sqlite3.c	169850;"	d	file:
RTREE_DECODE_COORD	sqlite\sqlite3.c	169856;"	d	file:
RTREE_DECODE_COORD	sqlite\sqlite3.c	169862;"	d	file:
RTREE_DECODE_COORD	sqlite\sqlite3.c	169870;"	d	file:
RTREE_DECODE_COORD	sqlite\sqlite3.c	169876;"	d	file:
RTREE_DEFAULT_ROWEST	sqlite\sqlite3.c	168908;"	d	file:
RTREE_EQ	sqlite\sqlite3.c	169087;"	d	file:
RTREE_GE	sqlite\sqlite3.c	169090;"	d	file:
RTREE_GT	sqlite\sqlite3.c	169091;"	d	file:
RTREE_LE	sqlite\sqlite3.c	169088;"	d	file:
RTREE_LT	sqlite\sqlite3.c	169089;"	d	file:
RTREE_MATCH	sqlite\sqlite3.c	169092;"	d	file:
RTREE_MAXCELLS	sqlite\sqlite3.c	169005;"	d	file:
RTREE_MAX_DEPTH	sqlite\sqlite3.c	169014;"	d	file:
RTREE_MAX_DIMENSIONS	sqlite\sqlite3.c	168893;"	d	file:
RTREE_MINCELLS	sqlite\sqlite3.c	169003;"	d	file:
RTREE_MIN_ROWEST	sqlite\sqlite3.c	168909;"	d	file:
RTREE_OF_CURSOR	sqlite\sqlite3.c	169044;"	d	file:
RTREE_QUERY	sqlite\sqlite3.c	169093;"	d	file:
RTREE_QUEUE_TRACE	sqlite\sqlite3.c	170232;"	d	file:
RTREE_REINSERT	sqlite\sqlite3.c	169004;"	d	file:
RTREE_ZERO	sqlite\sqlite3.c	168970;"	d	file:
RTREE_ZERO	sqlite\sqlite3.c	168974;"	d	file:
RbuFrame	sqlite\sqlite3.c	/^struct RbuFrame {$/;"	s	file:
RbuFrame	sqlite\sqlite3.c	/^typedef struct RbuFrame RbuFrame;$/;"	t	typeref:struct:RbuFrame	file:
RbuObjIter	sqlite\sqlite3.c	/^struct RbuObjIter {$/;"	s	file:
RbuObjIter	sqlite\sqlite3.c	/^typedef struct RbuObjIter RbuObjIter;$/;"	t	typeref:struct:RbuObjIter	file:
RbuState	sqlite\sqlite3.c	/^struct RbuState {$/;"	s	file:
RbuState	sqlite\sqlite3.c	/^typedef struct RbuState RbuState;$/;"	t	typeref:struct:RbuState	file:
RbuUpdateStmt	sqlite\sqlite3.c	/^struct RbuUpdateStmt {$/;"	s	file:
RbuUpdateStmt	sqlite\sqlite3.c	/^typedef struct RbuUpdateStmt RbuUpdateStmt;$/;"	t	typeref:struct:RbuUpdateStmt	file:
RecordCompare	sqlite\sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	sqlite\sqlite3.c	/^static int Reinsert($/;"	f	file:
ReusableSpace	sqlite\sqlite3.c	/^struct ReusableSpace {$/;"	s	file:
RowSet	sqlite\sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	sqlite\sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	sqlite\sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	sqlite\sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	sqlite\sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	sqlite\sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	sqlite\sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	sqlite\sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeCheck	sqlite\sqlite3.c	/^struct RtreeCheck {$/;"	s	file:
RtreeCheck	sqlite\sqlite3.c	/^typedef struct RtreeCheck RtreeCheck;$/;"	t	typeref:struct:RtreeCheck	file:
RtreeConstraint	sqlite\sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	sqlite\sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	sqlite\sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	sqlite\sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	sqlite\sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	sqlite\sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeDValue	sqlite\sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	sqlite\sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	sqlite\sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	sqlite\sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	sqlite\sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	sqlite\sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	sqlite\sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	sqlite\sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeSearchPoint	sqlite\sqlite3.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	sqlite\sqlite3.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeValue	sqlite\sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	sqlite\sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
SAVEPOINT_BEGIN	sqlite\sqlite3.c	15965;"	d	file:
SAVEPOINT_RELEASE	sqlite\sqlite3.c	15966;"	d	file:
SAVEPOINT_ROLLBACK	sqlite\sqlite3.c	15967;"	d	file:
SCHEMA_ENC	sqlite\sqlite3.c	15703;"	d	file:
SCHEMA_TABLE	sqlite\sqlite3.c	13510;"	d	file:
SELECTTRACE	sqlite\sqlite3.c	120292;"	d	file:
SELECTTRACE	sqlite\sqlite3.c	120297;"	d	file:
SELECTTRACE_ENABLED	sqlite\sqlite3.c	13472;"	d	file:
SELECTTRACE_ENABLED	sqlite\sqlite3.c	13474;"	d	file:
SESSIONS_STRM_CHUNK_SIZE	sqlite\sqlite3.c	180486;"	d	file:
SESSIONS_STRM_CHUNK_SIZE	sqlite\sqlite3.c	180488;"	d	file:
SESSION_UINT32	sqlite\sqlite3.c	180748;"	d	file:
SETBIT	sqlite\sqlite3.c	46219;"	d	file:
SET_FULLSYNC	sqlite\sqlite3.c	15106;"	d	file:
SF_Aggregate	sqlite\sqlite3.c	17005;"	d	file:
SF_All	sqlite\sqlite3.c	17003;"	d	file:
SF_ComplexResult	sqlite\sqlite3.c	17020;"	d	file:
SF_Compound	sqlite\sqlite3.c	17010;"	d	file:
SF_Converted	sqlite\sqlite3.c	17018;"	d	file:
SF_Distinct	sqlite\sqlite3.c	17002;"	d	file:
SF_Expanded	sqlite\sqlite3.c	17008;"	d	file:
SF_FixedLimit	sqlite\sqlite3.c	17016;"	d	file:
SF_HasAgg	sqlite\sqlite3.c	17006;"	d	file:
SF_HasTypeInfo	sqlite\sqlite3.c	17009;"	d	file:
SF_IncludeHidden	sqlite\sqlite3.c	17019;"	d	file:
SF_MaybeConvert	sqlite\sqlite3.c	17017;"	d	file:
SF_MinMaxAgg	sqlite\sqlite3.c	17014;"	d	file:
SF_MultiValue	sqlite\sqlite3.c	17012;"	d	file:
SF_NestedFrom	sqlite\sqlite3.c	17013;"	d	file:
SF_Recursive	sqlite\sqlite3.c	17015;"	d	file:
SF_Resolved	sqlite\sqlite3.c	17004;"	d	file:
SF_UsesEphemeral	sqlite\sqlite3.c	17007;"	d	file:
SF_Values	sqlite\sqlite3.c	17011;"	d	file:
SHARED_FIRST	sqlite\sqlite3.c	15225;"	d	file:
SHARED_LOCK	sqlite\sqlite3.c	15159;"	d	file:
SHARED_SIZE	sqlite\sqlite3.c	15226;"	d	file:
SLOT_2_0	sqlite\sqlite3.c	208612;"	d	file:
SLOT_2_0	sqlite\sqlite3.c	29835;"	d	file:
SLOT_4_2_0	sqlite\sqlite3.c	208613;"	d	file:
SLOT_4_2_0	sqlite\sqlite3.c	29836;"	d	file:
SMALLEST_INT64	sqlite\sqlite3.c	13385;"	d	file:
SMALLEST_INT64	sqlite\sqlite3.c	153709;"	d	file:
SMALLEST_INT64	sqlite\sqlite3.c	185886;"	d	file:
SMALLEST_INT64	sqlite\sqlite3.c	188913;"	d	file:
SORTER_MAX_MERGE_COUNT	sqlite\sqlite3.c	89563;"	d	file:
SORTER_TYPE_INTEGER	sqlite\sqlite3.c	89441;"	d	file:
SORTER_TYPE_TEXT	sqlite\sqlite3.c	89442;"	d	file:
SORTFLAG_UseSorter	sqlite\sqlite3.c	120330;"	d	file:
SPILLFLAG_NOSYNC	sqlite\sqlite3.c	49580;"	d	file:
SPILLFLAG_OFF	sqlite\sqlite3.c	49578;"	d	file:
SPILLFLAG_ROLLBACK	sqlite\sqlite3.c	49579;"	d	file:
SQLITE3EXT_H	sqlite\sqlite3.c	114868;"	d	file:
SQLITE3_H	sqlite\sqlite3.c	1058;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite\sqlite3.c	24494;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite\sqlite3.c	24497;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite\sqlite3.c	24499;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite\sqlite3.c	25183;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite\sqlite3.c	25186;"	d	file:
SQLITE3_TEXT	sqlite\sqlite3.c	5315;"	d	file:
SQLITECONFIG_H	sqlite\sqlite3.c	12212;"	d	file:
SQLITECONFIG_H	sqlite\sqlite3.c	50;"	d	file:
SQLITEINT_H	sqlite\sqlite3.c	796;"	d	file:
SQLITE_ABORT	sqlite\sqlite3.c	1451;"	d	file:
SQLITE_ABORT_ROLLBACK	sqlite\sqlite3.c	1544;"	d	file:
SQLITE_ACCESS_EXISTS	sqlite\sqlite3.c	2385;"	d	file:
SQLITE_ACCESS_READ	sqlite\sqlite3.c	2387;"	d	file:
SQLITE_ACCESS_READWRITE	sqlite\sqlite3.c	2386;"	d	file:
SQLITE_AFF_BLOB	sqlite\sqlite3.c	16042;"	d	file:
SQLITE_AFF_INTEGER	sqlite\sqlite3.c	16045;"	d	file:
SQLITE_AFF_MASK	sqlite\sqlite3.c	16054;"	d	file:
SQLITE_AFF_NUMERIC	sqlite\sqlite3.c	16044;"	d	file:
SQLITE_AFF_REAL	sqlite\sqlite3.c	16046;"	d	file:
SQLITE_AFF_TEXT	sqlite\sqlite3.c	16043;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	sqlite\sqlite3.c	18845;"	d	file:
SQLITE_ALTER_TABLE	sqlite\sqlite3.c	3878;"	d	file:
SQLITE_AMALGAMATION	sqlite\sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	sqlite\sqlite3.c	3880;"	d	file:
SQLITE_ANY	sqlite\sqlite3.c	5718;"	d	file:
SQLITE_API	sqlite\sqlite3.c	1076;"	d	file:
SQLITE_APICALL	sqlite\sqlite3.c	1082;"	d	file:
SQLITE_ASCII	sqlite\sqlite3.c	13203;"	d	file:
SQLITE_ATTACH	sqlite\sqlite3.c	3876;"	d	file:
SQLITE_AUTH	sqlite\sqlite3.c	1470;"	d	file:
SQLITE_AUTH_USER	sqlite\sqlite3.c	1558;"	d	file:
SQLITE_AllOpts	sqlite\sqlite3.c	15779;"	d	file:
SQLITE_AutoIndex	sqlite\sqlite3.c	15732;"	d	file:
SQLITE_BIGENDIAN	sqlite\sqlite3.c	13361;"	d	file:
SQLITE_BIGENDIAN	sqlite\sqlite3.c	13365;"	d	file:
SQLITE_BIGENDIAN	sqlite\sqlite3.c	13374;"	d	file:
SQLITE_BIG_DBL	sqlite\sqlite3.c	13082;"	d	file:
SQLITE_BIG_DBL	sqlite\sqlite3.c	13090;"	d	file:
SQLITE_BLDF_INDEXED	sqlite\sqlite3.c	130669;"	d	file:
SQLITE_BLDF_UNIQUE	sqlite\sqlite3.c	130670;"	d	file:
SQLITE_BLOB	sqlite\sqlite3.c	5308;"	d	file:
SQLITE_BTREE_H	sqlite\sqlite3.c	13659;"	d	file:
SQLITE_BUSY	sqlite\sqlite3.c	1452;"	d	file:
SQLITE_BUSY_RECOVERY	sqlite\sqlite3.c	1531;"	d	file:
SQLITE_BUSY_SNAPSHOT	sqlite\sqlite3.c	1532;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	13353;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	13355;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	13357;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	169196;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	169198;"	d	file:
SQLITE_BYTEORDER	sqlite\sqlite3.c	169200;"	d	file:
SQLITE_CALLBACK	sqlite\sqlite3.c	1088;"	d	file:
SQLITE_CANTOPEN	sqlite\sqlite3.c	1461;"	d	file:
SQLITE_CANTOPEN_BKPT	sqlite\sqlite3.c	17679;"	d	file:
SQLITE_CANTOPEN_CONVPATH	sqlite\sqlite3.c	1536;"	d	file:
SQLITE_CANTOPEN_FULLPATH	sqlite\sqlite3.c	1535;"	d	file:
SQLITE_CANTOPEN_ISDIR	sqlite\sqlite3.c	1534;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	sqlite\sqlite3.c	1533;"	d	file:
SQLITE_CDECL	sqlite\sqlite3.c	1079;"	d	file:
SQLITE_CHANGESETAPPLY_NOSAVEPOINT	sqlite\sqlite3.c	11190;"	d	file:
SQLITE_CHANGESET_ABORT	sqlite\sqlite3.c	11286;"	d	file:
SQLITE_CHANGESET_CONFLICT	sqlite\sqlite3.c	11249;"	d	file:
SQLITE_CHANGESET_CONSTRAINT	sqlite\sqlite3.c	11250;"	d	file:
SQLITE_CHANGESET_DATA	sqlite\sqlite3.c	11247;"	d	file:
SQLITE_CHANGESET_FOREIGN_KEY	sqlite\sqlite3.c	11251;"	d	file:
SQLITE_CHANGESET_NOTFOUND	sqlite\sqlite3.c	11248;"	d	file:
SQLITE_CHANGESET_OMIT	sqlite\sqlite3.c	11284;"	d	file:
SQLITE_CHANGESET_REPLACE	sqlite\sqlite3.c	11285;"	d	file:
SQLITE_CHECKPOINT_FULL	sqlite\sqlite3.c	9229;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	sqlite\sqlite3.c	9228;"	d	file:
SQLITE_CHECKPOINT_RESTART	sqlite\sqlite3.c	9230;"	d	file:
SQLITE_CHECKPOINT_TRUNCATE	sqlite\sqlite3.c	9231;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite\sqlite3.c	2978;"	d	file:
SQLITE_CONFIG_GETMALLOC	sqlite\sqlite3.c	2963;"	d	file:
SQLITE_CONFIG_GETMUTEX	sqlite\sqlite3.c	2969;"	d	file:
SQLITE_CONFIG_GETPCACHE	sqlite\sqlite3.c	2973;"	d	file:
SQLITE_CONFIG_GETPCACHE2	sqlite\sqlite3.c	2977;"	d	file:
SQLITE_CONFIG_HEAP	sqlite\sqlite3.c	2966;"	d	file:
SQLITE_CONFIG_LOG	sqlite\sqlite3.c	2974;"	d	file:
SQLITE_CONFIG_LOOKASIDE	sqlite\sqlite3.c	2971;"	d	file:
SQLITE_CONFIG_MALLOC	sqlite\sqlite3.c	2962;"	d	file:
SQLITE_CONFIG_MEMSTATUS	sqlite\sqlite3.c	2967;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	sqlite\sqlite3.c	2980;"	d	file:
SQLITE_CONFIG_MULTITHREAD	sqlite\sqlite3.c	2960;"	d	file:
SQLITE_CONFIG_MUTEX	sqlite\sqlite3.c	2968;"	d	file:
SQLITE_CONFIG_PAGECACHE	sqlite\sqlite3.c	2965;"	d	file:
SQLITE_CONFIG_PCACHE	sqlite\sqlite3.c	2972;"	d	file:
SQLITE_CONFIG_PCACHE2	sqlite\sqlite3.c	2976;"	d	file:
SQLITE_CONFIG_PCACHE_HDRSZ	sqlite\sqlite3.c	2982;"	d	file:
SQLITE_CONFIG_PMASZ	sqlite\sqlite3.c	2983;"	d	file:
SQLITE_CONFIG_SCRATCH	sqlite\sqlite3.c	2964;"	d	file:
SQLITE_CONFIG_SERIALIZED	sqlite\sqlite3.c	2961;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	sqlite\sqlite3.c	2959;"	d	file:
SQLITE_CONFIG_SMALL_MALLOC	sqlite\sqlite3.c	2985;"	d	file:
SQLITE_CONFIG_SQLLOG	sqlite\sqlite3.c	2979;"	d	file:
SQLITE_CONFIG_STMTJRNL_SPILL	sqlite\sqlite3.c	2984;"	d	file:
SQLITE_CONFIG_URI	sqlite\sqlite3.c	2975;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite\sqlite3.c	2981;"	d	file:
SQLITE_CONSTRAINT	sqlite\sqlite3.c	1466;"	d	file:
SQLITE_CONSTRAINT_CHECK	sqlite\sqlite3.c	1545;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	sqlite\sqlite3.c	1546;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite\sqlite3.c	1547;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	sqlite\sqlite3.c	1548;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	sqlite\sqlite3.c	1549;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite\sqlite3.c	1550;"	d	file:
SQLITE_CONSTRAINT_ROWID	sqlite\sqlite3.c	1554;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	sqlite\sqlite3.c	1551;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	sqlite\sqlite3.c	1552;"	d	file:
SQLITE_CONSTRAINT_VTAB	sqlite\sqlite3.c	1553;"	d	file:
SQLITE_COPY	sqlite\sqlite3.c	3885;"	d	file:
SQLITE_CORE	sqlite\sqlite3.c	114846;"	d	file:
SQLITE_CORE	sqlite\sqlite3.c	150842;"	d	file:
SQLITE_CORE	sqlite\sqlite3.c	20;"	d	file:
SQLITE_CORRUPT	sqlite\sqlite3.c	1458;"	d	file:
SQLITE_CORRUPT_BKPT	sqlite\sqlite3.c	17677;"	d	file:
SQLITE_CORRUPT_PAGE	sqlite\sqlite3.c	61736;"	d	file:
SQLITE_CORRUPT_PAGE	sqlite\sqlite3.c	61738;"	d	file:
SQLITE_CORRUPT_PGNO	sqlite\sqlite3.c	17686;"	d	file:
SQLITE_CORRUPT_PGNO	sqlite\sqlite3.c	17690;"	d	file:
SQLITE_CORRUPT_VTAB	sqlite\sqlite3.c	1537;"	d	file:
SQLITE_CREATE_INDEX	sqlite\sqlite3.c	3853;"	d	file:
SQLITE_CREATE_TABLE	sqlite\sqlite3.c	3854;"	d	file:
SQLITE_CREATE_TEMP_INDEX	sqlite\sqlite3.c	3855;"	d	file:
SQLITE_CREATE_TEMP_TABLE	sqlite\sqlite3.c	3856;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	sqlite\sqlite3.c	3857;"	d	file:
SQLITE_CREATE_TEMP_VIEW	sqlite\sqlite3.c	3858;"	d	file:
SQLITE_CREATE_TRIGGER	sqlite\sqlite3.c	3859;"	d	file:
SQLITE_CREATE_VIEW	sqlite\sqlite3.c	3860;"	d	file:
SQLITE_CREATE_VTABLE	sqlite\sqlite3.c	3881;"	d	file:
SQLITE_CacheSpill	sqlite\sqlite3.c	15719;"	d	file:
SQLITE_CellSizeCk	sqlite\sqlite3.c	15738;"	d	file:
SQLITE_CkptFullFSync	sqlite\sqlite3.c	15718;"	d	file:
SQLITE_ColumnCache	sqlite\sqlite3.c	15765;"	d	file:
SQLITE_CountOfView	sqlite\sqlite3.c	15773;"	d	file:
SQLITE_CountRows	sqlite\sqlite3.c	15721;"	d	file:
SQLITE_CoverIdxScan	sqlite\sqlite3.c	15769;"	d	file:
SQLITE_CursorHints	sqlite\sqlite3.c	15774;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite\sqlite3.c	3126;"	d	file:
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	sqlite\sqlite3.c	3128;"	d	file:
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	sqlite\sqlite3.c	3129;"	d	file:
SQLITE_DBCONFIG_ENABLE_QPSG	sqlite\sqlite3.c	3131;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite\sqlite3.c	3127;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	sqlite\sqlite3.c	3125;"	d	file:
SQLITE_DBCONFIG_MAINDBNAME	sqlite\sqlite3.c	3124;"	d	file:
SQLITE_DBCONFIG_MAX	sqlite\sqlite3.c	3133;"	d	file:
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	sqlite\sqlite3.c	3130;"	d	file:
SQLITE_DBCONFIG_TRIGGER_EQP	sqlite\sqlite3.c	3132;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	sqlite\sqlite3.c	8296;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	sqlite\sqlite3.c	8297;"	d	file:
SQLITE_DBSTATUS_CACHE_SPILL	sqlite\sqlite3.c	8301;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	sqlite\sqlite3.c	8290;"	d	file:
SQLITE_DBSTATUS_CACHE_USED_SHARED	sqlite\sqlite3.c	8300;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	sqlite\sqlite3.c	8298;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite\sqlite3.c	8299;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite\sqlite3.c	8293;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite\sqlite3.c	8295;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite\sqlite3.c	8294;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite\sqlite3.c	8289;"	d	file:
SQLITE_DBSTATUS_MAX	sqlite\sqlite3.c	8302;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	sqlite\sqlite3.c	8291;"	d	file:
SQLITE_DBSTATUS_STMT_USED	sqlite\sqlite3.c	8292;"	d	file:
SQLITE_DEBUG_OS_TRACE	sqlite\sqlite3.c	145142;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	sqlite\sqlite3.c	13671;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	sqlite\sqlite3.c	12326;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	sqlite\sqlite3.c	13112;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	sqlite\sqlite3.c	31197;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	sqlite\sqlite3.c	14597;"	d	file:
SQLITE_DEFAULT_LOOKASIDE	sqlite\sqlite3.c	18876;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	sqlite\sqlite3.c	12550;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite\sqlite3.c	13446;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite\sqlite3.c	13449;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite\sqlite3.c	13450;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12376;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12379;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12380;"	d	file:
SQLITE_DEFAULT_PCACHE_INITSZ	sqlite\sqlite3.c	13161;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	sqlite\sqlite3.c	31204;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqlite\sqlite3.c	13120;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	sqlite\sqlite3.c	15113;"	d	file:
SQLITE_DEFAULT_SYNCHRONOUS	sqlite\sqlite3.c	15370;"	d	file:
SQLITE_DEFAULT_SYNCHRONOUS	sqlite\sqlite3.c	15390;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqlite\sqlite3.c	12334;"	d	file:
SQLITE_DEFAULT_WAL_SYNCHRONOUS	sqlite\sqlite3.c	15393;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	sqlite\sqlite3.c	13144;"	d	file:
SQLITE_DELETE	sqlite\sqlite3.c	3861;"	d	file:
SQLITE_DENY	sqlite\sqlite3.c	3830;"	d	file:
SQLITE_DEPRECATED	sqlite\sqlite3.c	1107;"	d	file:
SQLITE_DESERIALIZE_FREEONCLOSE	sqlite\sqlite3.c	9900;"	d	file:
SQLITE_DESERIALIZE_READONLY	sqlite\sqlite3.c	9902;"	d	file:
SQLITE_DESERIALIZE_RESIZEABLE	sqlite\sqlite3.c	9901;"	d	file:
SQLITE_DETACH	sqlite\sqlite3.c	3877;"	d	file:
SQLITE_DETERMINISTIC	sqlite\sqlite3.c	5729;"	d	file:
SQLITE_DONE	sqlite\sqlite3.c	1477;"	d	file:
SQLITE_DROP_INDEX	sqlite\sqlite3.c	3862;"	d	file:
SQLITE_DROP_TABLE	sqlite\sqlite3.c	3863;"	d	file:
SQLITE_DROP_TEMP_INDEX	sqlite\sqlite3.c	3864;"	d	file:
SQLITE_DROP_TEMP_TABLE	sqlite\sqlite3.c	3865;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	sqlite\sqlite3.c	3866;"	d	file:
SQLITE_DROP_TEMP_VIEW	sqlite\sqlite3.c	3867;"	d	file:
SQLITE_DROP_TRIGGER	sqlite\sqlite3.c	3868;"	d	file:
SQLITE_DROP_VIEW	sqlite\sqlite3.c	3869;"	d	file:
SQLITE_DROP_VTABLE	sqlite\sqlite3.c	3882;"	d	file:
SQLITE_DYNAMIC	sqlite\sqlite3.c	13531;"	d	file:
SQLITE_DeferFKs	sqlite\sqlite3.c	15736;"	d	file:
SQLITE_DistinctOpt	sqlite\sqlite3.c	15768;"	d	file:
SQLITE_EBCDIC	sqlite\sqlite3.c	13201;"	d	file:
SQLITE_ECEL_DUP	sqlite\sqlite3.c	18047;"	d	file:
SQLITE_ECEL_FACTOR	sqlite\sqlite3.c	18048;"	d	file:
SQLITE_ECEL_OMITREF	sqlite\sqlite3.c	18050;"	d	file:
SQLITE_ECEL_REF	sqlite\sqlite3.c	18049;"	d	file:
SQLITE_EMPTY	sqlite\sqlite3.c	1463;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqlite\sqlite3.c	12626;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqlite\sqlite3.c	12761;"	d	file:
SQLITE_ENABLE_FTS3	sqlite\sqlite3.c	149958;"	d	file:
SQLITE_ENABLE_FTS3	sqlite\sqlite3.c	149968;"	d	file:
SQLITE_ENABLE_FTS3	sqlite\sqlite3.c	17697;"	d	file:
SQLITE_ENABLE_FTS3	sqlite\sqlite3.c	17707;"	d	file:
SQLITE_ENABLE_FTS4	sqlite\sqlite3.c	149959;"	d	file:
SQLITE_ENABLE_FTS4	sqlite\sqlite3.c	17698;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite\sqlite3.c	116242;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite\sqlite3.c	116244;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite\sqlite3.c	31114;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite\sqlite3.c	31116;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite\sqlite3.c	909;"	d	file:
SQLITE_ENABLE_MEMSYS3	sqlite\sqlite3.c	17803;"	d	file:
SQLITE_ENABLE_RTREE	sqlite\sqlite3.c	145044;"	d	file:
SQLITE_ENABLE_STAT3	sqlite\sqlite3.c	13459;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite\sqlite3.c	13460;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite\sqlite3.c	13462;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite\sqlite3.c	13464;"	d	file:
SQLITE_ERROR	sqlite\sqlite3.c	1448;"	d	file:
SQLITE_ERROR_MISSING_COLLSEQ	sqlite\sqlite3.c	1497;"	d	file:
SQLITE_ERROR_RETRY	sqlite\sqlite3.c	1498;"	d	file:
SQLITE_EXPERIMENTAL	sqlite\sqlite3.c	1108;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite\sqlite3.c	115422;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite\sqlite3.c	115429;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite\sqlite3.c	115423;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite\sqlite3.c	115430;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite\sqlite3.c	115424;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite\sqlite3.c	115431;"	d	file:
SQLITE_EXTERN	sqlite\sqlite3.c	1073;"	d	file:
SQLITE_EnableQPSG	sqlite\sqlite3.c	15740;"	d	file:
SQLITE_EnableTrigger	sqlite\sqlite3.c	15735;"	d	file:
SQLITE_FAIL	sqlite\sqlite3.c	9350;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	sqlite\sqlite3.c	18535;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	sqlite\sqlite3.c	18534;"	d	file:
SQLITE_FCNTL_BEGIN_ATOMIC_WRITE	sqlite\sqlite3.c	2128;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	sqlite\sqlite3.c	2113;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	sqlite\sqlite3.c	2104;"	d	file:
SQLITE_FCNTL_COMMIT_ATOMIC_WRITE	sqlite\sqlite3.c	2129;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite\sqlite3.c	2119;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	sqlite\sqlite3.c	15247;"	d	file:
SQLITE_FCNTL_FILE_POINTER	sqlite\sqlite3.c	2105;"	d	file:
SQLITE_FCNTL_GET_LOCKPROXYFILE	sqlite\sqlite3.c	2100;"	d	file:
SQLITE_FCNTL_HAS_MOVED	sqlite\sqlite3.c	2117;"	d	file:
SQLITE_FCNTL_JOURNAL_POINTER	sqlite\sqlite3.c	2125;"	d	file:
SQLITE_FCNTL_LAST_ERRNO	sqlite\sqlite3.c	2102;"	d	file:
SQLITE_FCNTL_LOCKSTATE	sqlite\sqlite3.c	2099;"	d	file:
SQLITE_FCNTL_LOCK_TIMEOUT	sqlite\sqlite3.c	2131;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	sqlite\sqlite3.c	2115;"	d	file:
SQLITE_FCNTL_OVERWRITE	sqlite\sqlite3.c	2109;"	d	file:
SQLITE_FCNTL_PDB	sqlite\sqlite3.c	2127;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	sqlite\sqlite3.c	2108;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite\sqlite3.c	2111;"	d	file:
SQLITE_FCNTL_PRAGMA	sqlite\sqlite3.c	2112;"	d	file:
SQLITE_FCNTL_RBU	sqlite\sqlite3.c	2123;"	d	file:
SQLITE_FCNTL_RBUCNT	sqlite\sqlite3.c	174665;"	d	file:
SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE	sqlite\sqlite3.c	2130;"	d	file:
SQLITE_FCNTL_SET_LOCKPROXYFILE	sqlite\sqlite3.c	2101;"	d	file:
SQLITE_FCNTL_SIZE_HINT	sqlite\sqlite3.c	2103;"	d	file:
SQLITE_FCNTL_SYNC	sqlite\sqlite3.c	2118;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	sqlite\sqlite3.c	2106;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	sqlite\sqlite3.c	2114;"	d	file:
SQLITE_FCNTL_TRACE	sqlite\sqlite3.c	2116;"	d	file:
SQLITE_FCNTL_VFSNAME	sqlite\sqlite3.c	2110;"	d	file:
SQLITE_FCNTL_VFS_POINTER	sqlite\sqlite3.c	2124;"	d	file:
SQLITE_FCNTL_WAL_BLOCK	sqlite\sqlite3.c	2121;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite\sqlite3.c	2107;"	d	file:
SQLITE_FCNTL_WIN32_GET_HANDLE	sqlite\sqlite3.c	2126;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite\sqlite3.c	2120;"	d	file:
SQLITE_FCNTL_ZIPVFS	sqlite\sqlite3.c	2122;"	d	file:
SQLITE_FILE_HEADER	sqlite\sqlite3.c	60847;"	d	file:
SQLITE_FLOAT	sqlite\sqlite3.c	5307;"	d	file:
SQLITE_FORMAT	sqlite\sqlite3.c	1471;"	d	file:
SQLITE_FREE	sqlite\sqlite3.c	21830;"	d	file:
SQLITE_FREE	sqlite\sqlite3.c	21842;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	sqlite\sqlite3.c	31182;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	sqlite\sqlite3.c	157141;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	sqlite\sqlite3.c	150272;"	d	file:
SQLITE_FULL	sqlite\sqlite3.c	1460;"	d	file:
SQLITE_FUNCTION	sqlite\sqlite3.c	3883;"	d	file:
SQLITE_FUNC_AFFINITY	sqlite\sqlite3.c	15876;"	d	file:
SQLITE_FUNC_CASE	sqlite\sqlite3.c	15864;"	d	file:
SQLITE_FUNC_COALESCE	sqlite\sqlite3.c	15870;"	d	file:
SQLITE_FUNC_CONSTANT	sqlite\sqlite3.c	15872;"	d	file:
SQLITE_FUNC_COUNT	sqlite\sqlite3.c	15869;"	d	file:
SQLITE_FUNC_ENCMASK	sqlite\sqlite3.c	15862;"	d	file:
SQLITE_FUNC_EPHEM	sqlite\sqlite3.c	15865;"	d	file:
SQLITE_FUNC_HASH_SZ	sqlite\sqlite3.c	15514;"	d	file:
SQLITE_FUNC_LENGTH	sqlite\sqlite3.c	15867;"	d	file:
SQLITE_FUNC_LIKE	sqlite\sqlite3.c	15863;"	d	file:
SQLITE_FUNC_MINMAX	sqlite\sqlite3.c	15873;"	d	file:
SQLITE_FUNC_NEEDCOLL	sqlite\sqlite3.c	15866;"	d	file:
SQLITE_FUNC_OFFSET	sqlite\sqlite3.c	15877;"	d	file:
SQLITE_FUNC_SLOCHNG	sqlite\sqlite3.c	15874;"	d	file:
SQLITE_FUNC_TYPEOF	sqlite\sqlite3.c	15868;"	d	file:
SQLITE_FUNC_UNLIKELY	sqlite\sqlite3.c	15871;"	d	file:
SQLITE_FactorOutConst	sqlite\sqlite3.c	15767;"	d	file:
SQLITE_ForeignKeys	sqlite\sqlite3.c	15731;"	d	file:
SQLITE_Fts3Tokenizer	sqlite\sqlite3.c	15739;"	d	file:
SQLITE_FullColNames	sqlite\sqlite3.c	15716;"	d	file:
SQLITE_FullFSync	sqlite\sqlite3.c	15717;"	d	file:
SQLITE_GET_LOCKPROXYFILE	sqlite\sqlite3.c	2134;"	d	file:
SQLITE_GroupByOrder	sqlite\sqlite3.c	15766;"	d	file:
SQLITE_HASH_H	sqlite\sqlite3.c	12798;"	d	file:
SQLITE_HAVE_ISNAN	sqlite\sqlite3.c	13087;"	d	file:
SQLITE_HAVE_OS_TRACE	sqlite\sqlite3.c	12738;"	d	file:
SQLITE_HAVE_OS_TRACE	sqlite\sqlite3.c	12741;"	d	file:
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	sqlite\sqlite3.c	907;"	d	file:
SQLITE_HWTIME_H	sqlite\sqlite3.c	24919;"	d	file:
SQLITE_HWTIME_H	sqlite\sqlite3.c	31392;"	d	file:
SQLITE_HWTIME_H	sqlite\sqlite3.c	39117;"	d	file:
SQLITE_HWTIME_H	sqlite\sqlite3.c	81688;"	d	file:
SQLITE_ICU_READ_UTF8	sqlite\sqlite3.c	173140;"	d	file:
SQLITE_ICU_SKIP_UTF8	sqlite\sqlite3.c	173149;"	d	file:
SQLITE_IDXTYPE_APPDEF	sqlite\sqlite3.c	16437;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	sqlite\sqlite3.c	16439;"	d	file:
SQLITE_IDXTYPE_UNIQUE	sqlite\sqlite3.c	16438;"	d	file:
SQLITE_IGNORE	sqlite\sqlite3.c	3831;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	sqlite\sqlite3.c	7262;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	sqlite\sqlite3.c	7266;"	d	file:
SQLITE_INDEX_CONSTRAINT_GLOB	sqlite\sqlite3.c	7269;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	sqlite\sqlite3.c	7263;"	d	file:
SQLITE_INDEX_CONSTRAINT_IS	sqlite\sqlite3.c	7275;"	d	file:
SQLITE_INDEX_CONSTRAINT_ISNOT	sqlite\sqlite3.c	7272;"	d	file:
SQLITE_INDEX_CONSTRAINT_ISNOTNULL	sqlite\sqlite3.c	7273;"	d	file:
SQLITE_INDEX_CONSTRAINT_ISNULL	sqlite\sqlite3.c	7274;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	sqlite\sqlite3.c	7264;"	d	file:
SQLITE_INDEX_CONSTRAINT_LIKE	sqlite\sqlite3.c	7268;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	sqlite\sqlite3.c	7265;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite\sqlite3.c	7267;"	d	file:
SQLITE_INDEX_CONSTRAINT_NE	sqlite\sqlite3.c	7271;"	d	file:
SQLITE_INDEX_CONSTRAINT_REGEXP	sqlite\sqlite3.c	7270;"	d	file:
SQLITE_INDEX_SCAN_UNIQUE	sqlite\sqlite3.c	7252;"	d	file:
SQLITE_INSERT	sqlite\sqlite3.c	3870;"	d	file:
SQLITE_INTEGER	sqlite\sqlite3.c	5306;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	sqlite\sqlite3.c	118316;"	d	file:
SQLITE_INTERNAL	sqlite\sqlite3.c	1449;"	d	file:
SQLITE_INTERRUPT	sqlite\sqlite3.c	1456;"	d	file:
SQLITE_INT_TO_PTR	sqlite\sqlite3.c	12468;"	d	file:
SQLITE_INT_TO_PTR	sqlite\sqlite3.c	12471;"	d	file:
SQLITE_INT_TO_PTR	sqlite\sqlite3.c	12474;"	d	file:
SQLITE_INT_TO_PTR	sqlite\sqlite3.c	12477;"	d	file:
SQLITE_IOCAP_ATOMIC	sqlite\sqlite3.c	1624;"	d	file:
SQLITE_IOCAP_ATOMIC16K	sqlite\sqlite3.c	1630;"	d	file:
SQLITE_IOCAP_ATOMIC1K	sqlite\sqlite3.c	1626;"	d	file:
SQLITE_IOCAP_ATOMIC2K	sqlite\sqlite3.c	1627;"	d	file:
SQLITE_IOCAP_ATOMIC32K	sqlite\sqlite3.c	1631;"	d	file:
SQLITE_IOCAP_ATOMIC4K	sqlite\sqlite3.c	1628;"	d	file:
SQLITE_IOCAP_ATOMIC512	sqlite\sqlite3.c	1625;"	d	file:
SQLITE_IOCAP_ATOMIC64K	sqlite\sqlite3.c	1632;"	d	file:
SQLITE_IOCAP_ATOMIC8K	sqlite\sqlite3.c	1629;"	d	file:
SQLITE_IOCAP_BATCH_ATOMIC	sqlite\sqlite3.c	1638;"	d	file:
SQLITE_IOCAP_IMMUTABLE	sqlite\sqlite3.c	1637;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite\sqlite3.c	1636;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	sqlite\sqlite3.c	1633;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	sqlite\sqlite3.c	1634;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite\sqlite3.c	1635;"	d	file:
SQLITE_IOERR	sqlite\sqlite3.c	1457;"	d	file:
SQLITE_IOERR_ACCESS	sqlite\sqlite3.c	1511;"	d	file:
SQLITE_IOERR_AUTH	sqlite\sqlite3.c	1526;"	d	file:
SQLITE_IOERR_BEGIN_ATOMIC	sqlite\sqlite3.c	1527;"	d	file:
SQLITE_IOERR_BLOCKED	sqlite\sqlite3.c	1509;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite\sqlite3.c	1512;"	d	file:
SQLITE_IOERR_CLOSE	sqlite\sqlite3.c	1514;"	d	file:
SQLITE_IOERR_COMMIT_ATOMIC	sqlite\sqlite3.c	1528;"	d	file:
SQLITE_IOERR_CONVPATH	sqlite\sqlite3.c	1524;"	d	file:
SQLITE_IOERR_DELETE	sqlite\sqlite3.c	1508;"	d	file:
SQLITE_IOERR_DELETE_NOENT	sqlite\sqlite3.c	1521;"	d	file:
SQLITE_IOERR_DIR_CLOSE	sqlite\sqlite3.c	1515;"	d	file:
SQLITE_IOERR_DIR_FSYNC	sqlite\sqlite3.c	1503;"	d	file:
SQLITE_IOERR_FSTAT	sqlite\sqlite3.c	1505;"	d	file:
SQLITE_IOERR_FSYNC	sqlite\sqlite3.c	1502;"	d	file:
SQLITE_IOERR_GETTEMPPATH	sqlite\sqlite3.c	1523;"	d	file:
SQLITE_IOERR_LOCK	sqlite\sqlite3.c	1513;"	d	file:
SQLITE_IOERR_MMAP	sqlite\sqlite3.c	1522;"	d	file:
SQLITE_IOERR_NOMEM	sqlite\sqlite3.c	1510;"	d	file:
SQLITE_IOERR_NOMEM_BKPT	sqlite\sqlite3.c	17685;"	d	file:
SQLITE_IOERR_NOMEM_BKPT	sqlite\sqlite3.c	17689;"	d	file:
SQLITE_IOERR_RDLOCK	sqlite\sqlite3.c	1507;"	d	file:
SQLITE_IOERR_READ	sqlite\sqlite3.c	1499;"	d	file:
SQLITE_IOERR_ROLLBACK_ATOMIC	sqlite\sqlite3.c	1529;"	d	file:
SQLITE_IOERR_SEEK	sqlite\sqlite3.c	1520;"	d	file:
SQLITE_IOERR_SHMLOCK	sqlite\sqlite3.c	1518;"	d	file:
SQLITE_IOERR_SHMMAP	sqlite\sqlite3.c	1519;"	d	file:
SQLITE_IOERR_SHMOPEN	sqlite\sqlite3.c	1516;"	d	file:
SQLITE_IOERR_SHMSIZE	sqlite\sqlite3.c	1517;"	d	file:
SQLITE_IOERR_SHORT_READ	sqlite\sqlite3.c	1500;"	d	file:
SQLITE_IOERR_TRUNCATE	sqlite\sqlite3.c	1504;"	d	file:
SQLITE_IOERR_UNLOCK	sqlite\sqlite3.c	1506;"	d	file:
SQLITE_IOERR_VNODE	sqlite\sqlite3.c	1525;"	d	file:
SQLITE_IOERR_WRITE	sqlite\sqlite3.c	1501;"	d	file:
SQLITE_IgnoreChecks	sqlite\sqlite3.c	15726;"	d	file:
SQLITE_JUMPIFNULL	sqlite\sqlite3.c	16066;"	d	file:
SQLITE_KEEPNULL	sqlite\sqlite3.c	16065;"	d	file:
SQLITE_LAST_ERRNO	sqlite\sqlite3.c	2136;"	d	file:
SQLITE_LIMIT_ATTACHED	sqlite\sqlite3.c	4516;"	d	file:
SQLITE_LIMIT_COLUMN	sqlite\sqlite3.c	4511;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	sqlite\sqlite3.c	4513;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	sqlite\sqlite3.c	4512;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	sqlite\sqlite3.c	4515;"	d	file:
SQLITE_LIMIT_LENGTH	sqlite\sqlite3.c	4509;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite\sqlite3.c	4517;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	sqlite\sqlite3.c	4510;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite\sqlite3.c	4519;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite\sqlite3.c	4518;"	d	file:
SQLITE_LIMIT_VDBE_OP	sqlite\sqlite3.c	4514;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	sqlite\sqlite3.c	4520;"	d	file:
SQLITE_LITTLEENDIAN	sqlite\sqlite3.c	13362;"	d	file:
SQLITE_LITTLEENDIAN	sqlite\sqlite3.c	13366;"	d	file:
SQLITE_LITTLEENDIAN	sqlite\sqlite3.c	13375;"	d	file:
SQLITE_LOCKED	sqlite\sqlite3.c	1453;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	sqlite\sqlite3.c	1530;"	d	file:
SQLITE_LOCKFILEEX_FLAGS	sqlite\sqlite3.c	42331;"	d	file:
SQLITE_LOCKFILE_FLAGS	sqlite\sqlite3.c	42322;"	d	file:
SQLITE_LOCK_EXCLUSIVE	sqlite\sqlite3.c	1651;"	d	file:
SQLITE_LOCK_NONE	sqlite\sqlite3.c	1647;"	d	file:
SQLITE_LOCK_PENDING	sqlite\sqlite3.c	1650;"	d	file:
SQLITE_LOCK_RESERVED	sqlite\sqlite3.c	1649;"	d	file:
SQLITE_LOCK_SHARED	sqlite\sqlite3.c	1648;"	d	file:
SQLITE_LegacyFileFmt	sqlite\sqlite3.c	15715;"	d	file:
SQLITE_LoadExtFunc	sqlite\sqlite3.c	15734;"	d	file:
SQLITE_LoadExtension	sqlite\sqlite3.c	15733;"	d	file:
SQLITE_MAGIC_BUSY	sqlite\sqlite3.c	15801;"	d	file:
SQLITE_MAGIC_CLOSED	sqlite\sqlite3.c	15799;"	d	file:
SQLITE_MAGIC_ERROR	sqlite\sqlite3.c	15802;"	d	file:
SQLITE_MAGIC_OPEN	sqlite\sqlite3.c	15798;"	d	file:
SQLITE_MAGIC_SICK	sqlite\sqlite3.c	15800;"	d	file:
SQLITE_MAGIC_ZOMBIE	sqlite\sqlite3.c	15803;"	d	file:
SQLITE_MALLOC	sqlite\sqlite3.c	21829;"	d	file:
SQLITE_MALLOC	sqlite\sqlite3.c	21841;"	d	file:
SQLITE_MALLOCSIZE	sqlite\sqlite3.c	21832;"	d	file:
SQLITE_MALLOCSIZE	sqlite\sqlite3.c	21874;"	d	file:
SQLITE_MALLOCSIZE	sqlite\sqlite3.c	21878;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqlite\sqlite3.c	12591;"	d	file:
SQLITE_MATCH	sqlite\sqlite3.c	109688;"	d	file:
SQLITE_MAX_ATTACHED	sqlite\sqlite3.c	12344;"	d	file:
SQLITE_MAX_COLUMN	sqlite\sqlite3.c	12261;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	sqlite\sqlite3.c	12298;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12391;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12394;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite\sqlite3.c	12395;"	d	file:
SQLITE_MAX_EXPR_DEPTH	sqlite\sqlite3.c	12286;"	d	file:
SQLITE_MAX_FILE_FORMAT	sqlite\sqlite3.c	13110;"	d	file:
SQLITE_MAX_FUNCTION_ARG	sqlite\sqlite3.c	12313;"	d	file:
SQLITE_MAX_LENGTH	sqlite\sqlite3.c	12240;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite\sqlite3.c	12415;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite\sqlite3.c	173114;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite\sqlite3.c	13417;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite\sqlite3.c	13418;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite\sqlite3.c	13434;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite\sqlite3.c	13436;"	d	file:
SQLITE_MAX_PAGE_COUNT	sqlite\sqlite3.c	12407;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite\sqlite3.c	12367;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite\sqlite3.c	12369;"	d	file:
SQLITE_MAX_PMASZ	sqlite\sqlite3.c	89258;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	sqlite\sqlite3.c	19038;"	d	file:
SQLITE_MAX_SQL_LENGTH	sqlite\sqlite3.c	12272;"	d	file:
SQLITE_MAX_SYMLINKS	sqlite\sqlite3.c	31215;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqlite\sqlite3.c	12426;"	d	file:
SQLITE_MAX_U32	sqlite\sqlite3.c	13265;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	sqlite\sqlite3.c	12352;"	d	file:
SQLITE_MAX_VDBE_OP	sqlite\sqlite3.c	12306;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite\sqlite3.c	13137;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite\sqlite3.c	13138;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite\sqlite3.c	13141;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite\sqlite3.c	13147;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite\sqlite3.c	13148;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	sqlite\sqlite3.c	31879;"	d	file:
SQLITE_MISMATCH	sqlite\sqlite3.c	1467;"	d	file:
SQLITE_MISUSE	sqlite\sqlite3.c	1468;"	d	file:
SQLITE_MISUSE_BKPT	sqlite\sqlite3.c	17678;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	sqlite\sqlite3.c	13086;"	d	file:
SQLITE_MSVC_H	sqlite\sqlite3.c	856;"	d	file:
SQLITE_MUTEX_FAST	sqlite\sqlite3.c	7920;"	d	file:
SQLITE_MUTEX_NOOP	sqlite\sqlite3.c	15339;"	d	file:
SQLITE_MUTEX_NREF	sqlite\sqlite3.c	24474;"	d	file:
SQLITE_MUTEX_NREF	sqlite\sqlite3.c	24476;"	d	file:
SQLITE_MUTEX_OMIT	sqlite\sqlite3.c	15331;"	d	file:
SQLITE_MUTEX_PTHREADS	sqlite\sqlite3.c	15335;"	d	file:
SQLITE_MUTEX_RECURSIVE	sqlite\sqlite3.c	7921;"	d	file:
SQLITE_MUTEX_STATIC_APP1	sqlite\sqlite3.c	7930;"	d	file:
SQLITE_MUTEX_STATIC_APP2	sqlite\sqlite3.c	7931;"	d	file:
SQLITE_MUTEX_STATIC_APP3	sqlite\sqlite3.c	7932;"	d	file:
SQLITE_MUTEX_STATIC_LRU	sqlite\sqlite3.c	7927;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	sqlite\sqlite3.c	7928;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	sqlite\sqlite3.c	7922;"	d	file:
SQLITE_MUTEX_STATIC_MEM	sqlite\sqlite3.c	7923;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	sqlite\sqlite3.c	7924;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	sqlite\sqlite3.c	7925;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	sqlite\sqlite3.c	7929;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	sqlite\sqlite3.c	7926;"	d	file:
SQLITE_MUTEX_STATIC_VFS1	sqlite\sqlite3.c	7933;"	d	file:
SQLITE_MUTEX_STATIC_VFS2	sqlite\sqlite3.c	7934;"	d	file:
SQLITE_MUTEX_STATIC_VFS3	sqlite\sqlite3.c	7935;"	d	file:
SQLITE_MUTEX_W32	sqlite\sqlite3.c	15337;"	d	file:
SQLITE_MUTEX_WARNONCONTENTION	sqlite\sqlite3.c	23919;"	d	file:
SQLITE_MX_JUMP_OPCODE	sqlite\sqlite3.c	14407;"	d	file:
SQLITE_NEED_ERR_NAME	sqlite\sqlite3.c	12752;"	d	file:
SQLITE_NEED_ERR_NAME	sqlite\sqlite3.c	12754;"	d	file:
SQLITE_NOINLINE	sqlite\sqlite3.c	12486;"	d	file:
SQLITE_NOINLINE	sqlite\sqlite3.c	12488;"	d	file:
SQLITE_NOINLINE	sqlite\sqlite3.c	12490;"	d	file:
SQLITE_NOLFS	sqlite\sqlite3.c	1469;"	d	file:
SQLITE_NOMATCH	sqlite\sqlite3.c	109689;"	d	file:
SQLITE_NOMEM	sqlite\sqlite3.c	1454;"	d	file:
SQLITE_NOMEM_BKPT	sqlite\sqlite3.c	17684;"	d	file:
SQLITE_NOMEM_BKPT	sqlite\sqlite3.c	17688;"	d	file:
SQLITE_NOTADB	sqlite\sqlite3.c	1473;"	d	file:
SQLITE_NOTFOUND	sqlite\sqlite3.c	1459;"	d	file:
SQLITE_NOTICE	sqlite\sqlite3.c	1474;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite\sqlite3.c	1556;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	sqlite\sqlite3.c	1555;"	d	file:
SQLITE_NOTNULL	sqlite\sqlite3.c	16069;"	d	file:
SQLITE_NOWILDCARDMATCH	sqlite\sqlite3.c	109690;"	d	file:
SQLITE_NULL	sqlite\sqlite3.c	5309;"	d	file:
SQLITE_NULLEQ	sqlite\sqlite3.c	16068;"	d	file:
SQLITE_N_BTREE_META	sqlite\sqlite3.c	13664;"	d	file:
SQLITE_N_COLCACHE	sqlite\sqlite3.c	17139;"	d	file:
SQLITE_N_KEYWORD	sqlite\sqlite3.c	144201;"	d	file:
SQLITE_N_LIMIT	sqlite\sqlite3.c	15470;"	d	file:
SQLITE_NoCkptOnClose	sqlite\sqlite3.c	15728;"	d	file:
SQLITE_NullCallback	sqlite\sqlite3.c	15724;"	d	file:
SQLITE_OK	sqlite\sqlite3.c	1446;"	d	file:
SQLITE_OK_LOAD_PERMANENTLY	sqlite\sqlite3.c	1559;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	sqlite\sqlite3.c	13084;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	sqlite\sqlite3.c	908;"	d	file:
SQLITE_OMIT_TRACE	sqlite\sqlite3.c	13085;"	d	file:
SQLITE_OPEN_AUTOPROXY	sqlite\sqlite3.c	1573;"	d	file:
SQLITE_OPEN_CREATE	sqlite\sqlite3.c	1570;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	sqlite\sqlite3.c	1571;"	d	file:
SQLITE_OPEN_EXCLUSIVE	sqlite\sqlite3.c	1572;"	d	file:
SQLITE_OPEN_FULLMUTEX	sqlite\sqlite3.c	1584;"	d	file:
SQLITE_OPEN_MAIN_DB	sqlite\sqlite3.c	1576;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	sqlite\sqlite3.c	1579;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	sqlite\sqlite3.c	1582;"	d	file:
SQLITE_OPEN_MEMORY	sqlite\sqlite3.c	1575;"	d	file:
SQLITE_OPEN_NOMUTEX	sqlite\sqlite3.c	1583;"	d	file:
SQLITE_OPEN_PRIVATECACHE	sqlite\sqlite3.c	1586;"	d	file:
SQLITE_OPEN_READONLY	sqlite\sqlite3.c	1568;"	d	file:
SQLITE_OPEN_READWRITE	sqlite\sqlite3.c	1569;"	d	file:
SQLITE_OPEN_SHAREDCACHE	sqlite\sqlite3.c	1585;"	d	file:
SQLITE_OPEN_SUBJOURNAL	sqlite\sqlite3.c	1581;"	d	file:
SQLITE_OPEN_TEMP_DB	sqlite\sqlite3.c	1577;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	sqlite\sqlite3.c	1580;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	sqlite\sqlite3.c	1578;"	d	file:
SQLITE_OPEN_URI	sqlite\sqlite3.c	1574;"	d	file:
SQLITE_OPEN_WAL	sqlite\sqlite3.c	1587;"	d	file:
SQLITE_OS_OTHER	sqlite\sqlite3.c	15074;"	d	file:
SQLITE_OS_OTHER	sqlite\sqlite3.c	15078;"	d	file:
SQLITE_OS_OTHER	sqlite\sqlite3.c	906;"	d	file:
SQLITE_OS_SETUP_H	sqlite\sqlite3.c	15057;"	d	file:
SQLITE_OS_UNIX	sqlite\sqlite3.c	15069;"	d	file:
SQLITE_OS_UNIX	sqlite\sqlite3.c	15070;"	d	file:
SQLITE_OS_UNIX	sqlite\sqlite3.c	15083;"	d	file:
SQLITE_OS_UNIX	sqlite\sqlite3.c	15086;"	d	file:
SQLITE_OS_UNIX	sqlite\sqlite3.c	15089;"	d	file:
SQLITE_OS_WIN	sqlite\sqlite3.c	15071;"	d	file:
SQLITE_OS_WIN	sqlite\sqlite3.c	15072;"	d	file:
SQLITE_OS_WIN	sqlite\sqlite3.c	15082;"	d	file:
SQLITE_OS_WIN	sqlite\sqlite3.c	15085;"	d	file:
SQLITE_OS_WIN	sqlite\sqlite3.c	15093;"	d	file:
SQLITE_OS_WINCE	sqlite\sqlite3.c	25116;"	d	file:
SQLITE_OS_WINCE	sqlite\sqlite3.c	25118;"	d	file:
SQLITE_OS_WINNT	sqlite\sqlite3.c	25108;"	d	file:
SQLITE_OS_WINRT	sqlite\sqlite3.c	25126;"	d	file:
SQLITE_OS_WIN_H	sqlite\sqlite3.c	25078;"	d	file:
SQLITE_OS_WIN_THREADS	sqlite\sqlite3.c	25145;"	d	file:
SQLITE_OS_WIN_THREADS	sqlite\sqlite3.c	25147;"	d	file:
SQLITE_OmitNoopJoin	sqlite\sqlite3.c	15772;"	d	file:
SQLITE_OrderByIdxJoin	sqlite\sqlite3.c	15770;"	d	file:
SQLITE_PAGER_H	sqlite\sqlite3.c	14589;"	d	file:
SQLITE_PERM	sqlite\sqlite3.c	1450;"	d	file:
SQLITE_POWERSAFE_OVERWRITE	sqlite\sqlite3.c	12541;"	d	file:
SQLITE_PRAGMA	sqlite\sqlite3.c	3871;"	d	file:
SQLITE_PREPARE_MASK	sqlite\sqlite3.c	14416;"	d	file:
SQLITE_PREPARE_PERSISTENT	sqlite\sqlite3.c	4544;"	d	file:
SQLITE_PREPARE_SAVESQL	sqlite\sqlite3.c	14415;"	d	file:
SQLITE_PRINTF_INTERNAL	sqlite\sqlite3.c	17488;"	d	file:
SQLITE_PRINTF_MALLOCED	sqlite\sqlite3.c	17490;"	d	file:
SQLITE_PRINTF_SQLFUNC	sqlite\sqlite3.c	17489;"	d	file:
SQLITE_PRINT_BUF_SIZE	sqlite\sqlite3.c	26412;"	d	file:
SQLITE_PRIVATE	sqlite\sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	sqlite\sqlite3.c	1462;"	d	file:
SQLITE_PTRSIZE	sqlite\sqlite3.c	13309;"	d	file:
SQLITE_PTRSIZE	sqlite\sqlite3.c	13312;"	d	file:
SQLITE_PTRSIZE	sqlite\sqlite3.c	13314;"	d	file:
SQLITE_PTR_TO_INT	sqlite\sqlite3.c	12469;"	d	file:
SQLITE_PTR_TO_INT	sqlite\sqlite3.c	12472;"	d	file:
SQLITE_PTR_TO_INT	sqlite\sqlite3.c	12475;"	d	file:
SQLITE_PTR_TO_INT	sqlite\sqlite3.c	12478;"	d	file:
SQLITE_PushDown	sqlite\sqlite3.c	15777;"	d	file:
SQLITE_QueryFlattener	sqlite\sqlite3.c	15764;"	d	file:
SQLITE_QueryOnly	sqlite\sqlite3.c	15737;"	d	file:
SQLITE_RANGE	sqlite\sqlite3.c	1472;"	d	file:
SQLITE_RBU_STATE_CHECKPOINT	sqlite\sqlite3.c	174488;"	d	file:
SQLITE_RBU_STATE_DONE	sqlite\sqlite3.c	174489;"	d	file:
SQLITE_RBU_STATE_ERROR	sqlite\sqlite3.c	174490;"	d	file:
SQLITE_RBU_STATE_MOVE	sqlite\sqlite3.c	174487;"	d	file:
SQLITE_RBU_STATE_OAL	sqlite\sqlite3.c	174486;"	d	file:
SQLITE_RBU_UPDATE_CACHESIZE	sqlite\sqlite3.c	174562;"	d	file:
SQLITE_READ	sqlite\sqlite3.c	3872;"	d	file:
SQLITE_READONLY	sqlite\sqlite3.c	1455;"	d	file:
SQLITE_READONLY_CANTINIT	sqlite\sqlite3.c	1542;"	d	file:
SQLITE_READONLY_CANTLOCK	sqlite\sqlite3.c	1539;"	d	file:
SQLITE_READONLY_DBMOVED	sqlite\sqlite3.c	1541;"	d	file:
SQLITE_READONLY_DIRECTORY	sqlite\sqlite3.c	1543;"	d	file:
SQLITE_READONLY_RECOVERY	sqlite\sqlite3.c	1538;"	d	file:
SQLITE_READONLY_ROLLBACK	sqlite\sqlite3.c	1540;"	d	file:
SQLITE_REALLOC	sqlite\sqlite3.c	21831;"	d	file:
SQLITE_REALLOC	sqlite\sqlite3.c	21843;"	d	file:
SQLITE_RECURSIVE	sqlite\sqlite3.c	3886;"	d	file:
SQLITE_REINDEX	sqlite\sqlite3.c	3879;"	d	file:
SQLITE_REPLACE	sqlite\sqlite3.c	9352;"	d	file:
SQLITE_ROLLBACK	sqlite\sqlite3.c	9348;"	d	file:
SQLITE_ROW	sqlite\sqlite3.c	1476;"	d	file:
SQLITE_ReadUncommit	sqlite\sqlite3.c	15727;"	d	file:
SQLITE_RecTriggers	sqlite\sqlite3.c	15730;"	d	file:
SQLITE_ReverseOrder	sqlite\sqlite3.c	15729;"	d	file:
SQLITE_SAVEPOINT	sqlite\sqlite3.c	3884;"	d	file:
SQLITE_SCANSTAT_EST	sqlite\sqlite3.c	9403;"	d	file:
SQLITE_SCANSTAT_EXPLAIN	sqlite\sqlite3.c	9405;"	d	file:
SQLITE_SCANSTAT_NAME	sqlite\sqlite3.c	9404;"	d	file:
SQLITE_SCANSTAT_NLOOP	sqlite\sqlite3.c	9401;"	d	file:
SQLITE_SCANSTAT_NVISIT	sqlite\sqlite3.c	9402;"	d	file:
SQLITE_SCANSTAT_SELECTID	sqlite\sqlite3.c	9406;"	d	file:
SQLITE_SCHEMA	sqlite\sqlite3.c	1464;"	d	file:
SQLITE_SELECT	sqlite\sqlite3.c	3873;"	d	file:
SQLITE_SERIALIZE_NOCOPY	sqlite\sqlite3.c	9839;"	d	file:
SQLITE_SET_LOCKPROXYFILE	sqlite\sqlite3.c	2135;"	d	file:
SQLITE_SHM_EXCLUSIVE	sqlite\sqlite3.c	2414;"	d	file:
SQLITE_SHM_LOCK	sqlite\sqlite3.c	2412;"	d	file:
SQLITE_SHM_NLOCK	sqlite\sqlite3.c	2424;"	d	file:
SQLITE_SHM_SHARED	sqlite\sqlite3.c	2413;"	d	file:
SQLITE_SHM_UNLOCK	sqlite\sqlite3.c	2411;"	d	file:
SQLITE_SKIP_UTF8	sqlite\sqlite3.c	17660;"	d	file:
SQLITE_SORTER_PMASZ	sqlite\sqlite3.c	18852;"	d	file:
SQLITE_SOURCE_ID	sqlite\sqlite3.c	1152;"	d	file:
SQLITE_SOURCE_ID	sqlite\sqlite3.c	209936;"	d	file:
SQLITE_SOURCE_ID	sqlite\sqlite3.c	209937;"	d	file:
SQLITE_SO_ASC	sqlite\sqlite3.c	16024;"	d	file:
SQLITE_SO_DESC	sqlite\sqlite3.c	16025;"	d	file:
SQLITE_SO_UNDEFINED	sqlite\sqlite3.c	16026;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite\sqlite3.c	100493;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite\sqlite3.c	100494;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite\sqlite3.c	100600;"	d	file:
SQLITE_STATIC	sqlite\sqlite3.c	6042;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	sqlite\sqlite3.c	8151;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	sqlite\sqlite3.c	8147;"	d	file:
SQLITE_STATUS_MEMORY_USED	sqlite\sqlite3.c	8142;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite\sqlite3.c	8144;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	sqlite\sqlite3.c	8149;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	sqlite\sqlite3.c	8143;"	d	file:
SQLITE_STATUS_PARSER_STACK	sqlite\sqlite3.c	8148;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite\sqlite3.c	8146;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	sqlite\sqlite3.c	8150;"	d	file:
SQLITE_STATUS_SCRATCH_USED	sqlite\sqlite3.c	8145;"	d	file:
SQLITE_STDCALL	sqlite\sqlite3.c	1085;"	d	file:
SQLITE_STMTJRNL_SPILL	sqlite\sqlite3.c	18864;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	sqlite\sqlite3.c	8388;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite\sqlite3.c	8386;"	d	file:
SQLITE_STMTSTATUS_MEMUSED	sqlite\sqlite3.c	8392;"	d	file:
SQLITE_STMTSTATUS_REPREPARE	sqlite\sqlite3.c	8390;"	d	file:
SQLITE_STMTSTATUS_RUN	sqlite\sqlite3.c	8391;"	d	file:
SQLITE_STMTSTATUS_SORT	sqlite\sqlite3.c	8387;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	sqlite\sqlite3.c	8389;"	d	file:
SQLITE_STOREP2	sqlite\sqlite3.c	16067;"	d	file:
SQLITE_SYNC_DATAONLY	sqlite\sqlite3.c	1681;"	d	file:
SQLITE_SYNC_FULL	sqlite\sqlite3.c	1680;"	d	file:
SQLITE_SYNC_NORMAL	sqlite\sqlite3.c	1679;"	d	file:
SQLITE_SYSAPI	sqlite\sqlite3.c	1091;"	d	file:
SQLITE_SYSTEM_MALLOC	sqlite\sqlite3.c	12583;"	d	file:
SQLITE_ShortColNames	sqlite\sqlite3.c	15720;"	d	file:
SQLITE_SimplifyJoin	sqlite\sqlite3.c	15778;"	d	file:
SQLITE_SqlTrace	sqlite\sqlite3.c	15745;"	d	file:
SQLITE_Stat34	sqlite\sqlite3.c	15775;"	d	file:
SQLITE_TCLAPI	sqlite\sqlite3.c	830;"	d	file:
SQLITE_TEMP_FILE_PREFIX	sqlite\sqlite3.c	15138;"	d	file:
SQLITE_TEMP_STORE	sqlite\sqlite3.c	13128;"	d	file:
SQLITE_TESTCTRL_ALWAYS	sqlite\sqlite3.c	8023;"	d	file:
SQLITE_TESTCTRL_ASSERT	sqlite\sqlite3.c	8022;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite\sqlite3.c	8020;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	sqlite\sqlite3.c	8018;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	sqlite\sqlite3.c	8033;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite\sqlite3.c	8029;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite\sqlite3.c	8019;"	d	file:
SQLITE_TESTCTRL_FIRST	sqlite\sqlite3.c	8014;"	d	file:
SQLITE_TESTCTRL_IMPOSTER	sqlite\sqlite3.c	8036;"	d	file:
SQLITE_TESTCTRL_ISINIT	sqlite\sqlite3.c	8034;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	sqlite\sqlite3.c	8026;"	d	file:
SQLITE_TESTCTRL_LAST	sqlite\sqlite3.c	8038;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite\sqlite3.c	8028;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite\sqlite3.c	8031;"	d	file:
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	sqlite\sqlite3.c	8030;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite\sqlite3.c	8025;"	d	file:
SQLITE_TESTCTRL_PARSER_COVERAGE	sqlite\sqlite3.c	8037;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	sqlite\sqlite3.c	8021;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	sqlite\sqlite3.c	8017;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite\sqlite3.c	8016;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	sqlite\sqlite3.c	8015;"	d	file:
SQLITE_TESTCTRL_RESERVE	sqlite\sqlite3.c	8024;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite\sqlite3.c	8027;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	sqlite\sqlite3.c	8035;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite\sqlite3.c	8032;"	d	file:
SQLITE_TEXT	sqlite\sqlite3.c	5311;"	d	file:
SQLITE_TEXT	sqlite\sqlite3.c	5313;"	d	file:
SQLITE_THREADSAFE	sqlite\sqlite3.c	12530;"	d	file:
SQLITE_THREADSAFE	sqlite\sqlite3.c	12532;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite\sqlite3.c	28183;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite\sqlite3.c	28255;"	d	file:
SQLITE_TOOBIG	sqlite\sqlite3.c	1465;"	d	file:
SQLITE_TRACE_CLOSE	sqlite\sqlite3.c	3980;"	d	file:
SQLITE_TRACE_LEGACY	sqlite\sqlite3.c	15561;"	d	file:
SQLITE_TRACE_LEGACY	sqlite\sqlite3.c	15563;"	d	file:
SQLITE_TRACE_PROFILE	sqlite\sqlite3.c	3978;"	d	file:
SQLITE_TRACE_ROW	sqlite\sqlite3.c	3979;"	d	file:
SQLITE_TRACE_STMT	sqlite\sqlite3.c	3977;"	d	file:
SQLITE_TRANSACTION	sqlite\sqlite3.c	3874;"	d	file:
SQLITE_TRANSIENT	sqlite\sqlite3.c	6043;"	d	file:
SQLITE_Transitive	sqlite\sqlite3.c	15771;"	d	file:
SQLITE_TriggerEQP	sqlite\sqlite3.c	15741;"	d	file:
SQLITE_UNIX_THREADS	sqlite\sqlite3.c	31190;"	d	file:
SQLITE_UPDATE	sqlite\sqlite3.c	3875;"	d	file:
SQLITE_USE_MALLOC_H	sqlite\sqlite3.c	21850;"	d	file:
SQLITE_USE_MALLOC_H	sqlite\sqlite3.c	21859;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	sqlite\sqlite3.c	21851;"	d	file:
SQLITE_USE_MSIZE	sqlite\sqlite3.c	21860;"	d	file:
SQLITE_USE_URI	sqlite\sqlite3.c	18834;"	d	file:
SQLITE_USE_URI	sqlite\sqlite3.c	18836;"	d	file:
SQLITE_UTF16	sqlite\sqlite3.c	5717;"	d	file:
SQLITE_UTF16BE	sqlite\sqlite3.c	5716;"	d	file:
SQLITE_UTF16LE	sqlite\sqlite3.c	5715;"	d	file:
SQLITE_UTF16NATIVE	sqlite\sqlite3.c	13363;"	d	file:
SQLITE_UTF16NATIVE	sqlite\sqlite3.c	13367;"	d	file:
SQLITE_UTF16NATIVE	sqlite\sqlite3.c	13376;"	d	file:
SQLITE_UTF16_ALIGNED	sqlite\sqlite3.c	5719;"	d	file:
SQLITE_UTF8	sqlite\sqlite3.c	5714;"	d	file:
SQLITE_VDBEINT_H	sqlite\sqlite3.c	19031;"	d	file:
SQLITE_VDBE_H	sqlite\sqlite3.c	14041;"	d	file:
SQLITE_VERSION	sqlite\sqlite3.c	1114;"	d	file:
SQLITE_VERSION	sqlite\sqlite3.c	1150;"	d	file:
SQLITE_VERSION_NUMBER	sqlite\sqlite3.c	1117;"	d	file:
SQLITE_VERSION_NUMBER	sqlite\sqlite3.c	1151;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite\sqlite3.c	9288;"	d	file:
SQLITE_VdbeAddopTrace	sqlite\sqlite3.c	15748;"	d	file:
SQLITE_VdbeEQP	sqlite\sqlite3.c	15749;"	d	file:
SQLITE_VdbeListing	sqlite\sqlite3.c	15746;"	d	file:
SQLITE_VdbeTrace	sqlite\sqlite3.c	15747;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	sqlite\sqlite3.c	25180;"	d	file:
SQLITE_WAL_H	sqlite\sqlite3.c	49008;"	d	file:
SQLITE_WARNING	sqlite\sqlite3.c	1475;"	d	file:
SQLITE_WARNING_AUTOINDEX	sqlite\sqlite3.c	1557;"	d	file:
SQLITE_WIN32_CACHE_SIZE	sqlite\sqlite3.c	39624;"	d	file:
SQLITE_WIN32_CACHE_SIZE	sqlite\sqlite3.c	39626;"	d	file:
SQLITE_WIN32_CACHE_SIZE	sqlite\sqlite3.c	39636;"	d	file:
SQLITE_WIN32_CACHE_SIZE	sqlite\sqlite3.c	39637;"	d	file:
SQLITE_WIN32_CREATEFILEMAPPINGA	sqlite\sqlite3.c	39335;"	d	file:
SQLITE_WIN32_CREATEFILEMAPPINGA	sqlite\sqlite3.c	39337;"	d	file:
SQLITE_WIN32_DATA_DIRECTORY_TYPE	sqlite\sqlite3.c	39556;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	sqlite\sqlite3.c	39548;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite\sqlite3.c	39322;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite\sqlite3.c	39324;"	d	file:
SQLITE_WIN32_HAS_ANSI	sqlite\sqlite3.c	39280;"	d	file:
SQLITE_WIN32_HAS_WIDE	sqlite\sqlite3.c	39289;"	d	file:
SQLITE_WIN32_HEAP_CREATE	sqlite\sqlite3.c	39588;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	sqlite\sqlite3.c	39661;"	d	file:
SQLITE_WIN32_HEAP_INIT_EXTRA	sqlite\sqlite3.c	39604;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	sqlite\sqlite3.c	39644;"	d	file:
SQLITE_WIN32_HEAP_MAX_INIT_SIZE	sqlite\sqlite3.c	39596;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	sqlite\sqlite3.c	39653;"	d	file:
SQLITE_WIN32_IOERR_RETRY	sqlite\sqlite3.c	41326;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	sqlite\sqlite3.c	41329;"	d	file:
SQLITE_WIN32_MAX_CACHE_SIZE	sqlite\sqlite3.c	39613;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	sqlite\sqlite3.c	39393;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	sqlite\sqlite3.c	39377;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	sqlite\sqlite3.c	39353;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	sqlite\sqlite3.c	39564;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite\sqlite3.c	25134;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite\sqlite3.c	25136;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	sqlite\sqlite3.c	39385;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	sqlite\sqlite3.c	39368;"	d	file:
SQLITE_WITHIN	sqlite\sqlite3.c	13336;"	d	file:
SQLITE_WSD	sqlite\sqlite3.c	13548;"	d	file:
SQLITE_WSD	sqlite\sqlite3.c	13554;"	d	file:
SQLITE_WriteSchema	sqlite\sqlite3.c	15714;"	d	file:
SQL_CHOMP_SEGDIR	sqlite\sqlite3.c	160905;"	d	file:
SQL_CONTENT_INSERT	sqlite\sqlite3.c	160889;"	d	file:
SQL_DELETE_ALL_CONTENT	sqlite\sqlite3.c	160873;"	d	file:
SQL_DELETE_ALL_DOCSIZE	sqlite\sqlite3.c	160876;"	d	file:
SQL_DELETE_ALL_SEGDIR	sqlite\sqlite3.c	160875;"	d	file:
SQL_DELETE_ALL_SEGMENTS	sqlite\sqlite3.c	160874;"	d	file:
SQL_DELETE_ALL_STAT	sqlite\sqlite3.c	160877;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	sqlite\sqlite3.c	160897;"	d	file:
SQL_DELETE_CONTENT	sqlite\sqlite3.c	160871;"	d	file:
SQL_DELETE_DOCSIZE	sqlite\sqlite3.c	160890;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	sqlite\sqlite3.c	160902;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	sqlite\sqlite3.c	160887;"	d	file:
SQL_DELETE_SEGDIR_RANGE	sqlite\sqlite3.c	160898;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	sqlite\sqlite3.c	160888;"	d	file:
SQL_FIND_MERGE_LEVEL	sqlite\sqlite3.c	160900;"	d	file:
SQL_INSERT_SEGDIR	sqlite\sqlite3.c	160882;"	d	file:
SQL_INSERT_SEGMENTS	sqlite\sqlite3.c	160880;"	d	file:
SQL_IS_EMPTY	sqlite\sqlite3.c	160872;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	sqlite\sqlite3.c	160901;"	d	file:
SQL_NEXT_SEGMENTS_ID	sqlite\sqlite3.c	160881;"	d	file:
SQL_NEXT_SEGMENT_INDEX	sqlite\sqlite3.c	160879;"	d	file:
SQL_REPLACE_DOCSIZE	sqlite\sqlite3.c	160891;"	d	file:
SQL_REPLACE_STAT	sqlite\sqlite3.c	160894;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	sqlite\sqlite3.c	160906;"	d	file:
SQL_SELECT_ALL_LANGID	sqlite\sqlite3.c	160899;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	sqlite\sqlite3.c	160896;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	sqlite\sqlite3.c	160878;"	d	file:
SQL_SELECT_DOCSIZE	sqlite\sqlite3.c	160892;"	d	file:
SQL_SELECT_INDEXES	sqlite\sqlite3.c	160907;"	d	file:
SQL_SELECT_LEVEL	sqlite\sqlite3.c	160883;"	d	file:
SQL_SELECT_LEVEL_COUNT	sqlite\sqlite3.c	160885;"	d	file:
SQL_SELECT_LEVEL_RANGE	sqlite\sqlite3.c	160884;"	d	file:
SQL_SELECT_LEVEL_RANGE2	sqlite\sqlite3.c	160910;"	d	file:
SQL_SELECT_MXLEVEL	sqlite\sqlite3.c	160908;"	d	file:
SQL_SELECT_SEGDIR	sqlite\sqlite3.c	160904;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	sqlite\sqlite3.c	160886;"	d	file:
SQL_SELECT_STAT	sqlite\sqlite3.c	160893;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	sqlite\sqlite3.c	160903;"	d	file:
SQL_UPDATE_LEVEL	sqlite\sqlite3.c	160912;"	d	file:
SQL_UPDATE_LEVEL_IDX	sqlite\sqlite3.c	160911;"	d	file:
SQLiteThread	sqlite\sqlite3.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	sqlite\sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRT_Coroutine	sqlite\sqlite3.c	17103;"	d	file:
SRT_Discard	sqlite\sqlite3.c	17090;"	d	file:
SRT_DistFifo	sqlite\sqlite3.c	17092;"	d	file:
SRT_DistQueue	sqlite\sqlite3.c	17094;"	d	file:
SRT_EphemTab	sqlite\sqlite3.c	17102;"	d	file:
SRT_Except	sqlite\sqlite3.c	17088;"	d	file:
SRT_Exists	sqlite\sqlite3.c	17089;"	d	file:
SRT_Fifo	sqlite\sqlite3.c	17091;"	d	file:
SRT_Mem	sqlite\sqlite3.c	17100;"	d	file:
SRT_Output	sqlite\sqlite3.c	17099;"	d	file:
SRT_Queue	sqlite\sqlite3.c	17093;"	d	file:
SRT_Set	sqlite\sqlite3.c	17101;"	d	file:
SRT_Table	sqlite\sqlite3.c	17104;"	d	file:
SRT_Union	sqlite\sqlite3.c	17087;"	d	file:
SRVAL	sqlite\sqlite3.c	89559;"	d	file:
STAT_GET_NDLT	sqlite\sqlite3.c	101151;"	d	file:
STAT_GET_NEQ	sqlite\sqlite3.c	101149;"	d	file:
STAT_GET_NLT	sqlite\sqlite3.c	101150;"	d	file:
STAT_GET_ROWID	sqlite\sqlite3.c	101148;"	d	file:
STAT_GET_STAT1	sqlite\sqlite3.c	101147;"	d	file:
STMT_COLUMN_BUSY	sqlite\sqlite3.c	209715;"	d	file:
STMT_COLUMN_MEM	sqlite\sqlite3.c	209722;"	d	file:
STMT_COLUMN_NAIDX	sqlite\sqlite3.c	209718;"	d	file:
STMT_COLUMN_NCOL	sqlite\sqlite3.c	209713;"	d	file:
STMT_COLUMN_NSCAN	sqlite\sqlite3.c	209716;"	d	file:
STMT_COLUMN_NSORT	sqlite\sqlite3.c	209717;"	d	file:
STMT_COLUMN_NSTEP	sqlite\sqlite3.c	209719;"	d	file:
STMT_COLUMN_REPREP	sqlite\sqlite3.c	209720;"	d	file:
STMT_COLUMN_RO	sqlite\sqlite3.c	209714;"	d	file:
STMT_COLUMN_RUN	sqlite\sqlite3.c	209721;"	d	file:
STMT_COLUMN_SQL	sqlite\sqlite3.c	209712;"	d	file:
STRACCUM_NOMEM	sqlite\sqlite3.c	17486;"	d	file:
STRACCUM_TOOBIG	sqlite\sqlite3.c	17487;"	d	file:
STR_FUNCTION	sqlite\sqlite3.c	15935;"	d	file:
SWAP	sqlite\sqlite3.c	13194;"	d	file:
SWAP	sqlite\sqlite3.c	174575;"	d	file:
SWAPVAL	sqlite\sqlite3.c	198608;"	d	file:
SYSCALL	sqlite\sqlite3.c	39738;"	d	file:
Savepoint	sqlite\sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	sqlite\sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
ScanStatus	sqlite\sqlite3.c	/^struct ScanStatus {$/;"	s	file:
ScanStatus	sqlite\sqlite3.c	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus	file:
Schema	sqlite\sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	sqlite\sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
SegmentNode	sqlite\sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	sqlite\sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	sqlite\sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	sqlite\sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	sqlite\sqlite3.c	/^struct Select {$/;"	s	file:
Select	sqlite\sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	sqlite\sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	sqlite\sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
SessionApplyCtx	sqlite\sqlite3.c	/^struct SessionApplyCtx {$/;"	s	file:
SessionApplyCtx	sqlite\sqlite3.c	/^typedef struct SessionApplyCtx SessionApplyCtx;$/;"	t	typeref:struct:SessionApplyCtx	file:
SessionBuffer	sqlite\sqlite3.c	/^struct SessionBuffer {$/;"	s	file:
SessionBuffer	sqlite\sqlite3.c	/^typedef struct SessionBuffer SessionBuffer;$/;"	t	typeref:struct:SessionBuffer	file:
SessionChange	sqlite\sqlite3.c	/^struct SessionChange {$/;"	s	file:
SessionChange	sqlite\sqlite3.c	/^typedef struct SessionChange SessionChange;$/;"	t	typeref:struct:SessionChange	file:
SessionDiffCtx	sqlite\sqlite3.c	/^struct SessionDiffCtx {$/;"	s	file:
SessionDiffCtx	sqlite\sqlite3.c	/^typedef struct SessionDiffCtx SessionDiffCtx;$/;"	t	typeref:struct:SessionDiffCtx	file:
SessionHook	sqlite\sqlite3.c	/^struct SessionHook {$/;"	s	file:
SessionHook	sqlite\sqlite3.c	/^typedef struct SessionHook SessionHook;$/;"	t	typeref:struct:SessionHook	file:
SessionInput	sqlite\sqlite3.c	/^struct SessionInput {$/;"	s	file:
SessionInput	sqlite\sqlite3.c	/^typedef struct SessionInput SessionInput;$/;"	t	typeref:struct:SessionInput	file:
SessionStat1Ctx	sqlite\sqlite3.c	/^struct SessionStat1Ctx {$/;"	s	file:
SessionStat1Ctx	sqlite\sqlite3.c	/^typedef struct SessionStat1Ctx SessionStat1Ctx;$/;"	t	typeref:struct:SessionStat1Ctx	file:
SessionTable	sqlite\sqlite3.c	/^struct SessionTable {$/;"	s	file:
SessionTable	sqlite\sqlite3.c	/^typedef struct SessionTable SessionTable;$/;"	t	typeref:struct:SessionTable	file:
ShmRegion	sqlite\sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	sqlite\sqlite3.c	25026;"	d	file:
SimulateDiskfullError	sqlite\sqlite3.c	25040;"	d	file:
SimulateDiskfullError	sqlite\sqlite3.c	31499;"	d	file:
SimulateDiskfullError	sqlite\sqlite3.c	31513;"	d	file:
SimulateDiskfullError	sqlite\sqlite3.c	39224;"	d	file:
SimulateDiskfullError	sqlite\sqlite3.c	39238;"	d	file:
SimulateIOError	sqlite\sqlite3.c	25017;"	d	file:
SimulateIOError	sqlite\sqlite3.c	25039;"	d	file:
SimulateIOError	sqlite\sqlite3.c	31490;"	d	file:
SimulateIOError	sqlite\sqlite3.c	31512;"	d	file:
SimulateIOError	sqlite\sqlite3.c	39215;"	d	file:
SimulateIOError	sqlite\sqlite3.c	39237;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	25016;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	25038;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	31489;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	31511;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	39214;"	d	file:
SimulateIOErrorBenign	sqlite\sqlite3.c	39236;"	d	file:
SizeofArray	sqlite\sqlite3.c	150298;"	d	file:
SnippetFragment	sqlite\sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	sqlite\sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	sqlite\sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	sqlite\sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	sqlite\sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	sqlite\sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	sqlite\sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	sqlite\sqlite3.c	/^static void SortByDistance($/;"	f	file:
SortCtx	sqlite\sqlite3.c	/^struct SortCtx {$/;"	s	file:
SortCtx	sqlite\sqlite3.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	sqlite\sqlite3.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	sqlite\sqlite3.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterCompare	sqlite\sqlite3.c	/^typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);$/;"	t	file:
SorterFile	sqlite\sqlite3.c	/^struct SorterFile {$/;"	s	file:
SorterFile	sqlite\sqlite3.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	sqlite\sqlite3.c	/^struct SorterList {$/;"	s	file:
SorterList	sqlite\sqlite3.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	sqlite\sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	sqlite\sqlite3.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	sqlite\sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	sqlite\sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcCount	sqlite\sqlite3.c	/^struct SrcCount {$/;"	s	file:
SrcList	sqlite\sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	sqlite\sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	sqlite\sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat4Accum	sqlite\sqlite3.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	sqlite\sqlite3.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	sqlite\sqlite3.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	sqlite\sqlite3.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StatCell	sqlite\sqlite3.c	/^struct StatCell {$/;"	s	file:
StatCell	sqlite\sqlite3.c	/^typedef struct StatCell StatCell;$/;"	t	typeref:struct:StatCell	file:
StatCursor	sqlite\sqlite3.c	/^struct StatCursor {$/;"	s	file:
StatCursor	sqlite\sqlite3.c	/^typedef struct StatCursor StatCursor;$/;"	t	typeref:struct:StatCursor	file:
StatPage	sqlite\sqlite3.c	/^struct StatPage {$/;"	s	file:
StatPage	sqlite\sqlite3.c	/^typedef struct StatPage StatPage;$/;"	t	typeref:struct:StatPage	file:
StatTable	sqlite\sqlite3.c	/^struct StatTable {$/;"	s	file:
StatTable	sqlite\sqlite3.c	/^typedef struct StatTable StatTable;$/;"	t	typeref:struct:StatTable	file:
StrAccum	sqlite\sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	sqlite\sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	sqlite\sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	sqlite\sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	sqlite\sqlite3.c	81317;"	d	file:
SubProgram	sqlite\sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	sqlite\sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SubstContext	sqlite\sqlite3.c	/^typedef struct SubstContext {$/;"	s	file:
SubstContext	sqlite\sqlite3.c	/^} SubstContext;$/;"	t	typeref:struct:SubstContext	file:
SumCtx	sqlite\sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	sqlite\sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	sqlite\sqlite3.c	13500;"	d	file:
TERM_ANDINFO	sqlite\sqlite3.c	130540;"	d	file:
TERM_CODED	sqlite\sqlite3.c	130537;"	d	file:
TERM_COPIED	sqlite\sqlite3.c	130538;"	d	file:
TERM_DYNAMIC	sqlite\sqlite3.c	130535;"	d	file:
TERM_IS	sqlite\sqlite3.c	130550;"	d	file:
TERM_LIKE	sqlite\sqlite3.c	130549;"	d	file:
TERM_LIKECOND	sqlite\sqlite3.c	130548;"	d	file:
TERM_LIKEOPT	sqlite\sqlite3.c	130547;"	d	file:
TERM_ORINFO	sqlite\sqlite3.c	130539;"	d	file:
TERM_OR_OK	sqlite\sqlite3.c	130541;"	d	file:
TERM_VARSELECT	sqlite\sqlite3.c	130551;"	d	file:
TERM_VIRTUAL	sqlite\sqlite3.c	130536;"	d	file:
TERM_VNULL	sqlite\sqlite3.c	130543;"	d	file:
TERM_VNULL	sqlite\sqlite3.c	130545;"	d	file:
TESTBIT	sqlite\sqlite3.c	46221;"	d	file:
TESTONLY	sqlite\sqlite3.c	12656;"	d	file:
TESTONLY	sqlite\sqlite3.c	12658;"	d	file:
TESTONLY	sqlite\sqlite3.c	150396;"	d	file:
TESTONLY	sqlite\sqlite3.c	150398;"	d	file:
TF_Autoincrement	sqlite\sqlite3.c	16172;"	d	file:
TF_Ephemeral	sqlite\sqlite3.c	16170;"	d	file:
TF_HasNotNull	sqlite\sqlite3.c	16179;"	d	file:
TF_HasPrimaryKey	sqlite\sqlite3.c	16171;"	d	file:
TF_HasStat1	sqlite\sqlite3.c	16173;"	d	file:
TF_NoVisibleRowid	sqlite\sqlite3.c	16175;"	d	file:
TF_OOOHidden	sqlite\sqlite3.c	16176;"	d	file:
TF_Readonly	sqlite\sqlite3.c	16169;"	d	file:
TF_StatsUsed	sqlite\sqlite3.c	16177;"	d	file:
TF_WithoutRowid	sqlite\sqlite3.c	16174;"	d	file:
THREE_BYTE_INT	sqlite\sqlite3.c	77636;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	24996;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	25000;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	31469;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	31473;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	39194;"	d	file:
TIMER_ELAPSED	sqlite\sqlite3.c	39198;"	d	file:
TIMER_END	sqlite\sqlite3.c	24995;"	d	file:
TIMER_END	sqlite\sqlite3.c	24999;"	d	file:
TIMER_END	sqlite\sqlite3.c	31468;"	d	file:
TIMER_END	sqlite\sqlite3.c	31472;"	d	file:
TIMER_END	sqlite\sqlite3.c	39193;"	d	file:
TIMER_END	sqlite\sqlite3.c	39197;"	d	file:
TIMER_START	sqlite\sqlite3.c	24994;"	d	file:
TIMER_START	sqlite\sqlite3.c	24998;"	d	file:
TIMER_START	sqlite\sqlite3.c	31467;"	d	file:
TIMER_START	sqlite\sqlite3.c	31471;"	d	file:
TIMER_START	sqlite\sqlite3.c	39192;"	d	file:
TIMER_START	sqlite\sqlite3.c	39196;"	d	file:
TKFLG_DONTFOLD	sqlite\sqlite3.c	13051;"	d	file:
TKFLG_MASK	sqlite\sqlite3.c	13047;"	d	file:
TK_ABORT	sqlite\sqlite3.c	12910;"	d	file:
TK_ACTION	sqlite\sqlite3.c	12911;"	d	file:
TK_ADD	sqlite\sqlite3.c	13025;"	d	file:
TK_AFTER	sqlite\sqlite3.c	12912;"	d	file:
TK_AGG_COLUMN	sqlite\sqlite3.c	13031;"	d	file:
TK_AGG_FUNCTION	sqlite\sqlite3.c	13030;"	d	file:
TK_ALL	sqlite\sqlite3.c	12999;"	d	file:
TK_ALTER	sqlite\sqlite3.c	13024;"	d	file:
TK_ANALYZE	sqlite\sqlite3.c	12913;"	d	file:
TK_AND	sqlite\sqlite3.c	12927;"	d	file:
TK_ANY	sqlite\sqlite3.c	12966;"	d	file:
TK_AS	sqlite\sqlite3.c	12907;"	d	file:
TK_ASC	sqlite\sqlite3.c	12914;"	d	file:
TK_ASTERISK	sqlite\sqlite3.c	13039;"	d	file:
TK_ATTACH	sqlite\sqlite3.c	12915;"	d	file:
TK_AUTOINCR	sqlite\sqlite3.c	12989;"	d	file:
TK_BEFORE	sqlite\sqlite3.c	12916;"	d	file:
TK_BEGIN	sqlite\sqlite3.c	12888;"	d	file:
TK_BETWEEN	sqlite\sqlite3.c	12931;"	d	file:
TK_BITAND	sqlite\sqlite3.c	12967;"	d	file:
TK_BITNOT	sqlite\sqlite3.c	12978;"	d	file:
TK_BITOR	sqlite\sqlite3.c	12968;"	d	file:
TK_BLOB	sqlite\sqlite3.c	13016;"	d	file:
TK_BY	sqlite\sqlite3.c	12917;"	d	file:
TK_CASCADE	sqlite\sqlite3.c	12918;"	d	file:
TK_CASE	sqlite\sqlite3.c	13019;"	d	file:
TK_CAST	sqlite\sqlite3.c	12919;"	d	file:
TK_CHECK	sqlite\sqlite3.c	12987;"	d	file:
TK_COLLATE	sqlite\sqlite3.c	12977;"	d	file:
TK_COLUMN	sqlite\sqlite3.c	13029;"	d	file:
TK_COLUMNKW	sqlite\sqlite3.c	12943;"	d	file:
TK_COMMA	sqlite\sqlite3.c	12909;"	d	file:
TK_COMMIT	sqlite\sqlite3.c	12893;"	d	file:
TK_CONCAT	sqlite\sqlite3.c	12976;"	d	file:
TK_CONFLICT	sqlite\sqlite3.c	12920;"	d	file:
TK_CONSTRAINT	sqlite\sqlite3.c	12982;"	d	file:
TK_CREATE	sqlite\sqlite3.c	12900;"	d	file:
TK_CTIME_KW	sqlite\sqlite3.c	12965;"	d	file:
TK_DATABASE	sqlite\sqlite3.c	12921;"	d	file:
TK_DEFAULT	sqlite\sqlite3.c	12983;"	d	file:
TK_DEFERRABLE	sqlite\sqlite3.c	12995;"	d	file:
TK_DEFERRED	sqlite\sqlite3.c	12890;"	d	file:
TK_DELETE	sqlite\sqlite3.c	12992;"	d	file:
TK_DESC	sqlite\sqlite3.c	12922;"	d	file:
TK_DETACH	sqlite\sqlite3.c	12923;"	d	file:
TK_DISTINCT	sqlite\sqlite3.c	13004;"	d	file:
TK_DOT	sqlite\sqlite3.c	13005;"	d	file:
TK_DROP	sqlite\sqlite3.c	12997;"	d	file:
TK_EACH	sqlite\sqlite3.c	12924;"	d	file:
TK_ELSE	sqlite\sqlite3.c	13022;"	d	file:
TK_END	sqlite\sqlite3.c	12894;"	d	file:
TK_END_OF_FILE	sqlite\sqlite3.c	13041;"	d	file:
TK_EQ	sqlite\sqlite3.c	12936;"	d	file:
TK_ESCAPE	sqlite\sqlite3.c	12941;"	d	file:
TK_EXCEPT	sqlite\sqlite3.c	13000;"	d	file:
TK_EXCLUSIVE	sqlite\sqlite3.c	12892;"	d	file:
TK_EXISTS	sqlite\sqlite3.c	12903;"	d	file:
TK_EXPLAIN	sqlite\sqlite3.c	12885;"	d	file:
TK_FAIL	sqlite\sqlite3.c	12925;"	d	file:
TK_FLOAT	sqlite\sqlite3.c	13015;"	d	file:
TK_FOR	sqlite\sqlite3.c	12944;"	d	file:
TK_FOREIGN	sqlite\sqlite3.c	12996;"	d	file:
TK_FROM	sqlite\sqlite3.c	13006;"	d	file:
TK_FUNCTION	sqlite\sqlite3.c	13028;"	d	file:
TK_GE	sqlite\sqlite3.c	12940;"	d	file:
TK_GROUP	sqlite\sqlite3.c	13010;"	d	file:
TK_GT	sqlite\sqlite3.c	12937;"	d	file:
TK_HAVING	sqlite\sqlite3.c	13011;"	d	file:
TK_ID	sqlite\sqlite3.c	12942;"	d	file:
TK_IF	sqlite\sqlite3.c	12901;"	d	file:
TK_IF_NULL_ROW	sqlite\sqlite3.c	13038;"	d	file:
TK_IGNORE	sqlite\sqlite3.c	12945;"	d	file:
TK_ILLEGAL	sqlite\sqlite3.c	13044;"	d	file:
TK_IMMEDIATE	sqlite\sqlite3.c	12891;"	d	file:
TK_IN	sqlite\sqlite3.c	12932;"	d	file:
TK_INDEX	sqlite\sqlite3.c	13023;"	d	file:
TK_INDEXED	sqlite\sqlite3.c	12979;"	d	file:
TK_INITIALLY	sqlite\sqlite3.c	12946;"	d	file:
TK_INSERT	sqlite\sqlite3.c	12991;"	d	file:
TK_INSTEAD	sqlite\sqlite3.c	12947;"	d	file:
TK_INTEGER	sqlite\sqlite3.c	13017;"	d	file:
TK_INTERSECT	sqlite\sqlite3.c	13001;"	d	file:
TK_INTO	sqlite\sqlite3.c	13014;"	d	file:
TK_IS	sqlite\sqlite3.c	12928;"	d	file:
TK_ISNOT	sqlite\sqlite3.c	13027;"	d	file:
TK_ISNULL	sqlite\sqlite3.c	12933;"	d	file:
TK_JOIN	sqlite\sqlite3.c	13007;"	d	file:
TK_JOIN_KW	sqlite\sqlite3.c	12981;"	d	file:
TK_KEY	sqlite\sqlite3.c	12949;"	d	file:
TK_LE	sqlite\sqlite3.c	12938;"	d	file:
TK_LIKE_KW	sqlite\sqlite3.c	12930;"	d	file:
TK_LIMIT	sqlite\sqlite3.c	13012;"	d	file:
TK_LP	sqlite\sqlite3.c	12905;"	d	file:
TK_LSHIFT	sqlite\sqlite3.c	12969;"	d	file:
TK_LT	sqlite\sqlite3.c	12939;"	d	file:
TK_MATCH	sqlite\sqlite3.c	12929;"	d	file:
TK_MINUS	sqlite\sqlite3.c	12972;"	d	file:
TK_NE	sqlite\sqlite3.c	12935;"	d	file:
TK_NO	sqlite\sqlite3.c	12948;"	d	file:
TK_NOT	sqlite\sqlite3.c	12902;"	d	file:
TK_NOTNULL	sqlite\sqlite3.c	12934;"	d	file:
TK_NULL	sqlite\sqlite3.c	12984;"	d	file:
TK_OF	sqlite\sqlite3.c	12950;"	d	file:
TK_OFFSET	sqlite\sqlite3.c	12951;"	d	file:
TK_ON	sqlite\sqlite3.c	12990;"	d	file:
TK_OR	sqlite\sqlite3.c	12926;"	d	file:
TK_ORDER	sqlite\sqlite3.c	13009;"	d	file:
TK_PLAN	sqlite\sqlite3.c	12887;"	d	file:
TK_PLUS	sqlite\sqlite3.c	12971;"	d	file:
TK_PRAGMA	sqlite\sqlite3.c	12952;"	d	file:
TK_PRIMARY	sqlite\sqlite3.c	12985;"	d	file:
TK_QUERY	sqlite\sqlite3.c	12886;"	d	file:
TK_RAISE	sqlite\sqlite3.c	12953;"	d	file:
TK_RECURSIVE	sqlite\sqlite3.c	12954;"	d	file:
TK_REFERENCES	sqlite\sqlite3.c	12988;"	d	file:
TK_REGISTER	sqlite\sqlite3.c	13035;"	d	file:
TK_REINDEX	sqlite\sqlite3.c	12963;"	d	file:
TK_RELEASE	sqlite\sqlite3.c	12897;"	d	file:
TK_REM	sqlite\sqlite3.c	12975;"	d	file:
TK_RENAME	sqlite\sqlite3.c	12964;"	d	file:
TK_REPLACE	sqlite\sqlite3.c	12955;"	d	file:
TK_RESTRICT	sqlite\sqlite3.c	12956;"	d	file:
TK_ROLLBACK	sqlite\sqlite3.c	12895;"	d	file:
TK_ROW	sqlite\sqlite3.c	12957;"	d	file:
TK_RP	sqlite\sqlite3.c	12906;"	d	file:
TK_RSHIFT	sqlite\sqlite3.c	12970;"	d	file:
TK_SAVEPOINT	sqlite\sqlite3.c	12896;"	d	file:
TK_SELECT	sqlite\sqlite3.c	13002;"	d	file:
TK_SELECT_COLUMN	sqlite\sqlite3.c	13037;"	d	file:
TK_SEMI	sqlite\sqlite3.c	12884;"	d	file:
TK_SET	sqlite\sqlite3.c	12994;"	d	file:
TK_SLASH	sqlite\sqlite3.c	12974;"	d	file:
TK_SPACE	sqlite\sqlite3.c	13043;"	d	file:
TK_SPAN	sqlite\sqlite3.c	13040;"	d	file:
TK_STAR	sqlite\sqlite3.c	12973;"	d	file:
TK_STRING	sqlite\sqlite3.c	12980;"	d	file:
TK_TABLE	sqlite\sqlite3.c	12899;"	d	file:
TK_TEMP	sqlite\sqlite3.c	12904;"	d	file:
TK_THEN	sqlite\sqlite3.c	13021;"	d	file:
TK_TO	sqlite\sqlite3.c	12898;"	d	file:
TK_TRANSACTION	sqlite\sqlite3.c	12889;"	d	file:
TK_TRIGGER	sqlite\sqlite3.c	12958;"	d	file:
TK_TRUEFALSE	sqlite\sqlite3.c	13026;"	d	file:
TK_TRUTH	sqlite\sqlite3.c	13034;"	d	file:
TK_UMINUS	sqlite\sqlite3.c	13032;"	d	file:
TK_UNCLOSED_STRING	sqlite\sqlite3.c	13042;"	d	file:
TK_UNION	sqlite\sqlite3.c	12998;"	d	file:
TK_UNIQUE	sqlite\sqlite3.c	12986;"	d	file:
TK_UPDATE	sqlite\sqlite3.c	12993;"	d	file:
TK_UPLUS	sqlite\sqlite3.c	13033;"	d	file:
TK_USING	sqlite\sqlite3.c	13008;"	d	file:
TK_VACUUM	sqlite\sqlite3.c	12959;"	d	file:
TK_VALUES	sqlite\sqlite3.c	13003;"	d	file:
TK_VARIABLE	sqlite\sqlite3.c	13018;"	d	file:
TK_VECTOR	sqlite\sqlite3.c	13036;"	d	file:
TK_VIEW	sqlite\sqlite3.c	12960;"	d	file:
TK_VIRTUAL	sqlite\sqlite3.c	12961;"	d	file:
TK_WHEN	sqlite\sqlite3.c	13020;"	d	file:
TK_WHERE	sqlite\sqlite3.c	13013;"	d	file:
TK_WITH	sqlite\sqlite3.c	12962;"	d	file:
TK_WITHOUT	sqlite\sqlite3.c	12908;"	d	file:
TOKEN	sqlite\sqlite3.c	143535;"	d	file:
TRACE	sqlite\sqlite3.c	61630;"	d	file:
TRACE_IDX_INPUTS	sqlite\sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	sqlite\sqlite3.c	135171;"	d	file:
TRACE_IDX_OUTPUTS	sqlite\sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	sqlite\sqlite3.c	135172;"	d	file:
TRANS_NONE	sqlite\sqlite3.c	60966;"	d	file:
TRANS_READ	sqlite\sqlite3.c	60967;"	d	file:
TRANS_WRITE	sqlite\sqlite3.c	60968;"	d	file:
TRIGGER_AFTER	sqlite\sqlite3.c	17404;"	d	file:
TRIGGER_BEFORE	sqlite\sqlite3.c	17403;"	d	file:
TWO_BYTE_INT	sqlite\sqlite3.c	77635;"	d	file:
TabResult	sqlite\sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	sqlite\sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	sqlite\sqlite3.c	/^struct Table {$/;"	s	file:
Table	sqlite\sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	sqlite\sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	sqlite\sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	sqlite\sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	sqlite\sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	sqlite\sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	sqlite\sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	sqlite\sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	sqlite\sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	sqlite\sqlite3.c	/^struct Token {$/;"	s	file:
Token	sqlite\sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TokenCtx	sqlite\sqlite3.c	/^struct TokenCtx {$/;"	s	file:
TokenCtx	sqlite\sqlite3.c	/^typedef struct TokenCtx TokenCtx;$/;"	t	typeref:struct:TokenCtx	file:
TokenDoclist	sqlite\sqlite3.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	sqlite\sqlite3.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
TreeView	sqlite\sqlite3.c	/^struct TreeView {$/;"	s	file:
TreeView	sqlite\sqlite3.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
TrigEvent	sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	sqlite\sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	sqlite\sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	sqlite\sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	sqlite\sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	sqlite\sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	sqlite\sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UAUTH_Admin	sqlite\sqlite3.c	15536;"	d	file:
UAUTH_Fail	sqlite\sqlite3.c	15534;"	d	file:
UAUTH_Unknown	sqlite\sqlite3.c	15533;"	d	file:
UAUTH_User	sqlite\sqlite3.c	15535;"	d	file:
UINT16_TYPE	sqlite\sqlite3.c	13222;"	d	file:
UINT16_TYPE	sqlite\sqlite3.c	13224;"	d	file:
UINT32_TYPE	sqlite\sqlite3.c	13215;"	d	file:
UINT32_TYPE	sqlite\sqlite3.c	13217;"	d	file:
UINT8_TYPE	sqlite\sqlite3.c	13236;"	d	file:
UINT8_TYPE	sqlite\sqlite3.c	13238;"	d	file:
UNICODE_STRING_MAX_CHARS	sqlite\sqlite3.c	39360;"	d	file:
UNIXFILE_DELETE	sqlite\sqlite3.c	31324;"	d	file:
UNIXFILE_DIRSYNC	sqlite\sqlite3.c	31319;"	d	file:
UNIXFILE_DIRSYNC	sqlite\sqlite3.c	31321;"	d	file:
UNIXFILE_EXCL	sqlite\sqlite3.c	31315;"	d	file:
UNIXFILE_NOLOCK	sqlite\sqlite3.c	31326;"	d	file:
UNIXFILE_PERSIST_WAL	sqlite\sqlite3.c	31317;"	d	file:
UNIXFILE_PSOW	sqlite\sqlite3.c	31323;"	d	file:
UNIXFILE_RDONLY	sqlite\sqlite3.c	31316;"	d	file:
UNIXFILE_URI	sqlite\sqlite3.c	31325;"	d	file:
UNIXVFS	sqlite\sqlite3.c	38948;"	d	file:
UNIX_SHM_BASE	sqlite\sqlite3.c	35442;"	d	file:
UNIX_SHM_DMS	sqlite\sqlite3.c	35443;"	d	file:
UNKNOWN_LOCK	sqlite\sqlite3.c	49525;"	d	file:
UNUSED_PARAM	sqlite\sqlite3.c	185881;"	d	file:
UNUSED_PARAM	sqlite\sqlite3.c	188958;"	d	file:
UNUSED_PARAM2	sqlite\sqlite3.c	188962;"	d	file:
UNUSED_PARAMETER	sqlite\sqlite3.c	13575;"	d	file:
UNUSED_PARAMETER	sqlite\sqlite3.c	150381;"	d	file:
UNUSED_PARAMETER	sqlite\sqlite3.c	168879;"	d	file:
UNUSED_PARAMETER2	sqlite\sqlite3.c	13576;"	d	file:
UNUSED_VARIABLE_VALUE	sqlite\sqlite3.c	39409;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite\sqlite3.c	81274;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite\sqlite3.c	81276;"	d	file:
USEFETCH	sqlite\sqlite3.c	49922;"	d	file:
USEFETCH	sqlite\sqlite3.c	49924;"	d	file:
USE_PREAD	sqlite\sqlite3.c	31126;"	d	file:
USE_PREAD	sqlite\sqlite3.c	31130;"	d	file:
USE_PREAD64	sqlite\sqlite3.c	31127;"	d	file:
USE_PREAD64	sqlite\sqlite3.c	31129;"	d	file:
Unicode61Tokenizer	sqlite\sqlite3.c	/^struct Unicode61Tokenizer {$/;"	s	file:
Unicode61Tokenizer	sqlite\sqlite3.c	/^typedef struct Unicode61Tokenizer Unicode61Tokenizer;$/;"	t	typeref:struct:Unicode61Tokenizer	file:
UnixUnusedFd	sqlite\sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	sqlite\sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnpackedRecord	sqlite\sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	sqlite\sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	sqlite\sqlite3.c	29234;"	d	file:
Utf8Read	sqlite\sqlite3.c	109672;"	d	file:
Utf8Read	sqlite\sqlite3.c	109674;"	d	file:
VDBE_DISPLAY_P4	sqlite\sqlite3.c	19047;"	d	file:
VDBE_DISPLAY_P4	sqlite\sqlite3.c	19049;"	d	file:
VDBE_MAGIC_DEAD	sqlite\sqlite3.c	19432;"	d	file:
VDBE_MAGIC_HALT	sqlite\sqlite3.c	19430;"	d	file:
VDBE_MAGIC_INIT	sqlite\sqlite3.c	19428;"	d	file:
VDBE_MAGIC_RESET	sqlite\sqlite3.c	19431;"	d	file:
VDBE_MAGIC_RUN	sqlite\sqlite3.c	19429;"	d	file:
VDBE_OFFSET_LINENO	sqlite\sqlite3.c	14551;"	d	file:
VDBE_OFFSET_LINENO	sqlite\sqlite3.c	14557;"	d	file:
VFUNCTION	sqlite\sqlite3.c	15923;"	d	file:
VList	sqlite\sqlite3.c	/^typedef int VList;$/;"	t	file:
VTAB_SCHEMA	sqlite\sqlite3.c	179401;"	d	file:
VTable	sqlite\sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	sqlite\sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	sqlite\sqlite3.c	12670;"	d	file:
VVA_ONLY	sqlite\sqlite3.c	12672;"	d	file:
ValueNewStat4Ctx	sqlite\sqlite3.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	sqlite\sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	sqlite\sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeBranchTaken	sqlite\sqlite3.c	81296;"	d	file:
VdbeBranchTaken	sqlite\sqlite3.c	81298;"	d	file:
VdbeComment	sqlite\sqlite3.c	14509;"	d	file:
VdbeComment	sqlite\sqlite3.c	14518;"	d	file:
VdbeCoverage	sqlite\sqlite3.c	14547;"	d	file:
VdbeCoverage	sqlite\sqlite3.c	14553;"	d	file:
VdbeCoverageAlwaysTaken	sqlite\sqlite3.c	14549;"	d	file:
VdbeCoverageAlwaysTaken	sqlite\sqlite3.c	14555;"	d	file:
VdbeCoverageIf	sqlite\sqlite3.c	14548;"	d	file:
VdbeCoverageIf	sqlite\sqlite3.c	14554;"	d	file:
VdbeCoverageNeverTaken	sqlite\sqlite3.c	14550;"	d	file:
VdbeCoverageNeverTaken	sqlite\sqlite3.c	14556;"	d	file:
VdbeCursor	sqlite\sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	sqlite\sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	sqlite\sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	sqlite\sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	sqlite\sqlite3.c	19193;"	d	file:
VdbeMemDynamic	sqlite\sqlite3.c	19279;"	d	file:
VdbeModuleComment	sqlite\sqlite3.c	14513;"	d	file:
VdbeModuleComment	sqlite\sqlite3.c	14515;"	d	file:
VdbeModuleComment	sqlite\sqlite3.c	14520;"	d	file:
VdbeNoopComment	sqlite\sqlite3.c	14511;"	d	file:
VdbeNoopComment	sqlite\sqlite3.c	14519;"	d	file:
VdbeOp	sqlite\sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	sqlite\sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	sqlite\sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	sqlite\sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	sqlite\sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	sqlite\sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	sqlite\sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	sqlite\sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VisibleRowid	sqlite\sqlite3.c	16212;"	d	file:
VtabCtx	sqlite\sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	sqlite\sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	sqlite\sqlite3.c	57188;"	d	file:
WALINDEX_LOCK_OFFSET	sqlite\sqlite3.c	57187;"	d	file:
WALINDEX_MAX_VERSION	sqlite\sqlite3.c	57056;"	d	file:
WALINDEX_PGSZ	sqlite\sqlite3.c	57320;"	d	file:
WALTRACE	sqlite\sqlite3.c	57037;"	d	file:
WALTRACE	sqlite\sqlite3.c	57039;"	d	file:
WAL_ALL_BUT_WRITE	sqlite\sqlite3.c	57073;"	d	file:
WAL_CKPT_LOCK	sqlite\sqlite3.c	57074;"	d	file:
WAL_EXCLUSIVE_MODE	sqlite\sqlite3.c	57257;"	d	file:
WAL_FRAME_HDRSIZE	sqlite\sqlite3.c	57191;"	d	file:
WAL_HDRSIZE	sqlite\sqlite3.c	57194;"	d	file:
WAL_HEAPMEMORY_MODE	sqlite\sqlite3.c	57258;"	d	file:
WAL_LOCK_CKPT	sqlite\sqlite3.c	174662;"	d	file:
WAL_LOCK_READ0	sqlite\sqlite3.c	174663;"	d	file:
WAL_LOCK_WRITE	sqlite\sqlite3.c	174661;"	d	file:
WAL_MAGIC	sqlite\sqlite3.c	57205;"	d	file:
WAL_MAX_VERSION	sqlite\sqlite3.c	57055;"	d	file:
WAL_NORMAL_MODE	sqlite\sqlite3.c	57256;"	d	file:
WAL_NREADER	sqlite\sqlite3.c	57077;"	d	file:
WAL_RDONLY	sqlite\sqlite3.c	57264;"	d	file:
WAL_RDWR	sqlite\sqlite3.c	57263;"	d	file:
WAL_READ_LOCK	sqlite\sqlite3.c	57076;"	d	file:
WAL_RECOVER_LOCK	sqlite\sqlite3.c	57075;"	d	file:
WAL_RETRY	sqlite\sqlite3.c	58880;"	d	file:
WAL_SAVEPOINT_NDATA	sqlite\sqlite3.c	49040;"	d	file:
WAL_SHM_RDONLY	sqlite\sqlite3.c	57265;"	d	file:
WAL_SYNC_FLAGS	sqlite\sqlite3.c	49015;"	d	file:
WAL_WRITE_LOCK	sqlite\sqlite3.c	57072;"	d	file:
WHERETRACE	sqlite\sqlite3.c	130290;"	d	file:
WHERETRACE	sqlite\sqlite3.c	130293;"	d	file:
WHERETRACE_ENABLED	sqlite\sqlite3.c	130291;"	d	file:
WHERE_AUTO_INDEX	sqlite\sqlite3.c	130820;"	d	file:
WHERE_BOTH_LIMIT	sqlite\sqlite3.c	130812;"	d	file:
WHERE_BTM_LIMIT	sqlite\sqlite3.c	130811;"	d	file:
WHERE_COLUMN_EQ	sqlite\sqlite3.c	130805;"	d	file:
WHERE_COLUMN_IN	sqlite\sqlite3.c	130807;"	d	file:
WHERE_COLUMN_NULL	sqlite\sqlite3.c	130808;"	d	file:
WHERE_COLUMN_RANGE	sqlite\sqlite3.c	130806;"	d	file:
WHERE_CONSTRAINT	sqlite\sqlite3.c	130809;"	d	file:
WHERE_DISTINCTBY	sqlite\sqlite3.c	16885;"	d	file:
WHERE_DISTINCT_NOOP	sqlite\sqlite3.c	16897;"	d	file:
WHERE_DISTINCT_ORDERED	sqlite\sqlite3.c	16899;"	d	file:
WHERE_DISTINCT_UNIQUE	sqlite\sqlite3.c	16898;"	d	file:
WHERE_DISTINCT_UNORDERED	sqlite\sqlite3.c	16900;"	d	file:
WHERE_DUPLICATES_OK	sqlite\sqlite3.c	16881;"	d	file:
WHERE_GROUPBY	sqlite\sqlite3.c	16884;"	d	file:
WHERE_IDX_ONLY	sqlite\sqlite3.c	130813;"	d	file:
WHERE_INDEXED	sqlite\sqlite3.c	130815;"	d	file:
WHERE_IN_ABLE	sqlite\sqlite3.c	130817;"	d	file:
WHERE_IPK	sqlite\sqlite3.c	130814;"	d	file:
WHERE_LOOP_XFER_SZ	sqlite\sqlite3.c	130406;"	d	file:
WHERE_MULTI_OR	sqlite\sqlite3.c	130819;"	d	file:
WHERE_ONEPASS_DESIRED	sqlite\sqlite3.c	16879;"	d	file:
WHERE_ONEPASS_MULTIROW	sqlite\sqlite3.c	16880;"	d	file:
WHERE_ONEROW	sqlite\sqlite3.c	130818;"	d	file:
WHERE_ORDERBY_LIMIT	sqlite\sqlite3.c	16889;"	d	file:
WHERE_ORDERBY_MAX	sqlite\sqlite3.c	16878;"	d	file:
WHERE_ORDERBY_MIN	sqlite\sqlite3.c	16877;"	d	file:
WHERE_ORDERBY_NORMAL	sqlite\sqlite3.c	16876;"	d	file:
WHERE_OR_SUBCLAUSE	sqlite\sqlite3.c	16882;"	d	file:
WHERE_PARTIALIDX	sqlite\sqlite3.c	130823;"	d	file:
WHERE_SEEK_TABLE	sqlite\sqlite3.c	16888;"	d	file:
WHERE_SEEK_UNIQ_TABLE	sqlite\sqlite3.c	16890;"	d	file:
WHERE_SKIPSCAN	sqlite\sqlite3.c	130821;"	d	file:
WHERE_SORTBYGROUP	sqlite\sqlite3.c	16887;"	d	file:
WHERE_TOP_LIMIT	sqlite\sqlite3.c	130810;"	d	file:
WHERE_UNQ_WANTED	sqlite\sqlite3.c	130822;"	d	file:
WHERE_USE_LIMIT	sqlite\sqlite3.c	16892;"	d	file:
WHERE_VIRTUALTABLE	sqlite\sqlite3.c	130816;"	d	file:
WHERE_WANT_DISTINCT	sqlite\sqlite3.c	16886;"	d	file:
WINCE_DELETION_ATTEMPTS	sqlite\sqlite3.c	41895;"	d	file:
WINFILE_PERSIST_WAL	sqlite\sqlite3.c	39541;"	d	file:
WINFILE_PSOW	sqlite\sqlite3.c	39542;"	d	file:
WINFILE_RDONLY	sqlite\sqlite3.c	39540;"	d	file:
WINMEM_MAGIC1	sqlite\sqlite3.c	39682;"	d	file:
WINMEM_MAGIC2	sqlite\sqlite3.c	39683;"	d	file:
WINSHM_RDLCK	sqlite\sqlite3.c	42968;"	d	file:
WINSHM_UNLCK	sqlite\sqlite3.c	42967;"	d	file:
WINSHM_WRLCK	sqlite\sqlite3.c	42969;"	d	file:
WIN_SHM_BASE	sqlite\sqlite3.c	42961;"	d	file:
WIN_SHM_DMS	sqlite\sqlite3.c	42962;"	d	file:
WO_ALL	sqlite\sqlite3.c	130797;"	d	file:
WO_AND	sqlite\sqlite3.c	130793;"	d	file:
WO_AUX	sqlite\sqlite3.c	130789;"	d	file:
WO_EQ	sqlite\sqlite3.c	130784;"	d	file:
WO_EQUIV	sqlite\sqlite3.c	130794;"	d	file:
WO_GE	sqlite\sqlite3.c	130788;"	d	file:
WO_GT	sqlite\sqlite3.c	130787;"	d	file:
WO_IN	sqlite\sqlite3.c	130783;"	d	file:
WO_IS	sqlite\sqlite3.c	130790;"	d	file:
WO_ISNULL	sqlite\sqlite3.c	130791;"	d	file:
WO_LE	sqlite\sqlite3.c	130786;"	d	file:
WO_LT	sqlite\sqlite3.c	130785;"	d	file:
WO_NOOP	sqlite\sqlite3.c	130795;"	d	file:
WO_OR	sqlite\sqlite3.c	130792;"	d	file:
WO_SINGLE	sqlite\sqlite3.c	130798;"	d	file:
WRC_Abort	sqlite\sqlite3.c	17628;"	d	file:
WRC_Continue	sqlite\sqlite3.c	17626;"	d	file:
WRC_Prune	sqlite\sqlite3.c	17627;"	d	file:
WRITE_LOCK	sqlite\sqlite3.c	60919;"	d	file:
WRITE_UTF16BE	sqlite\sqlite3.c	28518;"	d	file:
WRITE_UTF16LE	sqlite\sqlite3.c	28506;"	d	file:
WRITE_UTF8	sqlite\sqlite3.c	168093;"	d	file:
WRITE_UTF8	sqlite\sqlite3.c	207123;"	d	file:
WRITE_UTF8	sqlite\sqlite3.c	28486;"	d	file:
Wal	sqlite\sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	sqlite\sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	sqlite\sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	sqlite\sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	sqlite\sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	sqlite\sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	sqlite\sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	sqlite\sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	sqlite\sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	sqlite\sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	sqlite\sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	sqlite\sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	sqlite\sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	sqlite\sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	sqlite\sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	sqlite\sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	sqlite\sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereInfo	sqlite\sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	sqlite\sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	sqlite\sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	sqlite\sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLoop	sqlite\sqlite3.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	sqlite\sqlite3.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoopBuilder	sqlite\sqlite3.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	sqlite\sqlite3.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereMaskSet	sqlite\sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	sqlite\sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrCost	sqlite\sqlite3.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	sqlite\sqlite3.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrInfo	sqlite\sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	sqlite\sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrSet	sqlite\sqlite3.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	sqlite\sqlite3.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WherePath	sqlite\sqlite3.c	/^struct WherePath {$/;"	s	file:
WherePath	sqlite\sqlite3.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WhereScan	sqlite\sqlite3.c	/^struct WhereScan {$/;"	s	file:
WhereScan	sqlite\sqlite3.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereTerm	sqlite\sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	sqlite\sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
With	sqlite\sqlite3.c	/^struct With {$/;"	s	file:
With	sqlite\sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
XN_EXPR	sqlite\sqlite3.c	16451;"	d	file:
XN_ROWID	sqlite\sqlite3.c	16450;"	d	file:
Y	sqlite\sqlite3.c	/^  int Y, M, D;        \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	sqlite\sqlite3.c	140010;"	d	file:
YYCODETYPE	sqlite\sqlite3.c	140008;"	d	file:
YYFALLBACK	sqlite\sqlite3.c	140035;"	d	file:
YYMALLOCARGTYPE	sqlite\sqlite3.c	139844;"	d	file:
YYMALLOCARGTYPE	sqlite\sqlite3.c	141410;"	d	file:
YYMINORTYPE	sqlite\sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon26	file:
YYNOCODE	sqlite\sqlite3.c	140009;"	d	file:
YYNOERRORRECOVERY	sqlite\sqlite3.c	139814;"	d	file:
YYNRULE	sqlite\sqlite3.c	140037;"	d	file:
YYNSTATE	sqlite\sqlite3.c	140036;"	d	file:
YYNTOKEN	sqlite\sqlite3.c	140038;"	d	file:
YYPARSEFREENEVERNULL	sqlite\sqlite3.c	139825;"	d	file:
YYSTACKDEPTH	sqlite\sqlite3.c	140029;"	d	file:
YYWILDCARD	sqlite\sqlite3.c	140011;"	d	file:
YY_ACCEPT_ACTION	sqlite\sqlite3.c	140043;"	d	file:
YY_ACTTAB_COUNT	sqlite\sqlite3.c	140112;"	d	file:
YY_ERROR_ACTION	sqlite\sqlite3.c	140042;"	d	file:
YY_MAX_REDUCE	sqlite\sqlite3.c	140046;"	d	file:
YY_MAX_SHIFT	sqlite\sqlite3.c	140039;"	d	file:
YY_MAX_SHIFTREDUCE	sqlite\sqlite3.c	140041;"	d	file:
YY_MIN_REDUCE	sqlite\sqlite3.c	140045;"	d	file:
YY_MIN_SHIFTREDUCE	sqlite\sqlite3.c	140040;"	d	file:
YY_NO_ACTION	sqlite\sqlite3.c	140044;"	d	file:
YY_REDUCE_COUNT	sqlite\sqlite3.c	140498;"	d	file:
YY_REDUCE_MAX	sqlite\sqlite3.c	140500;"	d	file:
YY_REDUCE_MIN	sqlite\sqlite3.c	140499;"	d	file:
YY_SHIFT_COUNT	sqlite\sqlite3.c	140445;"	d	file:
YY_SHIFT_MAX	sqlite\sqlite3.c	140447;"	d	file:
YY_SHIFT_MIN	sqlite\sqlite3.c	140446;"	d	file:
_BSD_SOURCE	sqlite\sqlite3.c	984;"	d	file:
_FILE_OFFSET_BITS	sqlite\sqlite3.c	949;"	d	file:
_FTS3_HASH_H_	sqlite\sqlite3.c	150165;"	d	file:
_FTS3_TOKENIZER_H_	sqlite\sqlite3.c	150002;"	d	file:
_FTS5INT_H	sqlite\sqlite3.c	188880;"	d	file:
_FTS5_H	sqlite\sqlite3.c	11643;"	d	file:
_FTS5_H	sqlite\sqlite3.c	188307;"	d	file:
_FTSINT_H	sqlite\sqlite3.c	149950;"	d	file:
_GNU_SOURCE	sqlite\sqlite3.c	980;"	d	file:
_LARGEFILE_SOURCE	sqlite\sqlite3.c	951;"	d	file:
_LARGE_FILE	sqlite\sqlite3.c	947;"	d	file:
_OS_COMMON_H_	sqlite\sqlite3.c	24880;"	d	file:
_OS_COMMON_H_	sqlite\sqlite3.c	31353;"	d	file:
_OS_COMMON_H_	sqlite\sqlite3.c	39078;"	d	file:
_SQLITE3RBU_H	sqlite\sqlite3.c	174219;"	d	file:
_SQLITE3RTREE_H_	sqlite\sqlite3.c	9932;"	d	file:
_SQLITE_OS_H_	sqlite\sqlite3.c	15033;"	d	file:
_USE_32BIT_TIME_T	sqlite\sqlite3.c	1016;"	d	file:
_XOPEN_SOURCE	sqlite\sqlite3.c	12601;"	d	file:
__SQLITESESSION_H_	sqlite\sqlite3.c	10039;"	d	file:
__declspec	sqlite\sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	sqlite\sqlite3.c	/^__declspec(dllexport)$/;"	f
_fts3ht	sqlite\sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	sqlite\sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_sqliteZone_	sqlite\sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	sqlite\sqlite3.c	/^  FuncDef *a[SQLITE_FUNC_HASH_SZ];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	sqlite\sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	sqlite\sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	sqlite\sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:
a	sqlite\sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	sqlite\sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	sqlite\sqlite3.c	/^  const u8 *a;                    \/* Buffer containing position list *\/$/;"	m	struct:Fts5LookaheadReader	file:
a	sqlite\sqlite3.c	/^  const u8 *a;                    \/* Position list to iterate through *\/$/;"	m	struct:Fts5PoslistReader	file:
a	sqlite\sqlite3.c	/^  const unsigned char *a;$/;"	m	struct:Fts5PhraseIter	file:
a	sqlite\sqlite3.c	/^  unsigned char *a;   \/* Gather entropy into this buffer *\/$/;"	m	struct:EntropyGatherer	file:
a	sqlite\sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	sqlite\sqlite3.c	/^  } a[1];                  \/* One slot for each expression in the list *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	sqlite\sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	sqlite\sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:
a	sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	sqlite\sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAll	sqlite\sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	sqlite\sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAltMap	sqlite\sqlite3.c	/^  int *aAltMap;           \/* Mapping from table to index column numbers *\/$/;"	m	struct:VdbeCursor	file:
aAsciiTokenChar	sqlite\sqlite3.c	/^static unsigned char aAsciiTokenChar[128] = {$/;"	v	file:
aAvgEq	sqlite\sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:
aBest	sqlite\sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	sqlite\sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon17	file:
aBuf	sqlite\sqlite3.c	/^  char *aBuf;$/;"	m	struct:PorterContext	file:
aBuf	sqlite\sqlite3.c	/^  char aBuf[FTS5_PORTER_MAX_TOKEN + 64];$/;"	m	struct:PorterTokenizer	file:
aBuf	sqlite\sqlite3.c	/^  u8 *aBuf;                       \/* Pointer to changeset buffer *\/$/;"	m	struct:SessionBuffer	file:
aBuf	sqlite\sqlite3.c	/^  u8 *aBuf;$/;"	m	struct:sqlite3rbu	file:
aBuffer	sqlite\sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aBuffer	sqlite\sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	sqlite\sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCell	sqlite\sqlite3.c	/^  StatCell *aCell;                \/* Array of parsed cells *\/$/;"	m	struct:StatPage	file:
aCellIdx	sqlite\sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	sqlite\sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCheckMapping	sqlite\sqlite3.c	/^  sqlite3_stmt *aCheckMapping[2]; \/* Statements to query %_parent\/%_rowid *\/$/;"	m	struct:RtreeCheck	file:
aCksum	sqlite\sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCnt	sqlite\sqlite3.c	/^  i64 *aCnt;$/;"	m	struct:Fts5VocabCursor	file:
aCol	sqlite\sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	sqlite\sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	sqlite\sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	sqlite\sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColExpr	sqlite\sqlite3.c	/^  ExprList *aColExpr;      \/* Column expressions *\/$/;"	m	struct:Index	file:
aColName	sqlite\sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	sqlite\sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	sqlite\sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	sqlite\sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aColumnSize	sqlite\sqlite3.c	/^  int *aColumnSize;               \/* Values for xColumnSize() *\/$/;"	m	struct:Fts5Cursor	file:
aConstraint	sqlite\sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	sqlite\sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	sqlite\sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	sqlite\sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:
aCoord	sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aCounter	sqlite\sqlite3.c	/^  u32 aCounter[7];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	sqlite\sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	sqlite\sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	sqlite\sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	sqlite\sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	sqlite\sqlite3.c	/^  u8 *aData;                      \/* Pointer to buffer containing changeset *\/$/;"	m	struct:SessionInput	file:
aData	sqlite\sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aData	sqlite\sqlite3.c	/^  unsigned char *aData;           \/* content of the file *\/$/;"	m	struct:MemFile	file:
aDataEnd	sqlite\sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDataOfst	sqlite\sqlite3.c	/^  u8 *aDataOfst;       \/* Same as aData for leaves.  aData+4 for interior *\/$/;"	m	struct:MemPage	file:
aDb	sqlite\sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	sqlite\sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	sqlite\sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDlidx	sqlite\sqlite3.c	/^  Fts5DlidxWriter *aDlidx;        \/* Array of Fts5DlidxWriter objects *\/$/;"	m	struct:Fts5SegWriter	file:
aDoc	sqlite\sqlite3.c	/^  i64 *aDoc;$/;"	m	struct:Fts5VocabCursor	file:
aDoclist	sqlite\sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	sqlite\sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	sqlite\sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	sqlite\sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	sqlite\sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aEof	sqlite\sqlite3.c	/^  u8 *aEof;                       \/* Pointer to 1 byte past end of doclist *\/$/;"	m	struct:Fts5DoclistIter	file:
aExt	sqlite\sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	sqlite\sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFile	sqlite\sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFirst	sqlite\sqlite3.c	/^  Fts5CResult *aFirst;            \/* Current merge state (see above) *\/$/;"	m	struct:Fts5Iter	file:
aFirst	sqlite\sqlite3.c	/^  int *aFirst;                    \/* Array of first token in each sentence *\/$/;"	m	struct:Fts5SFinder	file:
aFold	sqlite\sqlite3.c	/^  char *aFold;                    \/* Buffer to fold text into *\/$/;"	m	struct:Unicode61Tokenizer	file:
aFrame	sqlite\sqlite3.c	/^  RbuFrame *aFrame;$/;"	m	struct:sqlite3rbu	file:
aFrameCksum	sqlite\sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFreq	sqlite\sqlite3.c	/^  double *aFreq;                  \/* Array used to calculate phrase freq. *\/$/;"	m	struct:Fts5Bm25Data	file:
aFunc	sqlite\sqlite3.c	/^  Hash aFunc;                   \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	sqlite\sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	sqlite\sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	sqlite\sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon17	file:
aHash	sqlite\sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aIDF	sqlite\sqlite3.c	/^  double *aIDF;                   \/* IDF for each phrase *\/$/;"	m	struct:Fts5Bm25Data	file:
aIdx	sqlite\sqlite3.c	/^  int aIdx[1];                    \/* Offsets into aPoslist for current row *\/$/;"	m	struct:Fts5Sorter	file:
aInLoop	sqlite\sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon20::__anon21	typeref:struct:WhereLevel::__anon20::__anon21::InLoop	file:
aIndex	sqlite\sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	sqlite\sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aInput	sqlite\sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aInst	sqlite\sqlite3.c	/^  int *aInst;                     \/* 3 integers per phrase instance *\/$/;"	m	struct:Fts5Cursor	file:
aInstIter	sqlite\sqlite3.c	/^  Fts5PoslistReader *aInstIter;   \/* One for each phrase *\/$/;"	m	struct:Fts5Cursor	file:
aJournalMagic	sqlite\sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKWCode	sqlite\sqlite3.c	/^static const unsigned char aKWCode[124] = {$/;"	v	file:
aKWHash	sqlite\sqlite3.c	/^static const unsigned char aKWHash[127] = {$/;"	v	file:
aKWLen	sqlite\sqlite3.c	/^static const unsigned char aKWLen[124] = {$/;"	v	file:
aKWNext	sqlite\sqlite3.c	/^static const unsigned char aKWNext[124] = {$/;"	v	file:
aKWOffset	sqlite\sqlite3.c	/^static const unsigned short int aKWOffset[124] = {$/;"	v	file:
aKey	sqlite\sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	sqlite\sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:
aLTermSpace	sqlite\sqlite3.c	/^  WhereTerm *aLTermSpace[3];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:
aLabel	sqlite\sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:
aLevel	sqlite\sqlite3.c	/^  Fts5StructureLevel aLevel[1];   \/* Array of nLevel level objects *\/$/;"	m	struct:Fts5Structure	file:
aLimit	sqlite\sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aLock	sqlite\sqlite3.c	/^  u8 aLock[SQLITE_SHM_NLOCK];     \/* Reserved space for locks *\/$/;"	m	struct:WalCkptInfo	file:
aLoop	sqlite\sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:
aLvl	sqlite\sqlite3.c	/^  Fts5DlidxLvl aLvl[1];$/;"	m	struct:Fts5DlidxIter	file:
aMI	sqlite\sqlite3.c	/^  u32 *aMI;                  \/* See above *\/$/;"	m	struct:Fts3Expr	file:
aMap	sqlite\sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMatchinfo	sqlite\sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMatchinfo	sqlite\sqlite3.c	/^  u32 aMatchinfo[1];$/;"	m	struct:MatchinfoBuffer	file:
aMem	sqlite\sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	sqlite\sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	sqlite\sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aMem	sqlite\sqlite3.c	/^  sqlite3_value *aMem;    \/* First of nMem value in the unpacked pKey *\/$/;"	m	struct:BtreePayload	file:
aMemory	sqlite\sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	sqlite\sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNew	sqlite\sqlite3.c	/^  Mem *aNew;                      \/* Array of new.* values *\/$/;"	m	struct:PreUpdate	file:
aNode	sqlite\sqlite3.c	/^  JsonNode *aNode;   \/* Array of nodes containing the parse *\/$/;"	m	struct:JsonParse	file:
aNode	sqlite\sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:
aNode	sqlite\sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	sqlite\sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	sqlite\sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	sqlite\sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	sqlite\sqlite3.c	/^  u32 *aOffset;           \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:
aOnce	sqlite\sqlite3.c	/^  u8 *aOnce;                    \/* Array of OP_Once flags *\/$/;"	m	struct:SubProgram	file:
aOnce	sqlite\sqlite3.c	/^  u8 *aOnce;              \/* Bitmask used by OP_Once *\/$/;"	m	struct:VdbeFrame	file:
aOp	sqlite\sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	sqlite\sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	sqlite\sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	sqlite\sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	sqlite\sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aOvfl	sqlite\sqlite3.c	/^  u32 *aOvfl;                     \/* Array of overflow page numbers *\/$/;"	m	struct:StatCell	file:
aPadding	sqlite\sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aPage	sqlite\sqlite3.c	/^  StatPage aPage[32];$/;"	m	struct:StatCursor	file:
aParam	sqlite\sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
aParam	sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aParam	sqlite\sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aPgRef	sqlite\sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	sqlite\sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	sqlite\sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPoint	sqlite\sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:
aPool	sqlite\sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPopulator	sqlite\sqlite3.c	/^  Fts5PoslistPopulator *aPopulator;$/;"	m	struct:Fts5ExprCtx	file:
aPoslist	sqlite\sqlite3.c	/^  const u8 *aPoslist;             \/* Position lists for current row *\/$/;"	m	struct:Fts5Sorter	file:
aPoslist	sqlite\sqlite3.c	/^  u8 *aPoslist;$/;"	m	struct:Fts5DoclistIter	file:
aPragmaName	sqlite\sqlite3.c	/^static const PragmaName aPragmaName[] = {$/;"	v	file:
aPrefix	sqlite\sqlite3.c	/^  int *aPrefix;                   \/* Sizes in bytes of nPrefix prefix indexes *\/$/;"	m	struct:Fts5Config	file:
aPrefix	sqlite\sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	sqlite\sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	sqlite\sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aRecord	sqlite\sqlite3.c	/^  u8 *aRecord;                    \/* Buffer containing old.* record *\/$/;"	m	struct:SessionChange	file:
aRecord	sqlite\sqlite3.c	/^  u8 *aRecord;                    \/* old.* database record *\/$/;"	m	struct:PreUpdate	file:
aRef	sqlite\sqlite3.c	/^  u8 aRef[3];$/;"	m	struct:MatchinfoBuffer	file:
aRegion	sqlite\sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	sqlite\sqlite3.c	/^  const u8 *aRow;         \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aRowid	sqlite\sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon19	file:
aRowidOffset	sqlite\sqlite3.c	/^  int *aRowidOffset;              \/* Array of offset to rowid fields *\/$/;"	m	struct:Fts5SegIter	file:
aSalt	sqlite\sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	sqlite\sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	sqlite\sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScan	sqlite\sqlite3.c	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe	file:
aSeg	sqlite\sqlite3.c	/^  Fts5SegIter aSeg[1];            \/* Array of segment iterators *\/$/;"	m	struct:Fts5Iter	file:
aSeg	sqlite\sqlite3.c	/^  Fts5StructureSegment *aSeg;     \/* Array of segments. aSeg[0] is oldest. *\/$/;"	m	struct:Fts5StructureLevel	file:
aSegment	sqlite\sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	sqlite\sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSlot	sqlite\sqlite3.c	/^  Fts5HashEntry **aSlot;          \/* Array of hash slots *\/$/;"	m	struct:Fts5Hash	file:
aSortOrder	sqlite\sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aSortOrder	sqlite\sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:
aStat	sqlite\sqlite3.c	/^  int aStat[4];               \/* Total cache hits, misses, writes, spills *\/$/;"	m	struct:Pager	file:
aStat	sqlite\sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	sqlite\sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	sqlite\sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *aStmt[11];$/;"	m	struct:Fts5Storage	file:
aStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:
aSyscall	sqlite\sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	sqlite\sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	sqlite\sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTask	sqlite\sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	sqlite\sqlite3.c	/^  int aTempReg[8];        \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	sqlite\sqlite3.c	/^  Fts5ExprTerm aTerm[1];          \/* Terms that make up this phrase *\/$/;"	m	struct:Fts5ExprPhrase	file:
aTerm	sqlite\sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	sqlite\sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTokenChar	sqlite\sqlite3.c	/^  unsigned char aTokenChar[128];  \/* ASCII range token characters *\/$/;"	m	struct:Unicode61Tokenizer	file:
aTokenChar	sqlite\sqlite3.c	/^  unsigned char aTokenChar[128];$/;"	m	struct:AsciiTokenizer	file:
aTotalSize	sqlite\sqlite3.c	/^  i64 *aTotalSize;                \/* Total sizes of each column *\/ $/;"	m	struct:Fts5Storage	file:
aTree	sqlite\sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	sqlite\sqlite3.c	/^  u32 aType[1];           \/* Type values record decode.  MUST BE LAST *\/$/;"	m	struct:VdbeCursor	file:
aUp	sqlite\sqlite3.c	/^  u32 *aUp;          \/* Index of parent of each node *\/$/;"	m	struct:JsonParse	file:
aVTrans	sqlite\sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	sqlite\sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	sqlite\sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aXformType	sqlite\sqlite3.c	/^} aXformType[] = {$/;"	v	typeref:struct:__anon12	file:
aaOutput	sqlite\sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
abIndexed	sqlite\sqlite3.c	/^  u8 *abIndexed;                  \/* Array of flags, set on indexed & PK cols *\/$/;"	m	struct:RbuObjIter	file:
abNotNull	sqlite\sqlite3.c	/^  u8 *abNotNull;                  \/* Array of flags, set on NOT NULL columns *\/$/;"	m	struct:RbuObjIter	file:
abNotindexed	sqlite\sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:
abPK	sqlite\sqlite3.c	/^  u8 *abPK;                       \/* Array of primary key flags *\/$/;"	m	struct:SessionTable	file:
abPK	sqlite\sqlite3.c	/^  u8 *abPK;                       \/* Boolean array - true if column is in PK *\/$/;"	m	struct:SessionApplyCtx	file:
abPK	sqlite\sqlite3.c	/^  u8 *abPK;                       \/* Primary key array *\/$/;"	m	struct:sqlite3_changeset_iter	file:
abTblPk	sqlite\sqlite3.c	/^  u8 *abTblPk;                    \/* Array of flags, set on target PK columns *\/$/;"	m	struct:RbuObjIter	file:
abUnindexed	sqlite\sqlite3.c	/^  u8 *abUnindexed;                \/* True for unindexed columns *\/$/;"	m	struct:Fts5Config	file:
absFunc	sqlite\sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accError	sqlite\sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:
accessPayload	sqlite\sqlite3.c	/^static int accessPayload($/;"	f	file:
accessPayloadChecked	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int accessPayloadChecked($/;"	f	file:
actionName	sqlite\sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
addAggInfoColumn	sqlite\sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	sqlite\sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	sqlite\sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	sqlite\sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	sqlite\sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	sqlite\sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	sqlite\sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	sqlite\sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	sqlite\sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBody	sqlite\sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:
addrBrk	sqlite\sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	sqlite\sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrCrTab	sqlite\sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateBtree opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:
addrExplain	sqlite\sqlite3.c	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus	file:
addrFillSub	sqlite\sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	sqlite\sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	sqlite\sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon20::__anon21::InLoop	file:
addrLikeRep	sqlite\sqlite3.c	/^  int addrLikeRep;      \/* LIKE range processing address *\/$/;"	m	struct:WhereLevel	file:
addrLoop	sqlite\sqlite3.c	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus	file:
addrNxt	sqlite\sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	sqlite\sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
addrSkip	sqlite\sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:
addrSortIndex	sqlite\sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	sqlite\sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrVisit	sqlite\sqlite3.c	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus	file:
addrVisit	sqlite\sqlite3.c	/^  int addrVisit;        \/* Address at which row is visited *\/$/;"	m	struct:WhereLevel	file:
adjustStats	sqlite\sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affinity	sqlite\sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	sqlite\sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
afpCheckReservedLock	sqlite\sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	sqlite\sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	sqlite\sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	sqlite\sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	sqlite\sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	sqlite\sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	sqlite\sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	sqlite\sqlite3.c	33950;"	d	file:
aggregate_context	sqlite\sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	sqlite\sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	sqlite\sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::p4union	file:
aiClass	sqlite\sqlite3.c	/^static const unsigned char aiClass[] = {$/;"	v	file:
aiCol	sqlite\sqlite3.c	/^    int *aiCol;                               \/* array of column indexes *\/$/;"	m	union:Walker::__anon10	file:
aiCol	sqlite\sqlite3.c	/^  int aiCol[1];$/;"	m	struct:Fts5Colset	file:
aiColumn	sqlite\sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiColumn	sqlite\sqlite3.c	/^  i16 aiColumn[11];          \/* Corresponding column number in the eq-class *\/$/;"	m	struct:WhereScan	file:
aiCur	sqlite\sqlite3.c	/^  int aiCur[11];             \/* Cursors in the equivalence class *\/$/;"	m	struct:WhereScan	file:
aiCurOnePass	sqlite\sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:
aiException	sqlite\sqlite3.c	/^  int *aiException;$/;"	m	struct:Unicode61Tokenizer	file:
aiException	sqlite\sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	sqlite\sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	sqlite\sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	sqlite\sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH-1];     \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	sqlite\sqlite3.c	/^  u16 aiOvfl[4];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	sqlite\sqlite3.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index	file:
aiRowLogEst	sqlite\sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	sqlite\sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
aiSrcOrder	sqlite\sqlite3.c	/^  int *aiSrcOrder;                \/* src table col -> target table col *\/$/;"	m	struct:RbuObjIter	file:
alarmBusy	sqlite\sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmThreshold	sqlite\sqlite3.c	/^  sqlite3_int64 alarmThreshold; \/* The soft heap limit *\/$/;"	m	struct:Mem0Global	file:
allSpaces	sqlite\sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	sqlite\sqlite3.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	sqlite\sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	sqlite\sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	sqlite\sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	sqlite\sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	sqlite\sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	sqlite\sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
anDLt	sqlite\sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	sqlite\sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
anEq	sqlite\sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	sqlite\sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
anExec	sqlite\sqlite3.c	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame	file:
anExec	sqlite\sqlite3.c	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe	file:
anLt	sqlite\sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	sqlite\sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
anOutput	sqlite\sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anQueue	sqlite\sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:
anQueue	sqlite\sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
anStat	sqlite\sqlite3.c	/^  u32 anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	sqlite\sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	sqlite\sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	sqlite\sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	sqlite\sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	sqlite\sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeAggregatesInSelectEnd	sqlite\sqlite3.c	/^static void analyzeAggregatesInSelectEnd(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	sqlite\sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	sqlite\sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	sqlite\sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	sqlite\sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apArg	sqlite\sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:
apCell	sqlite\sqlite3.c	/^  u8 **apCell;            \/* All cells begin balanced *\/$/;"	m	struct:CellArray	file:
apChange	sqlite\sqlite3.c	/^  SessionChange **apChange;       \/* Hash table buckets *\/$/;"	m	struct:SessionTable	file:
apChild	sqlite\sqlite3.c	/^  Fts5ExprNode *apChild[1];       \/* Array of child nodes *\/$/;"	m	struct:Fts5ExprNode	file:
apCsr	sqlite\sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	sqlite\sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apExprPhrase	sqlite\sqlite3.c	/^  Fts5ExprPhrase **apExprPhrase;  \/* Pointers to phrase objects *\/$/;"	m	struct:Fts5Expr	file:
apHash	sqlite\sqlite3.c	/^  Fts5TermsetEntry *apHash[512];$/;"	m	struct:Fts5Termset	file:
apHash	sqlite\sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	sqlite\sqlite3.c	/^  u8 *apOvfl[4];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	sqlite\sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH-1]; \/* Stack of parents of current page *\/$/;"	m	struct:BtCursor	file:
apPhrase	sqlite\sqlite3.c	/^  Fts5ExprPhrase **apPhrase;      \/* Array of all phrases *\/$/;"	m	struct:Fts5Parse	file:
apPhrase	sqlite\sqlite3.c	/^  Fts5ExprPhrase *apPhrase[1];    \/* Array of phrase pointers *\/$/;"	m	struct:Fts5ExprNearset	file:
apRankArg	sqlite\sqlite3.c	/^  sqlite3_value **apRankArg;      \/* Array of trailing arguments *\/$/;"	m	struct:Fts5Cursor	file:
apRegion	sqlite\sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	sqlite\sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apShm	sqlite\sqlite3.c	/^  char **apShm;                   \/* Array of mmap'd *-shm regions *\/$/;"	m	struct:rbu_file	file:
apSqlParam	sqlite\sqlite3.c	/^  sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
apSqlParam	sqlite\sqlite3.c	/^  sqlite3_value **apSqlParam; \/* Original SQL parameter values *\/$/;"	m	struct:RtreeMatchArg	file:
apSub	sqlite\sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon17	file:
apSub	sqlite\sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	sqlite\sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apValue	sqlite\sqlite3.c	/^  sqlite3_value **apValue;        \/* old.* and new.* values *\/$/;"	m	struct:sqlite3_changeset_iter	file:
apVtabLock	sqlite\sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	sqlite\sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
api	sqlite\sqlite3.c	/^  fts5_api api;                   \/* User visible part of object (see fts5.h) *\/$/;"	m	struct:Fts5Global	file:
apiOomError	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
applyAffinity	sqlite\sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	sqlite\sqlite3.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	sqlite\sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
argc	sqlite\sqlite3.c	/^  u8 argc;                \/* Number of arguments *\/$/;"	m	struct:sqlite3_context	file:
argv	sqlite\sqlite3.c	/^  sqlite3_value *argv[1]; \/* Argument set *\/$/;"	m	struct:sqlite3_context	file:
argvIndex	sqlite\sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
asciiFold	sqlite\sqlite3.c	/^static void asciiFold(char *aOut, const char *aIn, int nByte){$/;"	f	file:
assertCellInfo	sqlite\sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	sqlite\sqlite3.c	66006;"	d	file:
assertColumnName	sqlite\sqlite3.c	/^static void assertColumnName(sqlite3_stmt *pStmt, int iCol, const char *zName){$/;"	f	file:
assertColumnName	sqlite\sqlite3.c	177375;"	d	file:
assertMutexHeld	sqlite\sqlite3.c	149339;"	d	file:
assertParentIndex	sqlite\sqlite3.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertParentIndex	sqlite\sqlite3.c	66565;"	d	file:
assertTruncateConstraint	sqlite\sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	sqlite\sqlite3.c	53087;"	d	file:
assertTruncateConstraintCb	sqlite\sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_nc	sqlite\sqlite3.c	188950;"	d	file:
assert_nc	sqlite\sqlite3.c	188952;"	d	file:
assert_pager_state	sqlite\sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atEOF	sqlite\sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:
attachBackupObject	sqlite\sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	sqlite\sqlite3.c	/^static void attachFunc($/;"	f	file:
auth	sqlite\sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:
authLevel	sqlite\sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:
autoCommit	sqlite\sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	sqlite\sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	sqlite\sqlite3.c	112788;"	d	file:
autoIncStep	sqlite\sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	sqlite\sqlite3.c	112789;"	d	file:
autoIncrementEnd	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void autoIncrementEnd(Parse *pParse){$/;"	f	file:
autoVacuum	sqlite\sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	sqlite\sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	sqlite\sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
autolockIoFinder	sqlite\sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	sqlite\sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	sqlite\sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
avgdl	sqlite\sqlite3.c	/^  double avgdl;                   \/* Average number of tokens in each row *\/$/;"	m	struct:Fts5Bm25Data	file:
azArg	sqlite\sqlite3.c	/^  char *azArg[2];           \/* Value of the argument and schema *\/$/;"	m	struct:PragmaVtabCursor	file:
azCol	sqlite\sqlite3.c	/^  char **azCol;                   \/* Column names *\/$/;"	m	struct:Fts5Config	file:
azCol	sqlite\sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azCol	sqlite\sqlite3.c	/^  const char **azCol;             \/* Array of column names *\/$/;"	m	struct:SessionApplyCtx	file:
azCol	sqlite\sqlite3.c	/^  const char **azCol;             \/* Column names *\/$/;"	m	struct:SessionTable	file:
azColl	sqlite\sqlite3.c	/^  const char **azColl;     \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	sqlite\sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azFileLock	sqlite\sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	sqlite\sqlite3.c	/^  char **azModuleArg;  \/* 0: module 1: schema 2: vtab name 3...: args *\/$/;"	m	struct:Table	file:
azResult	sqlite\sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azTblCol	sqlite\sqlite3.c	/^  char **azTblCol;                \/* Array of unquoted target column names *\/$/;"	m	struct:RbuObjIter	file:
azTblType	sqlite\sqlite3.c	/^  char **azTblType;               \/* Array of target column types *\/$/;"	m	struct:RbuObjIter	file:
b	sqlite\sqlite3.c	/^  const unsigned char *b;$/;"	m	struct:Fts5PhraseIter	file:
b	sqlite\sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bAutoAttach	sqlite\sqlite3.c	/^  int bAutoAttach;                \/* True to auto-attach tables *\/$/;"	m	struct:sqlite3_session	file:
bBenignMalloc	sqlite\sqlite3.c	/^  u8 bBenignMalloc;             \/* Do not require OOMs if true *\/$/;"	m	struct:sqlite3	file:
bBusy	sqlite\sqlite3.c	/^  u8 bBusy;            \/* Prevent endless loops on corrupt database files *\/$/;"	m	struct:MemPage	file:
bCleanup	sqlite\sqlite3.c	/^  int bCleanup;                   \/* True in "cleanup" state *\/$/;"	m	struct:RbuObjIter	file:
bColumnsize	sqlite\sqlite3.c	/^  int bColumnsize;                \/* "columnsize=" option value (dflt==1) *\/$/;"	m	struct:Fts5Config	file:
bConstraint	sqlite\sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bContent	sqlite\sqlite3.c	/^  u8 bContent;                    \/* Set content-flag (detail=none mode) *\/$/;"	m	struct:Fts5HashEntry	file:
bCoreMutex	sqlite\sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeclared	sqlite\sqlite3.c	/^  int bDeclared;      \/* True after sqlite3_declare_vtab() is called *\/$/;"	m	struct:VtabCtx	file:
bDeferConstraints	sqlite\sqlite3.c	/^  int bDeferConstraints;          \/* True to defer constraints *\/$/;"	m	struct:SessionApplyCtx	file:
bDeferred	sqlite\sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDel	sqlite\sqlite3.c	/^  u8 bDel;                        \/* Set delete-flag @ iSzPoslist *\/$/;"	m	struct:Fts5HashEntry	file:
bDel	sqlite\sqlite3.c	/^  u8 bDel;                        \/* True if the delete flag is set *\/$/;"	m	struct:Fts5SegIter	file:
bDelete	sqlite\sqlite3.c	/^  int bDelete;                    \/* Current write is a delete *\/$/;"	m	struct:Fts5Index	file:
bDesc	sqlite\sqlite3.c	/^  int bDesc;                      \/* Iterate in descending rowid order *\/$/;"	m	struct:Fts5Expr	file:
bDesc	sqlite\sqlite3.c	/^  int bDesc;                      \/* True for "ORDER BY rowid DESC" queries *\/$/;"	m	struct:Fts5Cursor	file:
bDesc	sqlite\sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	sqlite\sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	sqlite\sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDisable	sqlite\sqlite3.c	/^  u32 bDisable;           \/* Only operate the lookaside when zero *\/$/;"	m	struct:Lookaside	file:
bDoTruncate	sqlite\sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:
bDone	sqlite\sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnable	sqlite\sqlite3.c	/^  int bEnable;                    \/* True if currently recording *\/$/;"	m	struct:sqlite3_session	file:
bEof	sqlite\sqlite3.c	/^  int bEof;                       \/* Set to true after xInput finished *\/$/;"	m	struct:SessionInput	file:
bEof	sqlite\sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bEof	sqlite\sqlite3.c	/^  int bEof;                       \/* True at EOF *\/$/;"	m	struct:Fts5ExprNode	file:
bEof	sqlite\sqlite3.c	/^  int bEof;                       \/* True if this cursor is at EOF *\/$/;"	m	struct:Fts5VocabCursor	file:
bEof	sqlite\sqlite3.c	/^  int bEof;                     \/* At EOF already *\/$/;"	m	struct:Fts5DlidxLvl	file:
bEof	sqlite\sqlite3.c	/^  u8 bEof;                        \/* Set to true at EOF *\/$/;"	m	struct:Fts5PoslistReader	file:
bEof	sqlite\sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bEof	sqlite\sqlite3.c	/^  u8 bEof;$/;"	m	struct:Fts5IndexIter	file:
bErr	sqlite\sqlite3.c	/^  u8 bErr;                 \/* True if an error has been encountered *\/$/;"	m	struct:JsonString	file:
bExclusive	sqlite\sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bExtraFileArg	sqlite\sqlite3.c	/^  u8 bExtraFileArg;                 \/* Include sqlite3_file as callback arg *\/$/;"	m	struct:BusyHandler	file:
bFirst	sqlite\sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFirst	sqlite\sqlite3.c	/^  u8 bFirst;                      \/* True if token must be first in column *\/$/;"	m	struct:Fts5ExprTerm	file:
bFirstRowidInDoclist	sqlite\sqlite3.c	/^  u8 bFirstRowidInDoclist;        \/* True if next rowid is first in doclist *\/$/;"	m	struct:Fts5SegWriter	file:
bFirstRowidInPage	sqlite\sqlite3.c	/^  u8 bFirstRowidInPage;           \/* True if next rowid is first in page *\/$/;"	m	struct:Fts5SegWriter	file:
bFirstTermInPage	sqlite\sqlite3.c	/^  u8 bFirstTermInPage;            \/* True if next term will be first in leaf *\/$/;"	m	struct:Fts5SegWriter	file:
bFlag	sqlite\sqlite3.c	/^  u8 bFlag;                       \/* For client use (any custom purpose) *\/$/;"	m	struct:Fts5PoslistReader	file:
bFreeList	sqlite\sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFts4	sqlite\sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	sqlite\sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	sqlite\sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bGlobal	sqlite\sqlite3.c	/^  int bGlobal;                    \/* Set if global data is loaded *\/$/;"	m	struct:MatchinfoBuffer	file:
bHasDocsize	sqlite\sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	sqlite\sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:
bIgnore	sqlite\sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:
bIgnoreSavepoint	sqlite\sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	sqlite\sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIndirect	sqlite\sqlite3.c	/^  int bIndirect;                  \/* True if all changes are indirect *\/$/;"	m	struct:sqlite3_session	file:
bIndirect	sqlite\sqlite3.c	/^  int bIndirect;                  \/* True if current change was indirect *\/$/;"	m	struct:sqlite3_changeset_iter	file:
bIndirect	sqlite\sqlite3.c	/^  int bIndirect;                  \/* True if this change is "indirect" *\/$/;"	m	struct:SessionChange	file:
bInt	sqlite\sqlite3.c	/^  int bInt;                       \/* True for rtree_i32 table *\/$/;"	m	struct:RtreeCheck	file:
bIsReader	sqlite\sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:
bLine	sqlite\sqlite3.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:
bLocaltimeFault	sqlite\sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	sqlite\sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	sqlite\sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	sqlite\sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	sqlite\sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bMiss	sqlite\sqlite3.c	/^  int bMiss;$/;"	m	struct:Fts5PoslistPopulator	file:
bNoDiscard	sqlite\sqlite3.c	/^  int bNoDiscard;                 \/* If true, do not discard in InputBuffer() *\/$/;"	m	struct:SessionInput	file:
bNoIncrDoclist	sqlite\sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:
bNoLeafData	sqlite\sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:
bNoLock	sqlite\sqlite3.c	/^  BOOL bNoLock;                      \/* Non-zero if locking is disabled. *\/$/;"	m	struct:winVfsAppData	file:
bNoQuery	sqlite\sqlite3.c	/^  unsigned bNoQuery:1;     \/* Do not use this index to optimize queries *\/$/;"	m	struct:Index	file:
bNolock	sqlite\sqlite3.c	/^  u8 bNolock;                     \/* True to fail EXCLUSIVE locks *\/$/;"	m	struct:rbu_file	file:
bNomatch	sqlite\sqlite3.c	/^  int bNomatch;                   \/* True if entry is not a match *\/$/;"	m	struct:Fts5ExprNode	file:
bOk	sqlite\sqlite3.c	/^  int bOk;                        \/* True if ok to populate *\/$/;"	m	struct:Fts5PoslistPopulator	file:
bOpenUri	sqlite\sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOrderedInnerLoop	sqlite\sqlite3.c	/^  u8 bOrderedInnerLoop;     \/* True if only the inner-most loop is ordered *\/$/;"	m	struct:WhereInfo	file:
bOrderedInnerLoop	sqlite\sqlite3.c	/^  u8 bOrderedInnerLoop; \/* ORDER BY correctly sorts the inner loop *\/$/;"	m	struct:SortCtx	file:
bOwned	sqlite\sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPatch	sqlite\sqlite3.c	/^  int bPatch;                     \/* True to accumulate patchsets *\/$/;"	m	struct:sqlite3_changegroup	file:
bPatchset	sqlite\sqlite3.c	/^  int bPatchset;                  \/* True if this is a patchset *\/$/;"	m	struct:sqlite3_changeset_iter	file:
bPending	sqlite\sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPoint	sqlite\sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:
bPrefix	sqlite\sqlite3.c	/^  u8 bPrefix;                     \/* True for a prefix term *\/$/;"	m	struct:Fts5ExprTerm	file:
bPrefixIndex	sqlite\sqlite3.c	/^  int bPrefixIndex;               \/* True to use prefix-indexes *\/$/;"	m	struct:Fts5Config	file:
bPrevDelete	sqlite\sqlite3.c	/^  int bPrevDelete;                \/* True if last operation was a delete *\/$/;"	m	struct:Fts3Table	file:
bPrevValid	sqlite\sqlite3.c	/^  int bPrevValid;                 \/* True if iPrev is valid *\/$/;"	m	struct:Fts5DlidxWriter	file:
bProcessLock	sqlite\sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	sqlite\sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	sqlite\sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRebaseStarted	sqlite\sqlite3.c	/^  int bRebaseStarted;             \/* If table header is already in rebase *\/$/;"	m	struct:SessionApplyCtx	file:
bRecursive	sqlite\sqlite3.c	/^  u8 bRecursive;             \/* True for json_tree().  False for json_each() *\/$/;"	m	struct:JsonEachCursor	file:
bRemoveDiacritic	sqlite\sqlite3.c	/^  int bRemoveDiacritic;           \/* True if remove_diacritics=1 is set *\/$/;"	m	struct:Unicode61Tokenizer	file:
bRemoveDiacritic	sqlite\sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	sqlite\sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	sqlite\sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bRev	sqlite\sqlite3.c	/^  int bRev;                       \/* True to iterate in reverse order *\/$/;"	m	struct:Fts5Iter	file:
bSeekStmt	sqlite\sqlite3.c	/^  u8 bSeekStmt;                   \/* True if pStmt is a seek *\/$/;"	m	struct:Fts3Cursor	file:
bShmUnreliable	sqlite\sqlite3.c	/^  u8 bShmUnreliable;         \/* SHM content is read-only and unreliable *\/$/;"	m	struct:Wal	file:
bSkipEmpty	sqlite\sqlite3.c	/^  u8 bSkipEmpty;                  \/* True to skip deleted entries *\/$/;"	m	struct:Fts5Iter	file:
bSmallMalloc	sqlite\sqlite3.c	/^  int bSmallMalloc;                 \/* Avoid large memory allocations if true *\/$/;"	m	struct:Sqlite3Config	file:
bSpanIsTab	sqlite\sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:
bStart	sqlite\sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bStat1	sqlite\sqlite3.c	/^  int bStat1;                     \/* True if table is sqlite_stat1 *\/$/;"	m	struct:SessionApplyCtx	file:
bStat1	sqlite\sqlite3.c	/^  int bStat1;                     \/* True if this is sqlite_stat1 *\/$/;"	m	struct:SessionTable	file:
bStatic	sqlite\sqlite3.c	/^  u8 bStatic;              \/* True if zBuf is static space *\/$/;"	m	struct:JsonString	file:
bSyncSet	sqlite\sqlite3.c	/^  u8 bSyncSet;         \/* True if "PRAGMA synchronous=N" has been run *\/$/;"	m	struct:Db	file:
bTermEq	sqlite\sqlite3.c	/^  u8 bTermEq;                     \/* True if the terms are equal *\/$/;"	m	struct:Fts5CResult	file:
bTotalsValid	sqlite\sqlite3.c	/^  int bTotalsValid;               \/* True if nTotalRow\/aTotalSize[] are valid *\/$/;"	m	struct:Fts5Storage	file:
bUnderPressure	sqlite\sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnique	sqlite\sqlite3.c	/^  int bUnique;                    \/* Current index is unique *\/$/;"	m	struct:RbuObjIter	file:
bUnordered	sqlite\sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bUseCis	sqlite\sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:
bUseFetch	sqlite\sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	sqlite\sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	sqlite\sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	sqlite\sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	sqlite\sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:
bVarSelect	sqlite\sqlite3.c	/^  int bVarSelect;               \/* Used by sqlite3WhereExprUsage() *\/$/;"	m	struct:WhereMaskSet	file:
backtrace	sqlite\sqlite3.c	22096;"	d	file:
backtrace_symbols_fd	sqlite\sqlite3.c	22097;"	d	file:
backupOnePage	sqlite\sqlite3.c	/^static int backupOnePage($/;"	f	file:
backupTruncateFile	sqlite\sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backupUpdate	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void backupUpdate($/;"	f	file:
backup_finish	sqlite\sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	sqlite\sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	sqlite\sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	sqlite\sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	sqlite\sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	sqlite\sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	sqlite\sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	sqlite\sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	sqlite\sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	sqlite\sqlite3.c	/^  Fts5IndexIter base;             \/* Base class containing output vars *\/$/;"	m	struct:Fts5Iter	file:
base	sqlite\sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	sqlite\sqlite3.c	/^  sqlite3_file base;              \/* IO methods *\/$/;"	m	struct:MemFile	file:
base	sqlite\sqlite3.c	/^  sqlite3_file base;              \/* sqlite3_file methods *\/$/;"	m	struct:rbu_file	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vfs base;               \/* rbu VFS shim methods *\/$/;"	m	struct:rbu_vfs	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts5Table	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;              \/* Base class.  Must be first *\/$/;"	m	struct:DbpageTable	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;        \/* Base class.  Must be first *\/$/;"	m	struct:PragmaVtab	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;  \/* Base class - must be first *\/$/;"	m	struct:stmt_vtab	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:Fts5VocabTable	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab base;$/;"	m	struct:StatTable	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts5Cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class.  Must be first *\/$/;"	m	struct:DbpageCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;  \/* Base class - must be first *\/$/;"	m	struct:JsonEachCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;  \/* Base class - must be first *\/$/;"	m	struct:stmt_cursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base; \/* Base class.  Must be first *\/$/;"	m	struct:PragmaVtabCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:Fts5VocabCursor	file:
base	sqlite\sqlite3.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:StatCursor	file:
bft	sqlite\sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	sqlite\sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	sqlite\sqlite3.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	sqlite\sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	sqlite\sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	sqlite\sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	sqlite\sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob64	sqlite\sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_double	sqlite\sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	sqlite\sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	sqlite\sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	sqlite\sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	sqlite\sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	sqlite\sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	sqlite\sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_pointer	sqlite\sqlite3.c	/^  int (*bind_pointer)(sqlite3_stmt*,int,void*,const char*,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text	sqlite\sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	sqlite\sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text64	sqlite\sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_value	sqlite\sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	sqlite\sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob64	sqlite\sqlite3.c	/^  int (*bind_zeroblob64)(sqlite3_stmt*, int, sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
bldFlags	sqlite\sqlite3.c	/^  unsigned int bldFlags;    \/* SQLITE_BLDF_* flags *\/$/;"	m	struct:WhereLoopBuilder	file:
blobGrowBuffer	sqlite\sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	sqlite\sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	sqlite\sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	sqlite\sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	sqlite\sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	sqlite\sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	sqlite\sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	sqlite\sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	sqlite\sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	sqlite\sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
btree	sqlite\sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon22	typeref:struct:WhereLoop::__anon22::__anon23	file:
btreeClearHasContent	sqlite\sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	sqlite\sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	sqlite\sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	sqlite\sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	sqlite\sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeEnterAll	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE btreeEnterAll(sqlite3 *db){$/;"	f	file:
btreeGetHasContent	sqlite\sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	sqlite\sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeGetUnusedPage	sqlite\sqlite3.c	/^static int btreeGetUnusedPage($/;"	f	file:
btreeHeapInsert	sqlite\sqlite3.c	/^static void btreeHeapInsert(u32 *aHeap, u32 x){$/;"	f	file:
btreeHeapPull	sqlite\sqlite3.c	/^static int btreeHeapPull(u32 *aHeap, u32 *pOut){$/;"	f	file:
btreeInitPage	sqlite\sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	sqlite\sqlite3.c	61237;"	d	file:
btreeInvokeBusyHandler	sqlite\sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLeaveAll	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE btreeLeaveAll(sqlite3 *db){$/;"	f	file:
btreeLockCarefully	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	sqlite\sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	sqlite\sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur){$/;"	f	file:
btreePageFromDbPage	sqlite\sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	sqlite\sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	sqlite\sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	sqlite\sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellAdjustSizeForOverflow	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void btreeParseCellAdjustSizeForOverflow($/;"	f	file:
btreeParseCellPtr	sqlite\sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreeParseCellPtrIndex	sqlite\sqlite3.c	/^static void btreeParseCellPtrIndex($/;"	f	file:
btreeParseCellPtrNoPayload	sqlite\sqlite3.c	/^static void btreeParseCellPtrNoPayload($/;"	f	file:
btreePrevious	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur){$/;"	f	file:
btreeReleaseAllCursorPages	sqlite\sqlite3.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	sqlite\sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	sqlite\sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	sqlite\sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
btterm	sqlite\sqlite3.c	/^  Fts5Buffer btterm;              \/* Next term to insert into %_idx table *\/$/;"	m	struct:Fts5SegWriter	file:
buf	sqlite\sqlite3.c	/^  Fts5Buffer buf;                 \/* Buffer containing leaf data *\/$/;"	m	struct:Fts5PageWriter	file:
buf	sqlite\sqlite3.c	/^  Fts5Buffer buf;                 \/* Buffer containing page data *\/$/;"	m	struct:Fts5DlidxWriter	file:
buf	sqlite\sqlite3.c	/^  SessionBuffer buf;              \/* Current read buffer *\/$/;"	m	struct:SessionInput	file:
busy	sqlite\sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	sqlite\sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	sqlite\sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	sqlite\sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	sqlite\sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cId	sqlite\sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:
cType	sqlite\sqlite3.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	sqlite\sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	sqlite\sqlite3.c	/^static void cacheEntryClear(Parse *pParse, int i){$/;"	f	file:
cacheStatus	sqlite\sqlite3.c	/^  u32 cacheStatus;        \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	sqlite\sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
cachedCellSize	sqlite\sqlite3.c	/^static u16 cachedCellSize(CellArray *p, int N){$/;"	f	file:
callCollNeeded	sqlite\sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	sqlite\sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	sqlite\sqlite3.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
cancel_auto_extension	sqlite\sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
cannotBeFunction	sqlite\sqlite3.c	/^static int cannotBeFunction(Parse *pParse, struct SrcList_item *pFrom){$/;"	f	file:
cb	sqlite\sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:
cdateFunc	sqlite\sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	sqlite\sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	sqlite\sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	sqlite\sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellInfoEqual	sqlite\sqlite3.c	/^  static int cellInfoEqual(CellInfo *a, CellInfo *b){$/;"	f	file:
cellMargin	sqlite\sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	sqlite\sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	sqlite\sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellSize	sqlite\sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	sqlite\sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellSizePtrNoPayload	sqlite\sqlite3.c	/^static u16 cellSizePtrNoPayload(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	sqlite\sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	sqlite\sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	sqlite\sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	sqlite\sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	sqlite\sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	sqlite\sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	sqlite\sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	sqlite\sqlite3.c	/^static void changes($/;"	f	file:
charFunc	sqlite\sqlite3.c	/^static void charFunc($/;"	f	file:
charMap	sqlite\sqlite3.c	143868;"	d	file:
charMap	sqlite\sqlite3.c	143871;"	d	file:
charset	sqlite\sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	sqlite\sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	sqlite\sqlite3.c	76752;"	d	file:
checkAppendMsg	sqlite\sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	sqlite\sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkConstraintExprNode	sqlite\sqlite3.c	/^static int checkConstraintExprNode(Walker *pWalker, Expr *pExpr){$/;"	f	file:
checkConstraintUnchanged	sqlite\sqlite3.c	/^static int checkConstraintUnchanged(Expr *pExpr, int *aiChng, int chngRowid){$/;"	f	file:
checkList	sqlite\sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	sqlite\sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	sqlite\sqlite3.c	149384;"	d	file:
checkMutexAlloc	sqlite\sqlite3.c	/^static sqlite3_mutex *checkMutexAlloc(int iType){$/;"	f	file:
checkMutexEnd	sqlite\sqlite3.c	/^static int checkMutexEnd(void){ $/;"	f	file:
checkMutexEnter	sqlite\sqlite3.c	/^static void checkMutexEnter(sqlite3_mutex *p){$/;"	f	file:
checkMutexFree	sqlite\sqlite3.c	/^static void checkMutexFree(sqlite3_mutex *p){$/;"	f	file:
checkMutexHeld	sqlite\sqlite3.c	/^static int checkMutexHeld(sqlite3_mutex *p){$/;"	f	file:
checkMutexInit	sqlite\sqlite3.c	/^static int checkMutexInit(void){ $/;"	f	file:
checkMutexLeave	sqlite\sqlite3.c	/^static void checkMutexLeave(sqlite3_mutex *p){$/;"	f	file:
checkMutexNotheld	sqlite\sqlite3.c	/^static int checkMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
checkMutexTry	sqlite\sqlite3.c	/^static int checkMutexTry(sqlite3_mutex *p){$/;"	f	file:
checkPage	sqlite\sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkProfileCallback	sqlite\sqlite3.c	79061;"	d	file:
checkProfileCallback	sqlite\sqlite3.c	79064;"	d	file:
checkPtrmap	sqlite\sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkReadTransaction	sqlite\sqlite3.c	/^static int checkReadTransaction(sqlite3 *db, Btree *p){$/;"	f	file:
checkRef	sqlite\sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	sqlite\sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	sqlite\sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	sqlite\sqlite3.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	sqlite\sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckptLock	sqlite\sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
cksum	sqlite\sqlite3.c	/^  u64 cksum;$/;"	m	struct:Fts5IntegrityCtx	file:
cksumInit	sqlite\sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	sqlite\sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	sqlite\sqlite3.c	61707;"	d	file:
clearCell	sqlite\sqlite3.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	sqlite\sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	sqlite\sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p, int bFree){$/;"	f	file:
clearYMD_HMS_TZ	sqlite\sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	sqlite\sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	sqlite\sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	sqlite\sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closeCursorsInFrame	sqlite\sqlite3.c	/^static void closeCursorsInFrame(Vdbe *p){$/;"	f	file:
closePendingFds	sqlite\sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	sqlite\sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_v2	sqlite\sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
cnt	sqlite\sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	sqlite\sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	sqlite\sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
codeAllEqualityTerms	sqlite\sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	sqlite\sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	sqlite\sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	sqlite\sqlite3.c	/^static int codeCompare($/;"	f	file:
codeCursorHint	sqlite\sqlite3.c	/^static void codeCursorHint($/;"	f	file:
codeCursorHint	sqlite\sqlite3.c	131815;"	d	file:
codeCursorHintCheckExpr	sqlite\sqlite3.c	/^static int codeCursorHintCheckExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintFixExpr	sqlite\sqlite3.c	/^static int codeCursorHintFixExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeCursorHintIsOrFunction	sqlite\sqlite3.c	/^static int codeCursorHintIsOrFunction(Walker *pWalker, Expr *pExpr){$/;"	f	file:
codeDeferredSeek	sqlite\sqlite3.c	/^static void codeDeferredSeek($/;"	f	file:
codeDistinct	sqlite\sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	sqlite\sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeExprOrVector	sqlite\sqlite3.c	/^static void codeExprOrVector(Parse *pParse, Expr *p, int iReg, int nReg){$/;"	f	file:
codeInteger	sqlite\sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	sqlite\sqlite3.c	/^static void codeOffset($/;"	f	file:
codeReal	sqlite\sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	sqlite\sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	sqlite\sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	sqlite\sqlite3.c	103269;"	d	file:
codeTriggerProgram	sqlite\sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
codeVectorCompare	sqlite\sqlite3.c	/^static void codeVectorCompare($/;"	f	file:
colFlags	sqlite\sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:
colNamesSet	sqlite\sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	sqlite\sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
colUsed	sqlite\sqlite3.c	/^  sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info	file:
collationMatch	sqlite\sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	sqlite\sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	sqlite\sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	sqlite\sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	sqlite\sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	sqlite\sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	sqlite\sqlite3.c	/^static const void *columnName($/;"	f	file:
columnNullValue	sqlite\sqlite3.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	sqlite\sqlite3.c	121654;"	d	file:
columnType	sqlite\sqlite3.c	121656;"	d	file:
columnTypeImpl	sqlite\sqlite3.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	sqlite\sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	sqlite\sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	sqlite\sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	sqlite\sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	sqlite\sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	sqlite\sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	sqlite\sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	sqlite\sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	sqlite\sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	sqlite\sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	sqlite\sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	sqlite\sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	sqlite\sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	sqlite\sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	sqlite\sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	sqlite\sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	sqlite\sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	sqlite\sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	sqlite\sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	sqlite\sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	sqlite\sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
columnsInIndex	sqlite\sqlite3.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
commit_hook	sqlite\sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	sqlite\sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	sqlite\sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	sqlite\sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	sqlite\sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	sqlite\sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	sqlite\sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	sqlite\sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	sqlite\sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	sqlite\sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeCellSize	sqlite\sqlite3.c	/^static SQLITE_NOINLINE u16 computeCellSize(CellArray *p, int N){$/;"	f	file:
computeHMS	sqlite\sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	sqlite\sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	sqlite\sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	sqlite\sqlite3.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	sqlite\sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	sqlite\sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	sqlite\sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	sqlite\sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	sqlite\sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
connectionIsBusy	sqlite\sqlite3.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
constraintName	sqlite\sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constraints	sqlite\sqlite3.c	/^  SessionBuffer constraints;      \/* Deferred constraints are stored here *\/$/;"	m	struct:SessionApplyCtx	file:
constructAutomaticIndex	sqlite\sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	sqlite\sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	sqlite\sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCompoundSelectToSubquery	sqlite\sqlite3.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	sqlite\sqlite3.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	sqlite\sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
copyKey	sqlite\sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	sqlite\sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	sqlite\sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	sqlite\sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptPageError	sqlite\sqlite3.c	/^int corruptPageError(int lineno, MemPage *p){$/;"	f
corruptSchema	sqlite\sqlite3.c	/^static void corruptSchema($/;"	f	file:
costMult	sqlite\sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:
count	sqlite\sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	sqlite\sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	sqlite\sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	sqlite\sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	sqlite\sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countLookasideSlots	sqlite\sqlite3.c	/^static u32 countLookasideSlots(LookasideSlot *p){$/;"	f	file:
countOfViewOptimization	sqlite\sqlite3.c	/^static int countOfViewOptimization(Parse *pParse, Select *p){$/;"	f	file:
countStep	sqlite\sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	sqlite\sqlite3.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
covered	sqlite\sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
createAggContext	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	sqlite\sqlite3.c	/^static int createCollation($/;"	f	file:
createMask	sqlite\sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	sqlite\sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	sqlite\sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	sqlite\sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	sqlite\sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	sqlite\sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	sqlite\sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	sqlite\sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	sqlite\sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	sqlite\sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	sqlite\sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
csr	sqlite\sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
csrflags	sqlite\sqlite3.c	/^  int csrflags;                   \/* Mask of cursor flags (see below) *\/$/;"	m	struct:Fts5Cursor	file:
ctimeFunc	sqlite\sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	sqlite\sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	sqlite\sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	sqlite\sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
curFlags	sqlite\sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:
curIntKey	sqlite\sqlite3.c	/^  u8 curIntKey;             \/* Value of apPage[0]->intKey *\/$/;"	m	struct:BtCursor	file:
curPagerFlags	sqlite\sqlite3.c	/^  u8 curPagerFlags;         \/* Flags to send to sqlite3PagerGet() *\/$/;"	m	struct:BtCursor	file:
current	sqlite\sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	sqlite\sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	sqlite\sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	sqlite\sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	sqlite\sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cursorOwnsBtShared	sqlite\sqlite3.c	/^static int cursorOwnsBtShared(BtCursor *p){$/;"	f	file:
cycles	sqlite\sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	sqlite\sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	sqlite\sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	sqlite\sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
databaseIsUnmoved	sqlite\sqlite3.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
dateFunc	sqlite\sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeError	sqlite\sqlite3.c	/^static void datetimeError(DateTime *p){$/;"	f	file:
datetimeFunc	sqlite\sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Associated database connection *\/ $/;"	m	struct:Fts5Global	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database handle *\/$/;"	m	struct:Fts5Config	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database handle *\/$/;"	m	struct:Fts5VocabTable	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database handle *\/$/;"	m	struct:RtreeCheck	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* Database handle session is attached to *\/$/;"	m	struct:sqlite3_session	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* The database *\/$/;"	m	struct:DbpageTable	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;               \/* Database connection for this cursor *\/$/;"	m	struct:stmt_cursor	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;              \/* The database connection to which it belongs *\/$/;"	m	struct:PragmaVtab	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;        \/* Database connection for this stmt vtab *\/$/;"	m	struct:stmt_vtab	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:sqlite3_value	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon9	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:SessionApplyCtx	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:StatTable	file:
db	sqlite\sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	sqlite\sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	sqlite\sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	sqlite\sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbMain	sqlite\sqlite3.c	/^  sqlite3 *dbMain;                \/* target database handle *\/$/;"	m	struct:sqlite3rbu	file:
dbMallocRawFinish	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void *dbMallocRawFinish(sqlite3 *db, u64 n){$/;"	f	file:
dbOptFlags	sqlite\sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:
dbOrigSize	sqlite\sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	sqlite\sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	sqlite\sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbRbu	sqlite\sqlite3.c	/^  sqlite3 *dbRbu;                 \/* rbu database handle *\/$/;"	m	struct:sqlite3rbu	file:
dbReallocFinish	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){$/;"	f	file:
dbSize	sqlite\sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	sqlite\sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_cacheflush	sqlite\sqlite3.c	/^  int (*db_cacheflush)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_config	sqlite\sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_filename	sqlite\sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	sqlite\sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_readonly	sqlite\sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_release_memory	sqlite\sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	sqlite\sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
dbpageBegin	sqlite\sqlite3.c	/^static int dbpageBegin(sqlite3_vtab *pVtab){$/;"	f	file:
dbpageBestIndex	sqlite\sqlite3.c	/^static int dbpageBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
dbpageClose	sqlite\sqlite3.c	/^static int dbpageClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
dbpageColumn	sqlite\sqlite3.c	/^static int dbpageColumn($/;"	f	file:
dbpageConnect	sqlite\sqlite3.c	/^static int dbpageConnect($/;"	f	file:
dbpageDisconnect	sqlite\sqlite3.c	/^static int dbpageDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
dbpageEof	sqlite\sqlite3.c	/^static int dbpageEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
dbpageFilter	sqlite\sqlite3.c	/^static int dbpageFilter($/;"	f	file:
dbpageNext	sqlite\sqlite3.c	/^static int dbpageNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
dbpageOpen	sqlite\sqlite3.c	/^static int dbpageOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
dbpageRowid	sqlite\sqlite3.c	/^static int dbpageRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
dbpageUpdate	sqlite\sqlite3.c	/^static int dbpageUpdate($/;"	f	file:
debugMutexAlloc	sqlite\sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	sqlite\sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	sqlite\sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	sqlite\sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	sqlite\sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	sqlite\sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	sqlite\sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	sqlite\sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	sqlite\sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	sqlite\sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	sqlite\sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	sqlite\sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	sqlite\sqlite3.c	/^static void decodeIntArray($/;"	f	file:
default_rc	sqlite\sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:
deferredMoveto	sqlite\sqlite3.c	/^  u8 deferredMoveto;      \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	sqlite\sqlite3.c	/^static int defragmentPage(MemPage *pPage, int nMaxFrag){$/;"	f	file:
deleteCell	sqlite\sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
deleteTable	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE deleteTable(sqlite3 *db, Table *pTable){$/;"	f	file:
delim	sqlite\sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	sqlite\sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
deserializeGeometry	sqlite\sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	sqlite\sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	sqlite\sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	sqlite\sqlite3.c	/^static void detachFunc($/;"	f	file:
dev	sqlite\sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceCharacteristics	sqlite\sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
dfltLockMode	sqlite\sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	sqlite\sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableLookaside	sqlite\sqlite3.c	/^  u8 disableLookaside; \/* Number of times lookaside has been disabled *\/$/;"	m	struct:Parse	file:
disableLookaside	sqlite\sqlite3.c	/^static void disableLookaside(Parse *pParse){$/;"	f	file:
disableTerm	sqlite\sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	sqlite\sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	sqlite\sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	sqlite\sqlite3.c	14812;"	d	file:
disable_simulated_io_errors	sqlite\sqlite3.c	52970;"	d	file:
disallow	sqlite\sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon13	file:
disconnectAllVtab	sqlite\sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayComment	sqlite\sqlite3.c	/^static int displayComment($/;"	f	file:
displayP4	sqlite\sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
displayP4Expr	sqlite\sqlite3.c	/^static void displayP4Expr(StrAccum *p, Expr *pExpr){$/;"	f	file:
doNotSpill	sqlite\sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	sqlite\sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
doclist	sqlite\sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doingRerun	sqlite\sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:
done	sqlite\sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
done	sqlite\sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
dotlockCheckReservedLock	sqlite\sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	sqlite\sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	sqlite\sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	sqlite\sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	sqlite\sqlite3.c	13078;"	d	file:
double	sqlite\sqlite3.c	1310;"	d	file:
double	sqlite\sqlite3.c	9909;"	d	file:
doubleConsonant	sqlite\sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	sqlite\sqlite3.c	/^static SQLITE_NOINLINE i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite\sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite\sqlite3.c	61708;"	d	file:
dropCell	sqlite\sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dupedExprNodeSize	sqlite\sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	sqlite\sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	sqlite\sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCode	sqlite\sqlite3.c	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker	file:
eContent	sqlite\sqlite3.c	/^  int eContent;                   \/* An FTS5_CONTENT value *\/$/;"	m	struct:Fts5Config	file:
eCoordType	sqlite\sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:
eCreate	sqlite\sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eCurType	sqlite\sqlite3.c	/^  u8 eCurType;            \/* One of the CURTYPE_* values above *\/$/;"	m	struct:VdbeCursor	file:
eDest	sqlite\sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:
eDetail	sqlite\sqlite3.c	/^  int eDetail;                    \/* Copy of Fts5Config.eDetail *\/$/;"	m	struct:Fts5Hash	file:
eDetail	sqlite\sqlite3.c	/^  int eDetail;                    \/* FTS5_DETAIL_XXX value *\/$/;"	m	struct:Fts5Config	file:
eDistinct	sqlite\sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values *\/$/;"	m	struct:WhereInfo	file:
eEndLoopOp	sqlite\sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon20::__anon21::InLoop	file:
eEvalmode	sqlite\sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFWErr	sqlite\sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFileLock	sqlite\sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	sqlite\sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	sqlite\sqlite3.c	/^  int eLock;                      \/* Most recent lock against this file *\/$/;"	m	struct:MemFile	file:
eLock	sqlite\sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	sqlite\sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eMatchOp	sqlite\sqlite3.c	/^  u8 eMatchOp;            \/* Op for vtab MATCH\/LIKE\/GLOB\/REGEXP terms *\/$/;"	m	struct:WhereTerm	file:
eOnePass	sqlite\sqlite3.c	/^  u8 eOnePass;              \/* ONEPASS_OFF, or _SINGLE, or _MULTI *\/$/;"	m	struct:WhereInfo	file:
eOperator	sqlite\sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	sqlite\sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eParentWithin	sqlite\sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
ePlan	sqlite\sqlite3.c	/^  int ePlan;                      \/* FTS5_PLAN_XXX value *\/$/;"	m	struct:Fts5Cursor	file:
ePragTyp	sqlite\sqlite3.c	/^  u8 ePragTyp;             \/* PragTyp_XXX value *\/$/;"	m	struct:PragmaName	file:
eSearch	sqlite\sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eStage	sqlite\sqlite3.c	/^  int eStage;                     \/* Value of RBU_STATE_STAGE field *\/$/;"	m	struct:sqlite3rbu	file:
eStage	sqlite\sqlite3.c	/^  int eStage;$/;"	m	struct:RbuState	file:
eState	sqlite\sqlite3.c	/^  int eState;                     \/* 0==closed, 1==open, 2==synced *\/$/;"	m	struct:Fts5TransactionState	file:
eState	sqlite\sqlite3.c	/^  int eState;                     \/* See above *\/$/;"	m	struct:PoslistCallbackCtx	file:
eState	sqlite\sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	sqlite\sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eSubtype	sqlite\sqlite3.c	/^  u8  eSubtype;       \/* Subtype for this value *\/$/;"	m	struct:sqlite3_value	file:
eTnctType	sqlite\sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	sqlite\sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	sqlite\sqlite3.c	/^  int eType;                      \/* FTS5_VOCAB_COL, ROW or INSTANCE *\/$/;"	m	struct:Fts5VocabTable	file:
eType	sqlite\sqlite3.c	/^  int eType;                      \/* Node type *\/$/;"	m	struct:Fts5ExprNode	file:
eType	sqlite\sqlite3.c	/^  int eType;                      \/* Table type - an RBU_PK_XXX value *\/$/;"	m	struct:RbuObjIter	file:
eType	sqlite\sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	sqlite\sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eType	sqlite\sqlite3.c	/^  u8 eType;                  \/* Type of top-level element *\/$/;"	m	struct:JsonEachCursor	file:
eType	sqlite\sqlite3.c	/^  u8 eType;              \/* One of the JSON_ type values *\/$/;"	m	struct:JsonNode	file:
eType	sqlite\sqlite3.c	/^  u8 eType;           \/* Transformation type code *\/$/;"	m	struct:__anon12	file:
eVal	sqlite\sqlite3.c	/^  int eVal;$/;"	m	struct:Fts5Enum	file:
eWithin	sqlite\sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eWithin	sqlite\sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:
ebcdicToAscii	sqlite\sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
editPage	sqlite\sqlite3.c	/^static int editPage($/;"	f	file:
enable_shared_cache	sqlite\sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	sqlite\sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	sqlite\sqlite3.c	14813;"	d	file:
enable_simulated_io_errors	sqlite\sqlite3.c	52971;"	d	file:
enc	sqlite\sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:sqlite3_value	file:
enc	sqlite\sqlite3.c	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3	file:
enc	sqlite\sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	sqlite\sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	sqlite\sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
endpoint	sqlite\sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enlargeAndAppend	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
enterMutex	sqlite\sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
eqSeen	sqlite\sqlite3.c	/^  u8 eqSeen;          \/* True if an equality comparison has been seen *\/$/;"	m	struct:UnpackedRecord	file:
errCode	sqlite\sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	sqlite\sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	sqlite\sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:
errMask	sqlite\sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	sqlite\sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	sqlite\sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	sqlite\sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	sqlite\sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	sqlite\sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	sqlite\sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errstr	sqlite\sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:
estLog	sqlite\sqlite3.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	sqlite\sqlite3.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	sqlite\sqlite3.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
estimatedCost	sqlite\sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedRows	sqlite\sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:
etBUFSIZE	sqlite\sqlite3.c	26414;"	d	file:
etByte	sqlite\sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	sqlite\sqlite3.c	26274;"	d	file:
etDECIMAL	sqlite\sqlite3.c	26284;"	d	file:
etDYNSTRING	sqlite\sqlite3.c	26272;"	d	file:
etEXP	sqlite\sqlite3.c	26268;"	d	file:
etFLOAT	sqlite\sqlite3.c	26267;"	d	file:
etGENERIC	sqlite\sqlite3.c	26269;"	d	file:
etINVALID	sqlite\sqlite3.c	26286;"	d	file:
etORDINAL	sqlite\sqlite3.c	26283;"	d	file:
etPERCENT	sqlite\sqlite3.c	26273;"	d	file:
etPOINTER	sqlite\sqlite3.c	26281;"	d	file:
etRADIX	sqlite\sqlite3.c	26266;"	d	file:
etSIZE	sqlite\sqlite3.c	26270;"	d	file:
etSQLESCAPE	sqlite\sqlite3.c	26276;"	d	file:
etSQLESCAPE2	sqlite\sqlite3.c	26277;"	d	file:
etSQLESCAPE3	sqlite\sqlite3.c	26282;"	d	file:
etSRCLIST	sqlite\sqlite3.c	26280;"	d	file:
etSTRING	sqlite\sqlite3.c	26271;"	d	file:
etTOKEN	sqlite\sqlite3.c	26279;"	d	file:
et_getdigit	sqlite\sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	sqlite\sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	sqlite\sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
exclMask	sqlite\sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	sqlite\sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	sqlite\sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	sqlite\sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	sqlite\sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	sqlite\sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execSql	sqlite\sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSqlF	sqlite\sqlite3.c	/^static int execSqlF(sqlite3 *db, char **pzErrMsg, const char *zSql, ...){$/;"	f	file:
expanded_sql	sqlite\sqlite3.c	/^  char *(*expanded_sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
expired	sqlite\sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
expired	sqlite\sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
explain	sqlite\sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	sqlite\sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	sqlite\sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	sqlite\sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	sqlite\sqlite3.c	121490;"	d	file:
explainIndexColumnName	sqlite\sqlite3.c	/^static const char *explainIndexColumnName(Index *pIdx, int i){$/;"	f	file:
explainIndexRange	sqlite\sqlite3.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop){$/;"	f	file:
explainSetInteger	sqlite\sqlite3.c	121448;"	d	file:
explainSetInteger	sqlite\sqlite3.c	121453;"	d	file:
explainSimpleCount	sqlite\sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	sqlite\sqlite3.c	125223;"	d	file:
explainTempTable	sqlite\sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	sqlite\sqlite3.c	121452;"	d	file:
expmask	sqlite\sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	sqlite\sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	sqlite\sqlite3.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	sqlite\sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeOrTerm	sqlite\sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	sqlite\sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCodeSubselect	sqlite\sqlite3.c	/^static int exprCodeSubselect(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprCodeVector	sqlite\sqlite3.c	/^static int exprCodeVector(Parse *pParse, Expr *p, int *piFreeable){$/;"	f	file:
exprCommute	sqlite\sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprCompareVariable	sqlite\sqlite3.c	/^static int exprCompareVariable(Parse *pParse, Expr *pVar, Expr *pExpr){$/;"	f	file:
exprDup	sqlite\sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int dupFlags, u8 **pzBuffer){$/;"	f	file:
exprINAffinity	sqlite\sqlite3.c	/^static char *exprINAffinity(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprIdxCover	sqlite\sqlite3.c	/^static int exprIdxCover(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprIsConst	sqlite\sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag, int iCur){$/;"	f	file:
exprIsDeterministic	sqlite\sqlite3.c	/^static int exprIsDeterministic(Expr *p){$/;"	f	file:
exprListDeleteNN	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void exprListDeleteNN(sqlite3 *db, ExprList *pList){$/;"	f	file:
exprMightBeIndexed	sqlite\sqlite3.c	/^static int exprMightBeIndexed($/;"	f	file:
exprMightBeIndexed2	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int exprMightBeIndexed2($/;"	f	file:
exprNodeIsConstant	sqlite\sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprNodeIsConstantOrGroupBy	sqlite\sqlite3.c	/^static int exprNodeIsConstantOrGroupBy(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprNodeIsDeterministic	sqlite\sqlite3.c	/^static int exprNodeIsDeterministic(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprProbability	sqlite\sqlite3.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectUsage	sqlite\sqlite3.c	/^static Bitmask exprSelectUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	sqlite\sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	sqlite\sqlite3.c	94739;"	d	file:
exprSrcCount	sqlite\sqlite3.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	sqlite\sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	sqlite\sqlite3.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	sqlite\sqlite3.c	/^static Expr *exprTableRegister($/;"	f	file:
exprToRegister	sqlite\sqlite3.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
exprToString	sqlite\sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprVectorRegister	sqlite\sqlite3.c	/^static int exprVectorRegister($/;"	f	file:
extended_errcode	sqlite\sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	sqlite\sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
extraSync	sqlite\sqlite3.c	/^  u8 extraSync;               \/* sync directory after journal delete *\/$/;"	m	struct:Pager	file:
f	sqlite\sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:
fcntlSizeHint	sqlite\sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	sqlite\sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	sqlite\sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	sqlite\sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fdatasync	sqlite\sqlite3.c	34696;"	d	file:
fetchPayload	sqlite\sqlite3.c	/^static const void *fetchPayload($/;"	f	file:
fg	sqlite\sqlite3.c	/^    } fg;$/;"	m	struct:SrcList::SrcList_item	typeref:struct:SrcList::SrcList_item::__anon7	file:
file	sqlite\sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	sqlite\sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileChunkSize	sqlite\sqlite3.c	91909;"	d	file:
fileHasMoved	sqlite\sqlite3.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	sqlite\sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	sqlite\sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	sqlite\sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
fillInCell	sqlite\sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	sqlite\sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	sqlite\sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalDbSize	sqlite\sqlite3.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	sqlite\sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	sqlite\sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	sqlite\sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	sqlite\sqlite3.c	62664;"	d	file:
findCellPastPtr	sqlite\sqlite3.c	62666;"	d	file:
findCollSeqEntry	sqlite\sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	sqlite\sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	sqlite\sqlite3.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	sqlite\sqlite3.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	sqlite\sqlite3.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	sqlite\sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	sqlite\sqlite3.c	/^static int findLeafNode($/;"	f	file:
findNextHostParameter	sqlite\sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findReusableFd	sqlite\sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	sqlite\sqlite3.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
finder_type	sqlite\sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	sqlite\sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	sqlite\sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	sqlite\sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	sqlite\sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	sqlite\sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	sqlite\sqlite3.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	sqlite\sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	sqlite\sqlite3.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	sqlite\sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	sqlite\sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	sqlite\sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flag	sqlite\sqlite3.c	/^  char flag;$/;"	m	struct:MatchInfo	file:
flags	sqlite\sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	sqlite\sqlite3.c	/^  int flags;                      \/* Mask of configuration flags *\/$/;"	m	struct:Fts5SegIter	file:
flags	sqlite\sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:MemJournal	file:
flags	sqlite\sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	sqlite\sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	sqlite\sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	sqlite\sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:sqlite3_value	file:
flags	sqlite\sqlite3.c	/^  u32 flags;                    \/* flags settable by pragmas. See below *\/$/;"	m	struct:sqlite3	file:
flags	sqlite\sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	sqlite\sqlite3.c	/^  u8 flags;                       \/* Copy of flags byte *\/$/;"	m	struct:StatPage	file:
flattenSubquery	sqlite\sqlite3.c	/^static int flattenSubquery($/;"	f	file:
float	sqlite\sqlite3.c	13079;"	d	file:
floatSwap	sqlite\sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	sqlite\sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	sqlite\sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	sqlite\sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	sqlite\sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	sqlite\sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	sqlite\sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	sqlite\sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	sqlite\sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	sqlite\sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	sqlite\sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	sqlite\sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freeP4FuncCtx	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void freeP4FuncCtx(sqlite3 *db, sqlite3_context *p){$/;"	f	file:
freeP4Mem	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void freeP4Mem(sqlite3 *db, Mem *p){$/;"	f	file:
freePage	sqlite\sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	sqlite\sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	sqlite\sqlite3.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	sqlite\sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	sqlite\sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	sqlite\sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	sqlite\sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	sqlite\sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	sqlite\sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	sqlite\sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	sqlite\sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	sqlite\sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	sqlite\sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	sqlite\sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	sqlite\sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	sqlite\sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3ClearCursor	sqlite\sqlite3.c	/^static void fts3ClearCursor(Fts3Cursor *pCsr){$/;"	f	file:
fts3CloseMethod	sqlite\sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	sqlite\sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	sqlite\sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	sqlite\sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	sqlite\sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	sqlite\sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	sqlite\sqlite3.c	/^static int SQLITE_CDECL fts3CompareElemByTerm($/;"	f	file:
fts3ConnectMethod	sqlite\sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	sqlite\sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	sqlite\sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	sqlite\sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorFinalizeStmt	sqlite\sqlite3.c	/^static void fts3CursorFinalizeStmt(Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeek	sqlite\sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	sqlite\sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr){$/;"	f	file:
fts3DatabasePageSize	sqlite\sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	sqlite\sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	sqlite\sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	sqlite\sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	sqlite\sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	sqlite\sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	sqlite\sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	sqlite\sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	sqlite\sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	sqlite\sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	sqlite\sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	sqlite\sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	sqlite\sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	sqlite\sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	sqlite\sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	sqlite\sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DocidRange	sqlite\sqlite3.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts3DoclistCountDocids	sqlite\sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	sqlite\sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	sqlite\sqlite3.c	/^static int fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	sqlite\sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	sqlite\sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	sqlite\sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	sqlite\sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	sqlite\sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDlPhraseNext	sqlite\sqlite3.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:
fts3EvalGatherStats	sqlite\sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalIncrPhraseNext	sqlite\sqlite3.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:
fts3EvalInvalidatePoslist	sqlite\sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	sqlite\sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	sqlite\sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	sqlite\sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	sqlite\sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	sqlite\sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	sqlite\sqlite3.c	/^static int fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	sqlite\sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	sqlite\sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	sqlite\sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	sqlite\sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	sqlite\sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	sqlite\sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestExpr	sqlite\sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	sqlite\sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	sqlite\sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprBalance	sqlite\sqlite3.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:
fts3ExprCheckDepth	sqlite\sqlite3.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:
fts3ExprGlobalHitsCb	sqlite\sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	sqlite\sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	sqlite\sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLHitGather	sqlite\sqlite3.c	/^static void fts3ExprLHitGather($/;"	f	file:
fts3ExprLHits	sqlite\sqlite3.c	/^static void fts3ExprLHits($/;"	f	file:
fts3ExprLoadDoclists	sqlite\sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	sqlite\sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	sqlite\sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	sqlite\sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprParseUnbalanced	sqlite\sqlite3.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:
fts3ExprPhraseCount	sqlite\sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	sqlite\sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	sqlite\sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	sqlite\sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	sqlite\sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	sqlite\sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	sqlite\sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FreeExprNode	sqlite\sqlite3.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:
fts3FunctionArg	sqlite\sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	sqlite\sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	sqlite\sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	sqlite\sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	sqlite\sqlite3.c	/^static void fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	sqlite\sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GetVarint32	sqlite\sqlite3.c	150764;"	d	file:
fts3Getint	sqlite\sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	sqlite\sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	sqlite\sqlite3.c	150233;"	d	file:
fts3HashCount	sqlite\sqlite3.c	150257;"	d	file:
fts3HashData	sqlite\sqlite3.c	150250;"	d	file:
fts3HashFind	sqlite\sqlite3.c	150232;"	d	file:
fts3HashFindElem	sqlite\sqlite3.c	150234;"	d	file:
fts3HashFirst	sqlite\sqlite3.c	150248;"	d	file:
fts3HashFree	sqlite\sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	sqlite\sqlite3.c	150230;"	d	file:
fts3HashInsert	sqlite\sqlite3.c	150231;"	d	file:
fts3HashInsertElement	sqlite\sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	sqlite\sqlite3.c	150251;"	d	file:
fts3HashKeysize	sqlite\sqlite3.c	150252;"	d	file:
fts3HashMalloc	sqlite\sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	sqlite\sqlite3.c	150249;"	d	file:
fts3IncrmergeAppend	sqlite\sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	sqlite\sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	sqlite\sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	sqlite\sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	sqlite\sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	sqlite\sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	sqlite\sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	sqlite\sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	sqlite\sqlite3.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:
fts3IncrmergePush	sqlite\sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	sqlite\sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	sqlite\sqlite3.c	/^static int fts3IncrmergeWriter( $/;"	f	file:
fts3InitVtab	sqlite\sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	sqlite\sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	sqlite\sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	sqlite\sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	sqlite\sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	sqlite\sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	sqlite\sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	sqlite\sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	sqlite\sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	sqlite\sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3LogMerge	sqlite\sqlite3.c	160726;"	d	file:
fts3MIBufferAlloc	sqlite\sqlite3.c	/^static void (*fts3MIBufferAlloc(MatchinfoBuffer *p, u32 **paOut))(void*){$/;"	f	file:
fts3MIBufferFree	sqlite\sqlite3.c	/^static void fts3MIBufferFree(void *p){$/;"	f	file:
fts3MIBufferNew	sqlite\sqlite3.c	/^static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){$/;"	f	file:
fts3MIBufferSetGlobal	sqlite\sqlite3.c	/^static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){$/;"	f	file:
fts3MallocZero	sqlite\sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	sqlite\sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	sqlite\sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	sqlite\sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	sqlite\sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	sqlite\sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	sqlite\sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	sqlite\sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	sqlite\sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	sqlite\sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	sqlite\sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	sqlite\sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	sqlite\sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	sqlite\sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	sqlite\sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	sqlite\sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	sqlite\sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	sqlite\sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	sqlite\sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	sqlite\sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	sqlite\sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	sqlite\sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	sqlite\sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	sqlite\sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	sqlite\sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	sqlite\sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	sqlite\sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	sqlite\sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	sqlite\sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PromoteSegments	sqlite\sqlite3.c	/^static int fts3PromoteSegments($/;"	f	file:
fts3PutColNumber	sqlite\sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	sqlite\sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	sqlite\sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	sqlite\sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadEndBlockField	sqlite\sqlite3.c	/^static void fts3ReadEndBlockField($/;"	f	file:
fts3ReadExprList	sqlite\sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	sqlite\sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	sqlite\sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	sqlite\sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	sqlite\sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	sqlite\sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	sqlite\sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	sqlite\sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	sqlite\sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	sqlite\sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	sqlite\sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	sqlite\sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	sqlite\sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	sqlite\sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	sqlite\sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	sqlite\sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	sqlite\sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	sqlite\sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	sqlite\sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	sqlite\sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	sqlite\sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	sqlite\sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	sqlite\sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	sqlite\sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	sqlite\sqlite3.c	160811;"	d	file:
fts3SegReaderIsRootOnly	sqlite\sqlite3.c	160812;"	d	file:
fts3SegReaderNext	sqlite\sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	sqlite\sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	sqlite\sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	sqlite\sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	sqlite\sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	sqlite\sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	sqlite\sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	sqlite\sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	sqlite\sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	sqlite\sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentIsMaxLevel	sqlite\sqlite3.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:
fts3SegmentMaxLevel	sqlite\sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	sqlite\sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	sqlite\sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	sqlite\sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SetEstimatedRows	sqlite\sqlite3.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
fts3SetHasStat	sqlite\sqlite3.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:
fts3SetUniqueFlag	sqlite\sqlite3.c	/^static void fts3SetUniqueFlag(sqlite3_index_info *pIdxInfo){$/;"	f	file:
fts3SnippetAdvance	sqlite\sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	sqlite\sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	sqlite\sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	sqlite\sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	sqlite\sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	sqlite\sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	sqlite\sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	sqlite\sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	sqlite\sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	sqlite\sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	sqlite\sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	sqlite\sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	sqlite\sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	sqlite\sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	sqlite\sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	sqlite\sqlite3.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	sqlite\sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	sqlite\sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	sqlite\sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	sqlite\sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TokenizerEnabled	sqlite\sqlite3.c	/^static int fts3TokenizerEnabled(sqlite3_context *context){$/;"	f	file:
fts3TokenizerFunc	sqlite\sqlite3.c	/^static void fts3TokenizerFunc($/;"	f	file:
fts3TreeFinishNode	sqlite\sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	sqlite\sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	sqlite\sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	sqlite\sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	sqlite\sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	sqlite\sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	sqlite\sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	sqlite\sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3Writelock	sqlite\sqlite3.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:
fts3_isalnum	sqlite\sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	sqlite\sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	sqlite\sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	sqlite\sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	sqlite\sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	sqlite\sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	sqlite\sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	sqlite\sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	sqlite\sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	sqlite\sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	sqlite\sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	sqlite\sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	sqlite\sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
fts3tokBestIndexMethod	sqlite\sqlite3.c	/^static int fts3tokBestIndexMethod($/;"	f	file:
fts3tokCloseMethod	sqlite\sqlite3.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokColumnMethod	sqlite\sqlite3.c	/^static int fts3tokColumnMethod($/;"	f	file:
fts3tokConnectMethod	sqlite\sqlite3.c	/^static int fts3tokConnectMethod($/;"	f	file:
fts3tokDequoteArray	sqlite\sqlite3.c	/^static int fts3tokDequoteArray($/;"	f	file:
fts3tokDisconnectMethod	sqlite\sqlite3.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3tokEofMethod	sqlite\sqlite3.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokFilterMethod	sqlite\sqlite3.c	/^static int fts3tokFilterMethod($/;"	f	file:
fts3tokNextMethod	sqlite\sqlite3.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokOpenMethod	sqlite\sqlite3.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3tokQueryTokenizer	sqlite\sqlite3.c	/^static int fts3tokQueryTokenizer($/;"	f	file:
fts3tokResetCursor	sqlite\sqlite3.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:
fts3tokRowidMethod	sqlite\sqlite3.c	/^static int fts3tokRowidMethod($/;"	f	file:
fts5AllocateSegid	sqlite\sqlite3.c	/^static int fts5AllocateSegid(Fts5Index *p, Fts5Structure *pStruct){$/;"	f	file:
fts5ApiCallback	sqlite\sqlite3.c	/^static void fts5ApiCallback($/;"	f	file:
fts5ApiColumnCount	sqlite\sqlite3.c	/^static int fts5ApiColumnCount(Fts5Context *pCtx){$/;"	f	file:
fts5ApiColumnSize	sqlite\sqlite3.c	/^static int fts5ApiColumnSize(Fts5Context *pCtx, int iCol, int *pnToken){$/;"	f	file:
fts5ApiColumnText	sqlite\sqlite3.c	/^static int fts5ApiColumnText($/;"	f	file:
fts5ApiColumnTotalSize	sqlite\sqlite3.c	/^static int fts5ApiColumnTotalSize($/;"	f	file:
fts5ApiGetAuxdata	sqlite\sqlite3.c	/^static void *fts5ApiGetAuxdata(Fts5Context *pCtx, int bClear){$/;"	f	file:
fts5ApiInst	sqlite\sqlite3.c	/^static int fts5ApiInst($/;"	f	file:
fts5ApiInstCount	sqlite\sqlite3.c	/^static int fts5ApiInstCount(Fts5Context *pCtx, int *pnInst){$/;"	f	file:
fts5ApiInvoke	sqlite\sqlite3.c	/^static void fts5ApiInvoke($/;"	f	file:
fts5ApiPhraseCount	sqlite\sqlite3.c	/^static int fts5ApiPhraseCount(Fts5Context *pCtx){$/;"	f	file:
fts5ApiPhraseFirst	sqlite\sqlite3.c	/^static int fts5ApiPhraseFirst($/;"	f	file:
fts5ApiPhraseFirstColumn	sqlite\sqlite3.c	/^static int fts5ApiPhraseFirstColumn($/;"	f	file:
fts5ApiPhraseNext	sqlite\sqlite3.c	/^static void fts5ApiPhraseNext($/;"	f	file:
fts5ApiPhraseNextColumn	sqlite\sqlite3.c	/^static void fts5ApiPhraseNextColumn($/;"	f	file:
fts5ApiPhraseSize	sqlite\sqlite3.c	/^static int fts5ApiPhraseSize(Fts5Context *pCtx, int iPhrase){$/;"	f	file:
fts5ApiQueryPhrase	sqlite\sqlite3.c	/^static int fts5ApiQueryPhrase($/;"	f	file:
fts5ApiRowCount	sqlite\sqlite3.c	/^static int fts5ApiRowCount(Fts5Context *pCtx, i64 *pnRow){$/;"	f	file:
fts5ApiRowid	sqlite\sqlite3.c	/^static sqlite3_int64 fts5ApiRowid(Fts5Context *pCtx){$/;"	f	file:
fts5ApiSetAuxdata	sqlite\sqlite3.c	/^static int fts5ApiSetAuxdata($/;"	f	file:
fts5ApiTokenize	sqlite\sqlite3.c	/^static int fts5ApiTokenize($/;"	f	file:
fts5ApiUserData	sqlite\sqlite3.c	/^static void *fts5ApiUserData(Fts5Context *pCtx){$/;"	f	file:
fts5AppendPoslist	sqlite\sqlite3.c	/^static void fts5AppendPoslist($/;"	f	file:
fts5AppendRowid	sqlite\sqlite3.c	/^static void fts5AppendRowid($/;"	f	file:
fts5AsciiAddExceptions	sqlite\sqlite3.c	/^static void fts5AsciiAddExceptions($/;"	f	file:
fts5AsciiCreate	sqlite\sqlite3.c	/^static int fts5AsciiCreate($/;"	f	file:
fts5AsciiDelete	sqlite\sqlite3.c	/^static void fts5AsciiDelete(Fts5Tokenizer *p){$/;"	f	file:
fts5AsciiTokenize	sqlite\sqlite3.c	/^static int fts5AsciiTokenize($/;"	f	file:
fts5AssertComparisonResult	sqlite\sqlite3.c	/^static void fts5AssertComparisonResult($/;"	f	file:
fts5AssertMultiIterSetup	sqlite\sqlite3.c	/^static void fts5AssertMultiIterSetup(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5AssertMultiIterSetup	sqlite\sqlite3.c	199108;"	d	file:
fts5BeginMethod	sqlite\sqlite3.c	/^static int fts5BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5BestIndexMethod	sqlite\sqlite3.c	/^static int fts5BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts5Bm25Function	sqlite\sqlite3.c	/^static void fts5Bm25Function($/;"	f	file:
fts5Bm25GetData	sqlite\sqlite3.c	/^static int fts5Bm25GetData($/;"	f	file:
fts5BufferAppendBlob	sqlite\sqlite3.c	189129;"	d	file:
fts5BufferAppendVarint	sqlite\sqlite3.c	189127;"	d	file:
fts5BufferCompare	sqlite\sqlite3.c	/^static int fts5BufferCompare(Fts5Buffer *pLeft, Fts5Buffer *pRight){$/;"	f	file:
fts5BufferCompareBlob	sqlite\sqlite3.c	/^static int fts5BufferCompareBlob($/;"	f	file:
fts5BufferFree	sqlite\sqlite3.c	189128;"	d	file:
fts5BufferGrow	sqlite\sqlite3.c	189132;"	d	file:
fts5BufferSafeAppendBlob	sqlite\sqlite3.c	197619;"	d	file:
fts5BufferSafeAppendVarint	sqlite\sqlite3.c	197625;"	d	file:
fts5BufferSet	sqlite\sqlite3.c	189130;"	d	file:
fts5BufferSwap	sqlite\sqlite3.c	/^static void fts5BufferSwap(Fts5Buffer *p1, Fts5Buffer *p2){$/;"	f	file:
fts5BufferZero	sqlite\sqlite3.c	189126;"	d	file:
fts5CInstIterInit	sqlite\sqlite3.c	/^static int fts5CInstIterInit($/;"	f	file:
fts5CInstIterNext	sqlite\sqlite3.c	/^static int fts5CInstIterNext(CInstIter *pIter){$/;"	f	file:
fts5CacheInstArray	sqlite\sqlite3.c	/^static int fts5CacheInstArray(Fts5Cursor *pCsr){$/;"	f	file:
fts5CheckTransactionState	sqlite\sqlite3.c	/^static void fts5CheckTransactionState(Fts5Table *p, int op, int iSavepoint){$/;"	f	file:
fts5CheckTransactionState	sqlite\sqlite3.c	203330;"	d	file:
fts5ChunkIterate	sqlite\sqlite3.c	/^static void fts5ChunkIterate($/;"	f	file:
fts5CloneColset	sqlite\sqlite3.c	/^static Fts5Colset *fts5CloneColset(int *pRc, Fts5Colset *pOrig){$/;"	f	file:
fts5CloseMethod	sqlite\sqlite3.c	/^static int fts5CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5CloseReader	sqlite\sqlite3.c	/^static void fts5CloseReader(Fts5Index *p){$/;"	f	file:
fts5ColumnMethod	sqlite\sqlite3.c	/^static int fts5ColumnMethod($/;"	f	file:
fts5ColumnSizeCb	sqlite\sqlite3.c	/^static int fts5ColumnSizeCb($/;"	f	file:
fts5CommitMethod	sqlite\sqlite3.c	/^static int fts5CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5ConfigDefaultTokenizer	sqlite\sqlite3.c	/^static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){$/;"	f	file:
fts5ConfigGobbleWord	sqlite\sqlite3.c	/^static const char *fts5ConfigGobbleWord($/;"	f	file:
fts5ConfigMakeExprlist	sqlite\sqlite3.c	/^static int fts5ConfigMakeExprlist(Fts5Config *p){$/;"	f	file:
fts5ConfigParseColumn	sqlite\sqlite3.c	/^static int fts5ConfigParseColumn($/;"	f	file:
fts5ConfigParseSpecial	sqlite\sqlite3.c	/^static int fts5ConfigParseSpecial($/;"	f	file:
fts5ConfigSetEnum	sqlite\sqlite3.c	/^static int fts5ConfigSetEnum($/;"	f	file:
fts5ConfigSkipArgs	sqlite\sqlite3.c	/^static const char *fts5ConfigSkipArgs(const char *pIn){$/;"	f	file:
fts5ConfigSkipBareword	sqlite\sqlite3.c	/^static const char *fts5ConfigSkipBareword(const char *pIn){$/;"	f	file:
fts5ConfigSkipLiteral	sqlite\sqlite3.c	/^static const char *fts5ConfigSkipLiteral(const char *pIn){$/;"	f	file:
fts5ConfigSkipWhitespace	sqlite\sqlite3.c	/^static const char *fts5ConfigSkipWhitespace(const char *pIn){$/;"	f	file:
fts5ConnectMethod	sqlite\sqlite3.c	/^static int fts5ConnectMethod($/;"	f	file:
fts5CountCb	sqlite\sqlite3.c	/^static int fts5CountCb($/;"	f	file:
fts5CreateAux	sqlite\sqlite3.c	/^static int fts5CreateAux($/;"	f	file:
fts5CreateMethod	sqlite\sqlite3.c	/^static int fts5CreateMethod($/;"	f	file:
fts5CreateTokenizer	sqlite\sqlite3.c	/^static int fts5CreateTokenizer($/;"	f	file:
fts5CsrNewrow	sqlite\sqlite3.c	/^static void fts5CsrNewrow(Fts5Cursor *pCsr){$/;"	f	file:
fts5CsrPoslist	sqlite\sqlite3.c	/^static int fts5CsrPoslist($/;"	f	file:
fts5CursorFirst	sqlite\sqlite3.c	/^static int fts5CursorFirst(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){$/;"	f	file:
fts5CursorFirstSorted	sqlite\sqlite3.c	/^static int fts5CursorFirstSorted(Fts5Table *pTab, Fts5Cursor *pCsr, int bDesc){$/;"	f	file:
fts5CursorFromCsrid	sqlite\sqlite3.c	/^static Fts5Cursor *fts5CursorFromCsrid(Fts5Global *pGlobal, i64 iCsrId){$/;"	f	file:
fts5CursorParseRank	sqlite\sqlite3.c	/^static int fts5CursorParseRank($/;"	f	file:
fts5CursorReseek	sqlite\sqlite3.c	/^static int fts5CursorReseek(Fts5Cursor *pCsr, int *pbSkip){$/;"	f	file:
fts5CursorRowid	sqlite\sqlite3.c	/^static i64 fts5CursorRowid(Fts5Cursor *pCsr){$/;"	f	file:
fts5DataDelete	sqlite\sqlite3.c	/^static void fts5DataDelete(Fts5Index *p, i64 iFirst, i64 iLast){$/;"	f	file:
fts5DataRead	sqlite\sqlite3.c	/^static Fts5Data *fts5DataRead(Fts5Index *p, i64 iRowid){$/;"	f	file:
fts5DataRelease	sqlite\sqlite3.c	/^static void fts5DataRelease(Fts5Data *pData){$/;"	f	file:
fts5DataRemoveSegment	sqlite\sqlite3.c	/^static void fts5DataRemoveSegment(Fts5Index *p, int iSegid){$/;"	f	file:
fts5DataWrite	sqlite\sqlite3.c	/^static void fts5DataWrite(Fts5Index *p, i64 iRowid, const u8 *pData, int nData){$/;"	f	file:
fts5DebugRowid	sqlite\sqlite3.c	/^static void fts5DebugRowid(int *pRc, Fts5Buffer *pBuf, i64 iKey){$/;"	f	file:
fts5DebugStructure	sqlite\sqlite3.c	/^static void fts5DebugStructure($/;"	f	file:
fts5DecodeAverages	sqlite\sqlite3.c	/^static void fts5DecodeAverages($/;"	f	file:
fts5DecodeDoclist	sqlite\sqlite3.c	/^static int fts5DecodeDoclist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){$/;"	f	file:
fts5DecodeFunction	sqlite\sqlite3.c	/^static void fts5DecodeFunction($/;"	f	file:
fts5DecodePoslist	sqlite\sqlite3.c	/^static int fts5DecodePoslist(int *pRc, Fts5Buffer *pBuf, const u8 *a, int n){$/;"	f	file:
fts5DecodeRowid	sqlite\sqlite3.c	/^static void fts5DecodeRowid($/;"	f	file:
fts5DecodeRowidList	sqlite\sqlite3.c	/^static void fts5DecodeRowidList($/;"	f	file:
fts5DecodeStructure	sqlite\sqlite3.c	/^static void fts5DecodeStructure($/;"	f	file:
fts5Dequote	sqlite\sqlite3.c	/^static int fts5Dequote(char *z){$/;"	f	file:
fts5DestroyMethod	sqlite\sqlite3.c	/^static int fts5DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5DisconnectMethod	sqlite\sqlite3.c	/^static int fts5DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5DlidxExtractFirstRowid	sqlite\sqlite3.c	/^static i64 fts5DlidxExtractFirstRowid(Fts5Buffer *pBuf){$/;"	f	file:
fts5DlidxIterEof	sqlite\sqlite3.c	/^static int fts5DlidxIterEof(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterFirst	sqlite\sqlite3.c	/^static int fts5DlidxIterFirst(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterFree	sqlite\sqlite3.c	/^static void fts5DlidxIterFree(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterInit	sqlite\sqlite3.c	/^static Fts5DlidxIter *fts5DlidxIterInit($/;"	f	file:
fts5DlidxIterLast	sqlite\sqlite3.c	/^static void fts5DlidxIterLast(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterNext	sqlite\sqlite3.c	/^static int fts5DlidxIterNext(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterNextR	sqlite\sqlite3.c	/^static int fts5DlidxIterNextR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){$/;"	f	file:
fts5DlidxIterPgno	sqlite\sqlite3.c	/^static int fts5DlidxIterPgno(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterPrev	sqlite\sqlite3.c	/^static int fts5DlidxIterPrev(Fts5Index *p, Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxIterPrevR	sqlite\sqlite3.c	/^static int fts5DlidxIterPrevR(Fts5Index *p, Fts5DlidxIter *pIter, int iLvl){$/;"	f	file:
fts5DlidxIterRowid	sqlite\sqlite3.c	/^static i64 fts5DlidxIterRowid(Fts5DlidxIter *pIter){$/;"	f	file:
fts5DlidxLvlNext	sqlite\sqlite3.c	/^static int fts5DlidxLvlNext(Fts5DlidxLvl *pLvl){$/;"	f	file:
fts5DlidxLvlPrev	sqlite\sqlite3.c	/^static int fts5DlidxLvlPrev(Fts5DlidxLvl *pLvl){$/;"	f	file:
fts5DoclistIterInit	sqlite\sqlite3.c	/^static void fts5DoclistIterInit($/;"	f	file:
fts5DoclistIterNext	sqlite\sqlite3.c	/^static void fts5DoclistIterNext(Fts5DoclistIter *pIter){$/;"	f	file:
fts5EntryKey	sqlite\sqlite3.c	196062;"	d	file:
fts5EofMethod	sqlite\sqlite3.c	/^static int fts5EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5ExecPrintf	sqlite\sqlite3.c	/^static int fts5ExecPrintf($/;"	f	file:
fts5ExprAddChildren	sqlite\sqlite3.c	/^static void fts5ExprAddChildren(Fts5ExprNode *p, Fts5ExprNode *pSub){$/;"	f	file:
fts5ExprAdvanceto	sqlite\sqlite3.c	/^static int fts5ExprAdvanceto($/;"	f	file:
fts5ExprAssignXNext	sqlite\sqlite3.c	/^static void fts5ExprAssignXNext(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprCheckPoslists	sqlite\sqlite3.c	/^static int fts5ExprCheckPoslists(Fts5ExprNode *pNode, i64 iRowid){$/;"	f	file:
fts5ExprClearPoslists	sqlite\sqlite3.c	/^static void fts5ExprClearPoslists(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprColsetTest	sqlite\sqlite3.c	/^static int fts5ExprColsetTest(Fts5Colset *pColset, int iCol){$/;"	f	file:
fts5ExprFold	sqlite\sqlite3.c	/^static void fts5ExprFold($/;"	f	file:
fts5ExprFunction	sqlite\sqlite3.c	/^static void fts5ExprFunction($/;"	f	file:
fts5ExprFunctionHr	sqlite\sqlite3.c	/^static void fts5ExprFunctionHr($/;"	f	file:
fts5ExprFunctionTcl	sqlite\sqlite3.c	/^static void fts5ExprFunctionTcl($/;"	f	file:
fts5ExprGetToken	sqlite\sqlite3.c	/^static int fts5ExprGetToken($/;"	f	file:
fts5ExprIsAlnum	sqlite\sqlite3.c	/^static void fts5ExprIsAlnum($/;"	f	file:
fts5ExprIsspace	sqlite\sqlite3.c	/^static int fts5ExprIsspace(char t){$/;"	f	file:
fts5ExprNearInitAll	sqlite\sqlite3.c	/^static int fts5ExprNearInitAll($/;"	f	file:
fts5ExprNearIsMatch	sqlite\sqlite3.c	/^static int fts5ExprNearIsMatch(int *pRc, Fts5ExprNearset *pNear){$/;"	f	file:
fts5ExprNearTest	sqlite\sqlite3.c	/^static int fts5ExprNearTest($/;"	f	file:
fts5ExprNodeFirst	sqlite\sqlite3.c	/^static int fts5ExprNodeFirst(Fts5Expr *pExpr, Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprNodeNext	sqlite\sqlite3.c	193223;"	d	file:
fts5ExprNodeNext_AND	sqlite\sqlite3.c	/^static int fts5ExprNodeNext_AND($/;"	f	file:
fts5ExprNodeNext_NOT	sqlite\sqlite3.c	/^static int fts5ExprNodeNext_NOT($/;"	f	file:
fts5ExprNodeNext_OR	sqlite\sqlite3.c	/^static int fts5ExprNodeNext_OR($/;"	f	file:
fts5ExprNodeNext_STRING	sqlite\sqlite3.c	/^static int fts5ExprNodeNext_STRING($/;"	f	file:
fts5ExprNodeNext_TERM	sqlite\sqlite3.c	/^static int fts5ExprNodeNext_TERM($/;"	f	file:
fts5ExprNodeTest	sqlite\sqlite3.c	/^static int fts5ExprNodeTest($/;"	f	file:
fts5ExprNodeTest_AND	sqlite\sqlite3.c	/^static int fts5ExprNodeTest_AND($/;"	f	file:
fts5ExprNodeTest_NOT	sqlite\sqlite3.c	/^static int fts5ExprNodeTest_NOT($/;"	f	file:
fts5ExprNodeTest_OR	sqlite\sqlite3.c	/^static void fts5ExprNodeTest_OR($/;"	f	file:
fts5ExprNodeTest_STRING	sqlite\sqlite3.c	/^static int fts5ExprNodeTest_STRING($/;"	f	file:
fts5ExprNodeTest_TERM	sqlite\sqlite3.c	/^static int fts5ExprNodeTest_TERM($/;"	f	file:
fts5ExprNodeZeroPoslist	sqlite\sqlite3.c	/^static void fts5ExprNodeZeroPoslist(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprPhraseFree	sqlite\sqlite3.c	/^static void fts5ExprPhraseFree(Fts5ExprPhrase *pPhrase){$/;"	f	file:
fts5ExprPhraseIsMatch	sqlite\sqlite3.c	/^static int fts5ExprPhraseIsMatch($/;"	f	file:
fts5ExprPopulatePoslistsCb	sqlite\sqlite3.c	/^static int fts5ExprPopulatePoslistsCb($/;"	f	file:
fts5ExprPrint	sqlite\sqlite3.c	/^static char *fts5ExprPrint(Fts5Config *pConfig, Fts5ExprNode *pExpr){$/;"	f	file:
fts5ExprPrintTcl	sqlite\sqlite3.c	/^static char *fts5ExprPrintTcl($/;"	f	file:
fts5ExprSetEof	sqlite\sqlite3.c	/^static void fts5ExprSetEof(Fts5ExprNode *pNode){$/;"	f	file:
fts5ExprSynonymAdvanceto	sqlite\sqlite3.c	/^static int fts5ExprSynonymAdvanceto($/;"	f	file:
fts5ExprSynonymList	sqlite\sqlite3.c	/^static int fts5ExprSynonymList($/;"	f	file:
fts5ExprSynonymRowid	sqlite\sqlite3.c	/^static i64 fts5ExprSynonymRowid(Fts5ExprTerm *pTerm, int bDesc, int *pbEof){$/;"	f	file:
fts5ExprTermPrint	sqlite\sqlite3.c	/^static char *fts5ExprTermPrint(Fts5ExprTerm *pTerm){$/;"	f	file:
fts5FastGetVarint32	sqlite\sqlite3.c	189373;"	d	file:
fts5FilterMethod	sqlite\sqlite3.c	/^static int fts5FilterMethod($/;"	f	file:
fts5FindAuxiliary	sqlite\sqlite3.c	/^static Fts5Auxiliary *fts5FindAuxiliary(Fts5Table *pTab, const char *zName){$/;"	f	file:
fts5FindFunctionMethod	sqlite\sqlite3.c	/^static int fts5FindFunctionMethod($/;"	f	file:
fts5FindRankFunction	sqlite\sqlite3.c	/^static int fts5FindRankFunction(Fts5Cursor *pCsr){$/;"	f	file:
fts5FindTokenizer	sqlite\sqlite3.c	/^static int fts5FindTokenizer($/;"	f	file:
fts5FlushOneHash	sqlite\sqlite3.c	/^static void fts5FlushOneHash(Fts5Index *p){$/;"	f	file:
fts5FreeCursorComponents	sqlite\sqlite3.c	/^static void fts5FreeCursorComponents(Fts5Cursor *pCsr){$/;"	f	file:
fts5FreeVtab	sqlite\sqlite3.c	/^static void fts5FreeVtab(Fts5Table *pTab){$/;"	f	file:
fts5Fts5Func	sqlite\sqlite3.c	/^static void fts5Fts5Func($/;"	f	file:
fts5GetPoslistSize	sqlite\sqlite3.c	/^static int fts5GetPoslistSize(const u8 *p, int *pnSz, int *pbDel){$/;"	f	file:
fts5GetRowidLimit	sqlite\sqlite3.c	/^static i64 fts5GetRowidLimit(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts5GetU16	sqlite\sqlite3.c	/^static u16 fts5GetU16(const u8 *aIn){$/;"	f	file:
fts5GetVarint	sqlite\sqlite3.c	189371;"	d	file:
fts5GetVarint32	sqlite\sqlite3.c	189370;"	d	file:
fts5HashAddPoslistSize	sqlite\sqlite3.c	/^static void fts5HashAddPoslistSize(Fts5Hash *pHash, Fts5HashEntry *p){$/;"	f	file:
fts5HashEntryMerge	sqlite\sqlite3.c	/^static Fts5HashEntry *fts5HashEntryMerge($/;"	f	file:
fts5HashEntrySort	sqlite\sqlite3.c	/^static int fts5HashEntrySort($/;"	f	file:
fts5HashKey	sqlite\sqlite3.c	/^static unsigned int fts5HashKey(int nSlot, const u8 *p, int n){$/;"	f	file:
fts5HashKey2	sqlite\sqlite3.c	/^static unsigned int fts5HashKey2(int nSlot, u8 b, const u8 *p, int n){$/;"	f	file:
fts5HashResize	sqlite\sqlite3.c	/^static int fts5HashResize(Fts5Hash *pHash){$/;"	f	file:
fts5HighlightAppend	sqlite\sqlite3.c	/^static void fts5HighlightAppend($/;"	f	file:
fts5HighlightCb	sqlite\sqlite3.c	/^static int fts5HighlightCb($/;"	f	file:
fts5HighlightFunction	sqlite\sqlite3.c	/^static void fts5HighlightFunction($/;"	f	file:
fts5IdxMalloc	sqlite\sqlite3.c	/^static void *fts5IdxMalloc(Fts5Index *p, int nByte){$/;"	f	file:
fts5IdxSelectStmt	sqlite\sqlite3.c	/^static sqlite3_stmt *fts5IdxSelectStmt(Fts5Index *p){$/;"	f	file:
fts5IndexAutomerge	sqlite\sqlite3.c	/^static void fts5IndexAutomerge($/;"	f	file:
fts5IndexCharlen	sqlite\sqlite3.c	/^static int fts5IndexCharlen(const char *pIn, int nIn){$/;"	f	file:
fts5IndexColsetTest	sqlite\sqlite3.c	/^static int fts5IndexColsetTest(Fts5Colset *pColset, int iCol){$/;"	f	file:
fts5IndexCrisismerge	sqlite\sqlite3.c	/^static void fts5IndexCrisismerge($/;"	f	file:
fts5IndexDataVersion	sqlite\sqlite3.c	/^static i64 fts5IndexDataVersion(Fts5Index *p){$/;"	f	file:
fts5IndexDiscardData	sqlite\sqlite3.c	/^static void fts5IndexDiscardData(Fts5Index *p){$/;"	f	file:
fts5IndexExtractCol	sqlite\sqlite3.c	/^static int fts5IndexExtractCol($/;"	f	file:
fts5IndexExtractColset	sqlite\sqlite3.c	/^static void fts5IndexExtractColset($/;"	f	file:
fts5IndexFlush	sqlite\sqlite3.c	/^static void fts5IndexFlush(Fts5Index *p){$/;"	f	file:
fts5IndexIntegrityCheckEmpty	sqlite\sqlite3.c	/^static void fts5IndexIntegrityCheckEmpty($/;"	f	file:
fts5IndexIntegrityCheckSegment	sqlite\sqlite3.c	/^static void fts5IndexIntegrityCheckSegment($/;"	f	file:
fts5IndexMerge	sqlite\sqlite3.c	/^static int fts5IndexMerge($/;"	f	file:
fts5IndexMergeLevel	sqlite\sqlite3.c	/^static void fts5IndexMergeLevel($/;"	f	file:
fts5IndexOptimizeStruct	sqlite\sqlite3.c	/^static Fts5Structure *fts5IndexOptimizeStruct($/;"	f	file:
fts5IndexPrepareStmt	sqlite\sqlite3.c	/^static int fts5IndexPrepareStmt($/;"	f	file:
fts5IndexReturn	sqlite\sqlite3.c	/^static int fts5IndexReturn(Fts5Index *p){$/;"	f	file:
fts5IndexSkipVarint	sqlite\sqlite3.c	198610;"	d	file:
fts5Init	sqlite\sqlite3.c	/^static int fts5Init(sqlite3 *db){$/;"	f	file:
fts5InitVtab	sqlite\sqlite3.c	/^static int fts5InitVtab($/;"	f	file:
fts5IntegrityCheckPgidx	sqlite\sqlite3.c	/^static void fts5IntegrityCheckPgidx(Fts5Index *p, Fts5Data *pLeaf){$/;"	f	file:
fts5IsContentless	sqlite\sqlite3.c	/^static int fts5IsContentless(Fts5Table *pTab){$/;"	f	file:
fts5IterSetOutputCb	sqlite\sqlite3.c	/^static void fts5IterSetOutputCb(int *pRc, Fts5Iter *pIter){$/;"	f	file:
fts5IterSetOutputs_Col	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_Col(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Col100	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_Col100(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Full	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_Full(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Nocolset	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_Nocolset(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_None	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_None(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5IterSetOutputs_Noop	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_Noop(Fts5Iter *pUnused1, Fts5SegIter *pUnused2){$/;"	f	file:
fts5IterSetOutputs_ZeroColset	sqlite\sqlite3.c	/^static void fts5IterSetOutputs_ZeroColset(Fts5Iter *pIter, Fts5SegIter *pSeg){$/;"	f	file:
fts5LeafFirstRowidOff	sqlite\sqlite3.c	197007;"	d	file:
fts5LeafFirstTermOff	sqlite\sqlite3.c	/^static int fts5LeafFirstTermOff(Fts5Data *pLeaf){$/;"	f	file:
fts5LeafIsTermless	sqlite\sqlite3.c	197003;"	d	file:
fts5LeafRead	sqlite\sqlite3.c	/^static Fts5Data *fts5LeafRead(Fts5Index *p, i64 iRowid){$/;"	f	file:
fts5LeafSeek	sqlite\sqlite3.c	/^static void fts5LeafSeek($/;"	f	file:
fts5LeafTermOff	sqlite\sqlite3.c	197005;"	d	file:
fts5LocateTokenizer	sqlite\sqlite3.c	/^static Fts5TokenizerModule *fts5LocateTokenizer($/;"	f	file:
fts5LookaheadReaderInit	sqlite\sqlite3.c	/^static int fts5LookaheadReaderInit($/;"	f	file:
fts5LookaheadReaderNext	sqlite\sqlite3.c	/^static int fts5LookaheadReaderNext(Fts5LookaheadReader *p){$/;"	f	file:
fts5MergeAppendDocid	sqlite\sqlite3.c	201348;"	d	file:
fts5MergeChunkCallback	sqlite\sqlite3.c	/^static void fts5MergeChunkCallback($/;"	f	file:
fts5MergeColset	sqlite\sqlite3.c	/^static void fts5MergeColset(Fts5Colset *pColset, Fts5Colset *pMerge){$/;"	f	file:
fts5MergePrefixLists	sqlite\sqlite3.c	/^static void fts5MergePrefixLists($/;"	f	file:
fts5MergeRowidLists	sqlite\sqlite3.c	/^static void fts5MergeRowidLists($/;"	f	file:
fts5ModuleDestroy	sqlite\sqlite3.c	/^static void fts5ModuleDestroy(void *pCtx){$/;"	f	file:
fts5MultiIterAdvanceRowid	sqlite\sqlite3.c	/^static int fts5MultiIterAdvanceRowid($/;"	f	file:
fts5MultiIterAdvanced	sqlite\sqlite3.c	/^static void fts5MultiIterAdvanced($/;"	f	file:
fts5MultiIterAlloc	sqlite\sqlite3.c	/^static Fts5Iter *fts5MultiIterAlloc($/;"	f	file:
fts5MultiIterDoCompare	sqlite\sqlite3.c	/^static int fts5MultiIterDoCompare(Fts5Iter *pIter, int iOut){$/;"	f	file:
fts5MultiIterEof	sqlite\sqlite3.c	/^static int fts5MultiIterEof(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterFree	sqlite\sqlite3.c	/^static void fts5MultiIterFree(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterIsEmpty	sqlite\sqlite3.c	/^static int fts5MultiIterIsEmpty(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterNew	sqlite\sqlite3.c	/^static void fts5MultiIterNew($/;"	f	file:
fts5MultiIterNew2	sqlite\sqlite3.c	/^static void fts5MultiIterNew2($/;"	f	file:
fts5MultiIterNext	sqlite\sqlite3.c	/^static void fts5MultiIterNext($/;"	f	file:
fts5MultiIterNext2	sqlite\sqlite3.c	/^static void fts5MultiIterNext2($/;"	f	file:
fts5MultiIterNextFrom	sqlite\sqlite3.c	/^static void fts5MultiIterNextFrom($/;"	f	file:
fts5MultiIterRowid	sqlite\sqlite3.c	/^static i64 fts5MultiIterRowid(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterSetEof	sqlite\sqlite3.c	/^static void fts5MultiIterSetEof(Fts5Iter *pIter){$/;"	f	file:
fts5MultiIterTerm	sqlite\sqlite3.c	/^static const u8 *fts5MultiIterTerm(Fts5Iter *pIter, int *pn){$/;"	f	file:
fts5NewTransaction	sqlite\sqlite3.c	/^static int fts5NewTransaction(Fts5Table *pTab){$/;"	f	file:
fts5NextMethod	sqlite\sqlite3.c	/^static int fts5NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5NextRowid	sqlite\sqlite3.c	/^static void fts5NextRowid(Fts5Buffer *pBuf, int *piOff, i64 *piRowid){$/;"	f	file:
fts5NodeCompare	sqlite\sqlite3.c	/^static int fts5NodeCompare($/;"	f	file:
fts5OpenMethod	sqlite\sqlite3.c	/^static int fts5OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts5ParseAlloc	sqlite\sqlite3.c	/^static void *fts5ParseAlloc(u64 t){ return sqlite3_malloc((int)t); }$/;"	f	file:
fts5ParseColset	sqlite\sqlite3.c	/^static Fts5Colset *fts5ParseColset($/;"	f	file:
fts5ParseFree	sqlite\sqlite3.c	/^static void fts5ParseFree(void *p){ sqlite3_free(p); }$/;"	f	file:
fts5ParseSetColset	sqlite\sqlite3.c	/^static void fts5ParseSetColset($/;"	f	file:
fts5ParseStringFromToken	sqlite\sqlite3.c	/^static int fts5ParseStringFromToken(Fts5Token *pToken, char **pz){$/;"	f	file:
fts5ParseTokenize	sqlite\sqlite3.c	/^static int fts5ParseTokenize($/;"	f	file:
fts5PorterCb	sqlite\sqlite3.c	/^static int fts5PorterCb($/;"	f	file:
fts5PorterCreate	sqlite\sqlite3.c	/^static int fts5PorterCreate($/;"	f	file:
fts5PorterDelete	sqlite\sqlite3.c	/^static void fts5PorterDelete(Fts5Tokenizer *pTok){$/;"	f	file:
fts5PorterGobbleVC	sqlite\sqlite3.c	/^static int fts5PorterGobbleVC(char *zStem, int nStem, int bPrevCons){$/;"	f	file:
fts5PorterIsVowel	sqlite\sqlite3.c	/^static int fts5PorterIsVowel(char c, int bYIsVowel){$/;"	f	file:
fts5PorterStep1A	sqlite\sqlite3.c	/^static void fts5PorterStep1A(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep1B	sqlite\sqlite3.c	/^static int fts5PorterStep1B(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep1B2	sqlite\sqlite3.c	/^static int fts5PorterStep1B2(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep2	sqlite\sqlite3.c	/^static int fts5PorterStep2(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep3	sqlite\sqlite3.c	/^static int fts5PorterStep3(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterStep4	sqlite\sqlite3.c	/^static int fts5PorterStep4(char *aBuf, int *pnBuf){$/;"	f	file:
fts5PorterTokenize	sqlite\sqlite3.c	/^static int fts5PorterTokenize($/;"	f	file:
fts5Porter_MEq1	sqlite\sqlite3.c	/^static int fts5Porter_MEq1(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt0	sqlite\sqlite3.c	/^static int fts5Porter_MGt0(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt1	sqlite\sqlite3.c	/^static int fts5Porter_MGt1(char *zStem, int nStem){$/;"	f	file:
fts5Porter_MGt1_and_S_or_T	sqlite\sqlite3.c	/^static int fts5Porter_MGt1_and_S_or_T(char *zStem, int nStem){$/;"	f	file:
fts5Porter_Ostar	sqlite\sqlite3.c	/^static int fts5Porter_Ostar(char *zStem, int nStem){$/;"	f	file:
fts5Porter_Vowel	sqlite\sqlite3.c	/^static int fts5Porter_Vowel(char *zStem, int nStem){$/;"	f	file:
fts5PoslistBlob	sqlite\sqlite3.c	/^static int fts5PoslistBlob(sqlite3_context *pCtx, Fts5Cursor *pCsr){$/;"	f	file:
fts5PoslistCallback	sqlite\sqlite3.c	/^static void fts5PoslistCallback($/;"	f	file:
fts5PoslistFilterCallback	sqlite\sqlite3.c	/^static void fts5PoslistFilterCallback($/;"	f	file:
fts5PoslistOffsetsCallback	sqlite\sqlite3.c	/^static void fts5PoslistOffsetsCallback($/;"	f	file:
fts5PoslistPrefix	sqlite\sqlite3.c	/^static int fts5PoslistPrefix(const u8 *aBuf, int nMax){$/;"	f	file:
fts5PrefixCompress	sqlite\sqlite3.c	/^static int fts5PrefixCompress(int nOld, const u8 *pOld, const u8 *pNew){$/;"	f	file:
fts5PrepareStatement	sqlite\sqlite3.c	/^static int fts5PrepareStatement($/;"	f	file:
fts5PrintStructure	sqlite\sqlite3.c	197689;"	d	file:
fts5PrintfAppend	sqlite\sqlite3.c	/^static char *fts5PrintfAppend(char *zApp, const char *zFmt, ...){$/;"	f	file:
fts5PutU16	sqlite\sqlite3.c	/^static void fts5PutU16(u8 *aOut, u16 iVal){$/;"	f	file:
fts5PutVarint64	sqlite\sqlite3.c	/^static int FTS5_NOINLINE fts5PutVarint64(unsigned char *p, u64 v){$/;"	f	file:
fts5QueryCksum	sqlite\sqlite3.c	/^static int fts5QueryCksum($/;"	f	file:
fts5ReleaseMethod	sqlite\sqlite3.c	/^static int fts5ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5RenameMethod	sqlite\sqlite3.c	/^static int fts5RenameMethod($/;"	f	file:
fts5RollbackMethod	sqlite\sqlite3.c	/^static int fts5RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5RollbackToMethod	sqlite\sqlite3.c	/^static int fts5RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5RowidCmp	sqlite\sqlite3.c	/^static int fts5RowidCmp($/;"	f	file:
fts5RowidFunction	sqlite\sqlite3.c	/^static void fts5RowidFunction($/;"	f	file:
fts5RowidMethod	sqlite\sqlite3.c	/^static int fts5RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts5SavepointMethod	sqlite\sqlite3.c	/^static int fts5SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts5SeekCursor	sqlite\sqlite3.c	/^static int fts5SeekCursor(Fts5Cursor *pCsr, int bErrormsg){$/;"	f	file:
fts5SegIterClear	sqlite\sqlite3.c	/^static void fts5SegIterClear(Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterGotoPage	sqlite\sqlite3.c	/^static void fts5SegIterGotoPage($/;"	f	file:
fts5SegIterHashInit	sqlite\sqlite3.c	/^static void fts5SegIterHashInit($/;"	f	file:
fts5SegIterInit	sqlite\sqlite3.c	/^static void fts5SegIterInit($/;"	f	file:
fts5SegIterLoadDlidx	sqlite\sqlite3.c	/^static void fts5SegIterLoadDlidx(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadNPos	sqlite\sqlite3.c	/^static void fts5SegIterLoadNPos(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadRowid	sqlite\sqlite3.c	/^static void fts5SegIterLoadRowid(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterLoadTerm	sqlite\sqlite3.c	/^static void fts5SegIterLoadTerm(Fts5Index *p, Fts5SegIter *pIter, int nKeep){$/;"	f	file:
fts5SegIterNext	sqlite\sqlite3.c	/^static void fts5SegIterNext($/;"	f	file:
fts5SegIterNextFrom	sqlite\sqlite3.c	/^static void fts5SegIterNextFrom($/;"	f	file:
fts5SegIterNextPage	sqlite\sqlite3.c	/^static void fts5SegIterNextPage($/;"	f	file:
fts5SegIterNext_None	sqlite\sqlite3.c	/^static void fts5SegIterNext_None($/;"	f	file:
fts5SegIterNext_Reverse	sqlite\sqlite3.c	/^static void fts5SegIterNext_Reverse($/;"	f	file:
fts5SegIterReverse	sqlite\sqlite3.c	/^static void fts5SegIterReverse(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterReverseInitPage	sqlite\sqlite3.c	/^static void fts5SegIterReverseInitPage(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterReverseNewPage	sqlite\sqlite3.c	/^static void fts5SegIterReverseNewPage(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegIterSeekInit	sqlite\sqlite3.c	/^static void fts5SegIterSeekInit($/;"	f	file:
fts5SegIterSetNext	sqlite\sqlite3.c	/^static void fts5SegIterSetNext(Fts5Index *p, Fts5SegIter *pIter){$/;"	f	file:
fts5SegiterPoslist	sqlite\sqlite3.c	/^static void fts5SegiterPoslist($/;"	f	file:
fts5SegmentSize	sqlite\sqlite3.c	/^static int fts5SegmentSize(Fts5StructureSegment *pSeg){$/;"	f	file:
fts5SentenceFinderAdd	sqlite\sqlite3.c	/^static int fts5SentenceFinderAdd(Fts5SFinder *p, int iAdd){$/;"	f	file:
fts5SentenceFinderCb	sqlite\sqlite3.c	/^static int fts5SentenceFinderCb($/;"	f	file:
fts5SetUniqueFlag	sqlite\sqlite3.c	/^static void fts5SetUniqueFlag(sqlite3_index_info *pIdxInfo){$/;"	f	file:
fts5SetVtabError	sqlite\sqlite3.c	/^static void fts5SetVtabError(Fts5Table *p, const char *zFormat, ...){$/;"	f	file:
fts5SetupPrefixIter	sqlite\sqlite3.c	/^static void fts5SetupPrefixIter($/;"	f	file:
fts5SnippetFunction	sqlite\sqlite3.c	/^static void fts5SnippetFunction($/;"	f	file:
fts5SnippetScore	sqlite\sqlite3.c	/^static int fts5SnippetScore($/;"	f	file:
fts5SorterNext	sqlite\sqlite3.c	/^static int fts5SorterNext(Fts5Cursor *pCsr){$/;"	f	file:
fts5SourceIdFunc	sqlite\sqlite3.c	/^static void fts5SourceIdFunc($/;"	f	file:
fts5SpecialDelete	sqlite\sqlite3.c	/^static int fts5SpecialDelete($/;"	f	file:
fts5SpecialInsert	sqlite\sqlite3.c	/^static int fts5SpecialInsert($/;"	f	file:
fts5SpecialMatch	sqlite\sqlite3.c	/^static int fts5SpecialMatch($/;"	f	file:
fts5StmtType	sqlite\sqlite3.c	/^static int fts5StmtType(Fts5Cursor *pCsr){$/;"	f	file:
fts5StorageCount	sqlite\sqlite3.c	/^static int fts5StorageCount(Fts5Storage *p, const char *zSuffix, i64 *pnRow){$/;"	f	file:
fts5StorageDecodeSizeArray	sqlite\sqlite3.c	/^static int fts5StorageDecodeSizeArray($/;"	f	file:
fts5StorageDeleteFromIndex	sqlite\sqlite3.c	/^static int fts5StorageDeleteFromIndex($/;"	f	file:
fts5StorageGetStmt	sqlite\sqlite3.c	/^static int fts5StorageGetStmt($/;"	f	file:
fts5StorageInsert	sqlite\sqlite3.c	/^static void fts5StorageInsert($/;"	f	file:
fts5StorageInsertCallback	sqlite\sqlite3.c	/^static int fts5StorageInsertCallback($/;"	f	file:
fts5StorageInsertDocsize	sqlite\sqlite3.c	/^static int fts5StorageInsertDocsize($/;"	f	file:
fts5StorageIntegrityCallback	sqlite\sqlite3.c	/^static int fts5StorageIntegrityCallback($/;"	f	file:
fts5StorageLoadTotals	sqlite\sqlite3.c	/^static int fts5StorageLoadTotals(Fts5Storage *p, int bCache){$/;"	f	file:
fts5StorageNewRowid	sqlite\sqlite3.c	/^static int fts5StorageNewRowid(Fts5Storage *p, i64 *piRowid){$/;"	f	file:
fts5StorageRenameOne	sqlite\sqlite3.c	/^static void fts5StorageRenameOne($/;"	f	file:
fts5StorageSaveTotals	sqlite\sqlite3.c	/^static int fts5StorageSaveTotals(Fts5Storage *p){$/;"	f	file:
fts5StructureAddLevel	sqlite\sqlite3.c	/^static void fts5StructureAddLevel(int *pRc, Fts5Structure **ppStruct){$/;"	f	file:
fts5StructureCountSegments	sqlite\sqlite3.c	/^static int fts5StructureCountSegments(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureDecode	sqlite\sqlite3.c	/^static int fts5StructureDecode($/;"	f	file:
fts5StructureExtendLevel	sqlite\sqlite3.c	/^static void fts5StructureExtendLevel($/;"	f	file:
fts5StructureInvalidate	sqlite\sqlite3.c	/^static void fts5StructureInvalidate(Fts5Index *p){$/;"	f	file:
fts5StructurePromote	sqlite\sqlite3.c	/^static void fts5StructurePromote($/;"	f	file:
fts5StructurePromoteTo	sqlite\sqlite3.c	/^static void fts5StructurePromoteTo($/;"	f	file:
fts5StructureRead	sqlite\sqlite3.c	/^static Fts5Structure *fts5StructureRead(Fts5Index *p){$/;"	f	file:
fts5StructureReadUncached	sqlite\sqlite3.c	/^static Fts5Structure *fts5StructureReadUncached(Fts5Index *p){$/;"	f	file:
fts5StructureRef	sqlite\sqlite3.c	/^static void fts5StructureRef(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureRelease	sqlite\sqlite3.c	/^static void fts5StructureRelease(Fts5Structure *pStruct){$/;"	f	file:
fts5StructureWrite	sqlite\sqlite3.c	/^static void fts5StructureWrite(Fts5Index *p, Fts5Structure *pStruct){$/;"	f	file:
fts5SyncMethod	sqlite\sqlite3.c	/^static int fts5SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5TestDlidxReverse	sqlite\sqlite3.c	/^static void fts5TestDlidxReverse($/;"	f	file:
fts5TestDlidxReverse	sqlite\sqlite3.c	202254;"	d	file:
fts5TestTerm	sqlite\sqlite3.c	/^static void fts5TestTerm($/;"	f	file:
fts5TestTerm	sqlite\sqlite3.c	202255;"	d	file:
fts5TrimSegments	sqlite\sqlite3.c	/^static void fts5TrimSegments(Fts5Index *p, Fts5Iter *pIter){$/;"	f	file:
fts5TripCursors	sqlite\sqlite3.c	/^static void fts5TripCursors(Fts5Table *pTab){$/;"	f	file:
fts5UnicodeAddExceptions	sqlite\sqlite3.c	/^static int fts5UnicodeAddExceptions($/;"	f	file:
fts5UnicodeCreate	sqlite\sqlite3.c	/^static int fts5UnicodeCreate($/;"	f	file:
fts5UnicodeDelete	sqlite\sqlite3.c	/^static void fts5UnicodeDelete(Fts5Tokenizer *pTok){$/;"	f	file:
fts5UnicodeIsAlnum	sqlite\sqlite3.c	/^static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){$/;"	f	file:
fts5UnicodeIsException	sqlite\sqlite3.c	/^static int fts5UnicodeIsException(Unicode61Tokenizer *p, int iCode){$/;"	f	file:
fts5UnicodeTokenize	sqlite\sqlite3.c	/^static int fts5UnicodeTokenize($/;"	f	file:
fts5UpdateMethod	sqlite\sqlite3.c	/^static int fts5UpdateMethod($/;"	f	file:
fts5ValueToText	sqlite\sqlite3.c	/^static const char *fts5ValueToText(sqlite3_value *pVal){$/;"	f	file:
fts5VocabBestIndexMethod	sqlite\sqlite3.c	/^static int fts5VocabBestIndexMethod($/;"	f	file:
fts5VocabCloseMethod	sqlite\sqlite3.c	/^static int fts5VocabCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabColumnMethod	sqlite\sqlite3.c	/^static int fts5VocabColumnMethod($/;"	f	file:
fts5VocabConnectMethod	sqlite\sqlite3.c	/^static int fts5VocabConnectMethod($/;"	f	file:
fts5VocabCreateMethod	sqlite\sqlite3.c	/^static int fts5VocabCreateMethod($/;"	f	file:
fts5VocabDestroyMethod	sqlite\sqlite3.c	/^static int fts5VocabDestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5VocabDisconnectMethod	sqlite\sqlite3.c	/^static int fts5VocabDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts5VocabEofMethod	sqlite\sqlite3.c	/^static int fts5VocabEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabFilterMethod	sqlite\sqlite3.c	/^static int fts5VocabFilterMethod($/;"	f	file:
fts5VocabInitVtab	sqlite\sqlite3.c	/^static int fts5VocabInitVtab($/;"	f	file:
fts5VocabInstanceNewTerm	sqlite\sqlite3.c	/^static int fts5VocabInstanceNewTerm(Fts5VocabCursor *pCsr){$/;"	f	file:
fts5VocabInstanceNext	sqlite\sqlite3.c	/^static int fts5VocabInstanceNext(Fts5VocabCursor *pCsr){$/;"	f	file:
fts5VocabNextMethod	sqlite\sqlite3.c	/^static int fts5VocabNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts5VocabOpenMethod	sqlite\sqlite3.c	/^static int fts5VocabOpenMethod($/;"	f	file:
fts5VocabResetCursor	sqlite\sqlite3.c	/^static void fts5VocabResetCursor(Fts5VocabCursor *pCsr){$/;"	f	file:
fts5VocabRowidMethod	sqlite\sqlite3.c	/^static int fts5VocabRowidMethod($/;"	f	file:
fts5VocabTableType	sqlite\sqlite3.c	/^static int fts5VocabTableType(const char *zType, char **pzErr, int *peType){$/;"	f	file:
fts5WriteAppendPoslistData	sqlite\sqlite3.c	/^static void fts5WriteAppendPoslistData($/;"	f	file:
fts5WriteAppendRowid	sqlite\sqlite3.c	/^static void fts5WriteAppendRowid($/;"	f	file:
fts5WriteAppendTerm	sqlite\sqlite3.c	/^static void fts5WriteAppendTerm($/;"	f	file:
fts5WriteBtreeNoTerm	sqlite\sqlite3.c	/^static void fts5WriteBtreeNoTerm($/;"	f	file:
fts5WriteBtreeTerm	sqlite\sqlite3.c	/^static void fts5WriteBtreeTerm($/;"	f	file:
fts5WriteDlidxAppend	sqlite\sqlite3.c	/^static void fts5WriteDlidxAppend($/;"	f	file:
fts5WriteDlidxClear	sqlite\sqlite3.c	/^static void fts5WriteDlidxClear($/;"	f	file:
fts5WriteDlidxGrow	sqlite\sqlite3.c	/^static int fts5WriteDlidxGrow($/;"	f	file:
fts5WriteFinish	sqlite\sqlite3.c	/^static void fts5WriteFinish($/;"	f	file:
fts5WriteFlushBtree	sqlite\sqlite3.c	/^static void fts5WriteFlushBtree(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteFlushDlidx	sqlite\sqlite3.c	/^static int fts5WriteFlushDlidx(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteFlushLeaf	sqlite\sqlite3.c	/^static void fts5WriteFlushLeaf(Fts5Index *p, Fts5SegWriter *pWriter){$/;"	f	file:
fts5WriteInit	sqlite\sqlite3.c	/^static void fts5WriteInit($/;"	f	file:
fts5YYACTIONTYPE	sqlite\sqlite3.c	189792;"	d	file:
fts5YYCODETYPE	sqlite\sqlite3.c	189790;"	d	file:
fts5YYMALLOCARGTYPE	sqlite\sqlite3.c	189728;"	d	file:
fts5YYMALLOCARGTYPE	sqlite\sqlite3.c	190147;"	d	file:
fts5YYMINORTYPE	sqlite\sqlite3.c	/^} fts5YYMINORTYPE;$/;"	t	typeref:union:__anon31	file:
fts5YYNFTS5TOKEN	sqlite\sqlite3.c	189812;"	d	file:
fts5YYNOCODE	sqlite\sqlite3.c	189791;"	d	file:
fts5YYNOERRORRECOVERY	sqlite\sqlite3.c	189711;"	d	file:
fts5YYNRULE	sqlite\sqlite3.c	189811;"	d	file:
fts5YYNSTATE	sqlite\sqlite3.c	189810;"	d	file:
fts5YYPARSEFREENOTNULL	sqlite\sqlite3.c	189722;"	d	file:
fts5YYSTACKDEPTH	sqlite\sqlite3.c	189804;"	d	file:
fts5YY_ACCEPT_ACTION	sqlite\sqlite3.c	189817;"	d	file:
fts5YY_ACTTAB_COUNT	sqlite\sqlite3.c	189886;"	d	file:
fts5YY_ERROR_ACTION	sqlite\sqlite3.c	189816;"	d	file:
fts5YY_MAX_REDUCE	sqlite\sqlite3.c	189820;"	d	file:
fts5YY_MAX_SHIFT	sqlite\sqlite3.c	189813;"	d	file:
fts5YY_MAX_SHIFTREDUCE	sqlite\sqlite3.c	189815;"	d	file:
fts5YY_MIN_REDUCE	sqlite\sqlite3.c	189819;"	d	file:
fts5YY_MIN_SHIFTREDUCE	sqlite\sqlite3.c	189814;"	d	file:
fts5YY_NO_ACTION	sqlite\sqlite3.c	189818;"	d	file:
fts5YY_REDUCE_COUNT	sqlite\sqlite3.c	189924;"	d	file:
fts5YY_REDUCE_MAX	sqlite\sqlite3.c	189926;"	d	file:
fts5YY_REDUCE_MIN	sqlite\sqlite3.c	189925;"	d	file:
fts5YY_SHIFT_COUNT	sqlite\sqlite3.c	189915;"	d	file:
fts5YY_SHIFT_MAX	sqlite\sqlite3.c	189917;"	d	file:
fts5YY_SHIFT_MIN	sqlite\sqlite3.c	189916;"	d	file:
fts5_api	sqlite\sqlite3.c	/^struct fts5_api {$/;"	s	file:
fts5_api	sqlite\sqlite3.c	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api	file:
fts5_dri	sqlite\sqlite3.c	196753;"	d	file:
fts5_extension_function	sqlite\sqlite3.c	/^typedef void (*fts5_extension_function)($/;"	t	file:
fts5_isdigit	sqlite\sqlite3.c	/^static int fts5_isdigit(char a){$/;"	f	file:
fts5_isopenquote	sqlite\sqlite3.c	/^static int fts5_isopenquote(char x){$/;"	f	file:
fts5_iswhitespace	sqlite\sqlite3.c	/^static int fts5_iswhitespace(char x){$/;"	f	file:
fts5_remove_diacritic	sqlite\sqlite3.c	/^static int fts5_remove_diacritic(int c){$/;"	f	file:
fts5_tokenizer	sqlite\sqlite3.c	/^struct fts5_tokenizer {$/;"	s	file:
fts5_tokenizer	sqlite\sqlite3.c	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer	file:
fts5yy0	sqlite\sqlite3.c	/^  sqlite3Fts5ParserFTS5TOKENTYPE fts5yy0;$/;"	m	union:__anon31	file:
fts5yy11	sqlite\sqlite3.c	/^  Fts5ExprPhrase* fts5yy11;$/;"	m	union:__anon31	file:
fts5yy14	sqlite\sqlite3.c	/^  Fts5ExprNearset* fts5yy14;$/;"	m	union:__anon31	file:
fts5yy4	sqlite\sqlite3.c	/^  int fts5yy4;$/;"	m	union:__anon31	file:
fts5yy43	sqlite\sqlite3.c	/^  Fts5Colset* fts5yy43;$/;"	m	union:__anon31	file:
fts5yy54	sqlite\sqlite3.c	/^  Fts5ExprNode* fts5yy54;$/;"	m	union:__anon31	file:
fts5yyFallback	sqlite\sqlite3.c	/^static const fts5YYCODETYPE fts5yyFallback[] = {$/;"	v	file:
fts5yyGrowStack	sqlite\sqlite3.c	/^static int fts5yyGrowStack(fts5yyParser *p){$/;"	f	file:
fts5yyParser	sqlite\sqlite3.c	/^struct fts5yyParser {$/;"	s	file:
fts5yyParser	sqlite\sqlite3.c	/^typedef struct fts5yyParser fts5yyParser;$/;"	t	typeref:struct:fts5yyParser	file:
fts5yyRuleInfo	sqlite\sqlite3.c	/^} fts5yyRuleInfo[] = {$/;"	v	typeref:struct:__anon32	file:
fts5yyRuleName	sqlite\sqlite3.c	/^static const char *const fts5yyRuleName[] = {$/;"	v	file:
fts5yyStackEntry	sqlite\sqlite3.c	/^struct fts5yyStackEntry {$/;"	s	file:
fts5yyStackEntry	sqlite\sqlite3.c	/^typedef struct fts5yyStackEntry fts5yyStackEntry;$/;"	t	typeref:struct:fts5yyStackEntry	file:
fts5yyStackOverflow	sqlite\sqlite3.c	/^static void fts5yyStackOverflow(fts5yyParser *fts5yypParser){$/;"	f	file:
fts5yyTokenName	sqlite\sqlite3.c	/^static const char *const fts5yyTokenName[] = { $/;"	v	file:
fts5yyTraceFILE	sqlite\sqlite3.c	/^static FILE *fts5yyTraceFILE = 0;$/;"	v	file:
fts5yyTracePrompt	sqlite\sqlite3.c	/^static char *fts5yyTracePrompt = 0;$/;"	v	file:
fts5yyTraceShift	sqlite\sqlite3.c	/^static void fts5yyTraceShift(fts5yyParser *fts5yypParser, int fts5yyNewState, const char *zTag){$/;"	f	file:
fts5yyTraceShift	sqlite\sqlite3.c	190495;"	d	file:
fts5yy_accept	sqlite\sqlite3.c	/^static void fts5yy_accept($/;"	f	file:
fts5yy_action	sqlite\sqlite3.c	/^static const fts5YYACTIONTYPE fts5yy_action[] = {$/;"	v	file:
fts5yy_default	sqlite\sqlite3.c	/^static const fts5YYACTIONTYPE fts5yy_default[] = {$/;"	v	file:
fts5yy_destructor	sqlite\sqlite3.c	/^static void fts5yy_destructor($/;"	f	file:
fts5yy_find_reduce_action	sqlite\sqlite3.c	/^static int fts5yy_find_reduce_action($/;"	f	file:
fts5yy_find_shift_action	sqlite\sqlite3.c	/^static unsigned int fts5yy_find_shift_action($/;"	f	file:
fts5yy_lookahead	sqlite\sqlite3.c	/^static const fts5YYCODETYPE fts5yy_lookahead[] = {$/;"	v	file:
fts5yy_parse_failed	sqlite\sqlite3.c	/^static void fts5yy_parse_failed($/;"	f	file:
fts5yy_pop_parser_stack	sqlite\sqlite3.c	/^static void fts5yy_pop_parser_stack(fts5yyParser *pParser){$/;"	f	file:
fts5yy_reduce	sqlite\sqlite3.c	/^static void fts5yy_reduce($/;"	f	file:
fts5yy_reduce_ofst	sqlite\sqlite3.c	/^static const signed char fts5yy_reduce_ofst[] = {$/;"	v	file:
fts5yy_shift	sqlite\sqlite3.c	/^static void fts5yy_shift($/;"	f	file:
fts5yy_shift_ofst	sqlite\sqlite3.c	/^static const unsigned char fts5yy_shift_ofst[] = {$/;"	v	file:
fts5yy_syntax_error	sqlite\sqlite3.c	/^static void fts5yy_syntax_error($/;"	f	file:
fts5yycoverage	sqlite\sqlite3.c	/^static unsigned char fts5yycoverage[fts5YYNSTATE][fts5YYNFTS5TOKEN];$/;"	v	file:
fts5yyerrcnt	sqlite\sqlite3.c	/^  int fts5yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:fts5yyParser	file:
fts5yyhwm	sqlite\sqlite3.c	/^  int fts5yyhwm;                    \/* High-water mark of the stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yyinit	sqlite\sqlite3.c	/^  int fts5yyinit;$/;"	m	union:__anon31	file:
fts5yystack	sqlite\sqlite3.c	/^  fts5yyStackEntry *fts5yystack;        \/* The parser's stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yystk0	sqlite\sqlite3.c	/^  fts5yyStackEntry fts5yystk0;          \/* First stack entry *\/$/;"	m	struct:fts5yyParser	file:
fts5yystksz	sqlite\sqlite3.c	/^  int fts5yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:fts5yyParser	file:
fts5yytestcase	sqlite\sqlite3.c	189716;"	d	file:
fts5yytestcase	sqlite\sqlite3.c	189832;"	d	file:
fts5yytos	sqlite\sqlite3.c	/^  fts5yyStackEntry *fts5yytos;          \/* Pointer to top element of the stack *\/$/;"	m	struct:fts5yyParser	file:
ftsCompareFunction	sqlite\sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	sqlite\sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	sqlite\sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	sqlite\sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	sqlite\sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
functionDestroy	sqlite\sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	sqlite\sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	sqlite\sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	sqlite\sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
generateColumnNames	sqlite\sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	sqlite\sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	sqlite\sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	sqlite\sqlite3.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	sqlite\sqlite3.c	/^static void generateWithRecursiveQuery($/;"	f	file:
geomCallback	sqlite\sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	sqlite\sqlite3.c	179476;"	d	file:
get2byte	sqlite\sqlite3.c	61284;"	d	file:
get2byteAligned	sqlite\sqlite3.c	61295;"	d	file:
get2byteAligned	sqlite\sqlite3.c	61297;"	d	file:
get2byteAligned	sqlite\sqlite3.c	61299;"	d	file:
get2byteAligned	sqlite\sqlite3.c	61301;"	d	file:
get2byteNotZero	sqlite\sqlite3.c	61642;"	d	file:
get4byte	sqlite\sqlite3.c	61286;"	d	file:
getAbsoluteLevel	sqlite\sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	sqlite\sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	sqlite\sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCellInfo	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void getCellInfo(BtCursor *pCur){$/;"	f	file:
getDigits	sqlite\sqlite3.c	/^static int getDigits(const char *zDate, const char *zFormat, ...){$/;"	f	file:
getDoubleArg	sqlite\sqlite3.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getFileMode	sqlite\sqlite3.c	/^static int getFileMode($/;"	f	file:
getIntArg	sqlite\sqlite3.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getIntFromStmt	sqlite\sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLocalPayload	sqlite\sqlite3.c	/^static void getLocalPayload($/;"	f	file:
getLockingMode	sqlite\sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getNextNode	sqlite\sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	sqlite\sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	sqlite\sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	sqlite\sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	sqlite\sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getPageError	sqlite\sqlite3.c	/^static int getPageError($/;"	f	file:
getPageMMap	sqlite\sqlite3.c	/^static int getPageMMap($/;"	f	file:
getPageNormal	sqlite\sqlite3.c	/^static int getPageNormal($/;"	f	file:
getPageReferenced	sqlite\sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getRowTrigger	sqlite\sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	sqlite\sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getTempStore	sqlite\sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	sqlite\sqlite3.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	sqlite\sqlite3.c	18248;"	d	file:
getVarint32	sqlite\sqlite3.c	18243;"	d	file:
get_autocommit	sqlite\sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	sqlite\sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_table	sqlite\sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
globInfo	sqlite\sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	sqlite\sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	sqlite\sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	sqlite\sqlite3.c	/^static void groupConcatStep($/;"	f	file:
growOp3	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int growOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f	file:
growOpArray	sqlite\sqlite3.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	sqlite\sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	sqlite\sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
grp	sqlite\sqlite3.c	/^  sqlite3_changegroup grp;        \/* Hash table *\/$/;"	m	struct:sqlite3_rebaser	file:
h	sqlite\sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	sqlite\sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	sqlite\sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	sqlite\sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	sqlite\sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	sqlite\sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	sqlite\sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	sqlite\sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	sqlite\sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hPending	sqlite\sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	sqlite\sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handleDeferredMoveto	sqlite\sqlite3.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	sqlite\sqlite3.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
hasColumn	sqlite\sqlite3.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	sqlite\sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:
hasHeldSharedLock	sqlite\sqlite3.c	/^  u8 hasHeldSharedLock;       \/* True if a shared lock has ever been held *\/$/;"	m	struct:Pager	file:
hasHotJournal	sqlite\sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasIncrblobCur	sqlite\sqlite3.c	/^  u8 hasIncrblobCur; \/* True if there are one or more Incrblob cursors *\/$/;"	m	struct:Btree	file:
hasMutex	sqlite\sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	sqlite\sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	sqlite\sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	sqlite\sqlite3.c	61710;"	d	file:
hasSharedCacheTableLock	sqlite\sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	sqlite\sqlite3.c	61709;"	d	file:
hasStat1	sqlite\sqlite3.c	/^  unsigned hasStat1:1;     \/* aiRowLogEst values come from sqlite_stat1 *\/$/;"	m	struct:Index	file:
hasVowel	sqlite\sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	sqlite\sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
havingToWhere	sqlite\sqlite3.c	/^static void havingToWhere(Parse *pParse, Select *p){$/;"	f	file:
havingToWhereExprCb	sqlite\sqlite3.c	/^static int havingToWhereExprCb(Walker *pWalker, Expr *pExpr){$/;"	f	file:
hdr	sqlite\sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon14	typeref:struct:Mem3Block::__anon14::__anon15	file:
hdr	sqlite\sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	sqlite\sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heap	sqlite\sqlite3.c	/^  u32 *heap;        \/* Min-heap used for analyzing cell coverage *\/$/;"	m	struct:IntegrityCk	file:
heightOfExpr	sqlite\sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	sqlite\sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	sqlite\sqlite3.c	/^static void heightOfSelect(Select *pSelect, int *pnHeight){$/;"	f	file:
hexFunc	sqlite\sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	sqlite\sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hidden	sqlite\sqlite3.c	/^  unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot	file:
hints	sqlite\sqlite3.c	/^  u8 hints;                 \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:
hlmask	sqlite\sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
hook	sqlite\sqlite3.c	/^  SessionHook hook;               \/* APIs to grab new and old data with *\/$/;"	m	struct:sqlite3_session	file:
hook	sqlite\sqlite3.c	/^  SessionHook hook;$/;"	m	struct:SessionStat1Ctx	file:
ht	sqlite\sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	sqlite\sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	sqlite\sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	sqlite\sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	sqlite\sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	sqlite\sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	file:
i	sqlite\sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::p4union	file:
i	sqlite\sqlite3.c	/^  int i;                          \/* Current offset in a[] *\/$/;"	m	struct:Fts5PoslistReader	file:
i	sqlite\sqlite3.c	/^  int i;                          \/* Current offset in position list *\/$/;"	m	struct:Fts5LookaheadReader	file:
i	sqlite\sqlite3.c	/^  int i;              \/* XOR next input into a[i] *\/$/;"	m	struct:EntropyGatherer	file:
i	sqlite\sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:
i	sqlite\sqlite3.c	/^  u32 i;                     \/* Index in sParse.aNode[] of current row *\/$/;"	m	struct:JsonEachCursor	file:
i	sqlite\sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	sqlite\sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	sqlite\sqlite3.c	/^typedef short i16;$/;"	t	file:
i16	sqlite\sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	sqlite\sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	sqlite\sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	sqlite\sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	sqlite\sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	sqlite\sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	sqlite\sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	sqlite\sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	sqlite\sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iAppend	sqlite\sqlite3.c	/^    u32 iAppend;           \/* More terms for ARRAY and OBJECT *\/$/;"	m	union:JsonNode::__anon30	file:
iArg	sqlite\sqlite3.c	/^  u32 iArg;                \/* Extra argument *\/$/;"	m	struct:PragmaName	file:
iAuxArg	sqlite\sqlite3.c	/^  int iAuxArg;                    \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:
iAuxOp	sqlite\sqlite3.c	/^  int iAuxOp;                     \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:
iBatch	sqlite\sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBegin	sqlite\sqlite3.c	/^  u32 iBegin;                \/* The first node of the scan *\/$/;"	m	struct:JsonEachCursor	file:
iBlock	sqlite\sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	sqlite\sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iBtPage	sqlite\sqlite3.c	/^  int iBtPage;                    \/* Page number corresponding to btterm *\/$/;"	m	struct:Fts5SegWriter	file:
iBufEnd	sqlite\sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	sqlite\sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBusyTimeout	sqlite\sqlite3.c	/^  unsigned iBusyTimeout;              \/* Wait this many millisec on locks *\/$/;"	m	struct:unixFile	file:
iCacheCnt	sqlite\sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	sqlite\sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	sqlite\sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	sqlite\sqlite3.c	/^  int iCell;$/;"	m	struct:StatPage	file:
iCell	sqlite\sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:
iChange	sqlite\sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	sqlite\sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iChildPg	sqlite\sqlite3.c	/^  u32 iChildPg;                   \/* Child node (or 0 if this is a leaf) *\/$/;"	m	struct:StatCell	file:
iCol	sqlite\sqlite3.c	/^  i16 iCol;                       \/* Column of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Column to search *\/$/;"	m	struct:CInstIter	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	sqlite\sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	sqlite\sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iCol	sqlite\sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5InsertCtx	file:
iCol	sqlite\sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5IntegrityCtx	file:
iCol	sqlite\sqlite3.c	/^  int iCol;$/;"	m	struct:Fts5VocabCursor	file:
iCol	sqlite\sqlite3.c	/^  u16 iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iColFilter	sqlite\sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	sqlite\sqlite3.c	/^     int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	sqlite\sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	sqlite\sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	sqlite\sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	sqlite\sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	sqlite\sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iConstExprReg	sqlite\sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon5	file:
iContinue	sqlite\sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCookie	sqlite\sqlite3.c	/^  int iCookie;                    \/* Incremented when %_config is modified *\/$/;"	m	struct:Fts5Config	file:
iCookie	sqlite\sqlite3.c	/^  u32 iCookie;                    \/* Cookie value for main db files *\/$/;"	m	struct:rbu_file	file:
iCookie	sqlite\sqlite3.c	/^  u32 iCookie;$/;"	m	struct:RbuState	file:
iCoord	sqlite\sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCsrId	sqlite\sqlite3.c	/^  i64 iCsrId;                     \/* Cursor id *\/$/;"	m	struct:Fts5Cursor	file:
iCur	sqlite\sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon20::__anon21::InLoop	file:
iCur	sqlite\sqlite3.c	/^    int iCur;                                 \/* A cursor number *\/$/;"	m	union:Walker::__anon10	file:
iCur	sqlite\sqlite3.c	/^  int iCur;        \/* Cursor number for the table corresponding to the index *\/$/;"	m	struct:IdxCover	file:
iCurrent	sqlite\sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrent	sqlite\sqlite3.c	/^  int iCurrent;                   \/* Offset in aData[] of current change *\/$/;"	m	struct:SessionInput	file:
iCurrentBlock	sqlite\sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCurrentTime	sqlite\sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:
iCursor	sqlite\sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDataVersion	sqlite\sqlite3.c	/^  u32 iDataVersion;           \/* Changes whenever database content changes *\/$/;"	m	struct:Pager	file:
iDataVersion	sqlite\sqlite3.c	/^  u32 iDataVersion;  \/* Combines with pBt->pPager->iDataVersion *\/$/;"	m	struct:Btree	file:
iDb	sqlite\sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	sqlite\sqlite3.c	/^  i8 iDb;                 \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	sqlite\sqlite3.c	/^  int iDb;                        \/* Index of database to analyze *\/$/;"	m	struct:DbpageCursor	file:
iDb	sqlite\sqlite3.c	/^  int iDb;                        \/* Index of database to analyze *\/$/;"	m	struct:StatTable	file:
iDb	sqlite\sqlite3.c	/^  int iDb;                        \/* Schema used for this query *\/$/;"	m	struct:StatCursor	file:
iDb	sqlite\sqlite3.c	/^  int iDb;               \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	sqlite\sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	sqlite\sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon9	file:
iDbPage	sqlite\sqlite3.c	/^  u32 iDbPage;$/;"	m	struct:RbuFrame	file:
iDefaultCol	sqlite\sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	sqlite\sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDepth	sqlite\sqlite3.c	/^  u16 iDepth;        \/* Nesting depth *\/$/;"	m	struct:JsonParse	file:
iDestSchema	sqlite\sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	sqlite\sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	sqlite\sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:
iDoclistToken	sqlite\sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	sqlite\sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEnd	sqlite\sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:
iEnd	sqlite\sqlite3.c	/^  int iEnd;                       \/* Last token in coalesced phrase instance *\/$/;"	m	struct:CInstIter	file:
iEnd	sqlite\sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEnd	sqlite\sqlite3.c	/^  u32 iEnd;                  \/* EOF when i equals or exceeds this value *\/$/;"	m	struct:JsonEachCursor	file:
iEndBlock	sqlite\sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEndofDoclist	sqlite\sqlite3.c	/^  int iEndofDoclist;$/;"	m	struct:Fts5SegIter	file:
iEof	sqlite\sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	sqlite\sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	sqlite\sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
iField	sqlite\sqlite3.c	/^  int iField;             \/* Field in (?,?,?) IN (SELECT...) vector *\/$/;"	m	struct:WhereTerm	file:
iFirst	sqlite\sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iFirst	sqlite\sqlite3.c	/^  u16 iFirst;                     \/* aSeg[] index of firstest iterator *\/$/;"	m	struct:Fts5CResult	file:
iFirstOff	sqlite\sqlite3.c	/^  int iFirstOff;                \/* Used by reverse iterators *\/$/;"	m	struct:Fts5DlidxLvl	file:
iFirstRowid	sqlite\sqlite3.c	/^  i64 iFirstRowid;                \/* Return no rowids earlier than this *\/$/;"	m	struct:Fts5Cursor	file:
iForeGuard	sqlite\sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	sqlite\sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	sqlite\sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	sqlite\sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	sqlite\sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iGet	sqlite\sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	sqlite\sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	sqlite\sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	sqlite\sqlite3.c	/^  u32 iHdrOffset;         \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:
iHead	sqlite\sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iHidden	sqlite\sqlite3.c	/^  u8 iHidden;               \/* Index of the first hidden column *\/$/;"	m	struct:PragmaVtab	file:
iIdx	sqlite\sqlite3.c	/^  int iIdx;                       \/* Index (main or aPrefix[] entry) *\/$/;"	m	struct:Fts5TermsetEntry	file:
iIdx	sqlite\sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	sqlite\sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCol	sqlite\sqlite3.c	/^  int iIdxCol;       \/* The column for the index *\/$/;"	m	struct:IdxExprTrans	file:
iIdxCur	sqlite\sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iIdxCur	sqlite\sqlite3.c	/^  int iIdxCur;       \/* The cursor for the index *\/$/;"	m	struct:IdxExprTrans	file:
iIdxCur	sqlite\sqlite3.c	/^  int iIdxCur;    \/* Cursor for the index, if pIdx!=0.  Unused otherwise *\/$/;"	m	struct:CCurHint	file:
iInst	sqlite\sqlite3.c	/^  int iInst;                      \/* Next phrase instance index *\/$/;"	m	struct:CInstIter	file:
iInstOff	sqlite\sqlite3.c	/^  int iInstOff;$/;"	m	struct:Fts5VocabCursor	file:
iInstPos	sqlite\sqlite3.c	/^  i64 iInstPos;$/;"	m	struct:Fts5VocabCursor	file:
iJD	sqlite\sqlite3.c	/^  sqlite3_int64 iJD;  \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	sqlite\sqlite3.c	/^    u32 iKey;              \/* Key for ARRAY objects in json_tree() *\/$/;"	m	union:JsonNode::__anon30	file:
iKey	sqlite\sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iKey1	sqlite\sqlite3.c	/^  i64 iKey1;                      \/* First key value passed to hook *\/$/;"	m	struct:PreUpdate	file:
iKey2	sqlite\sqlite3.c	/^  i64 iKey2;                      \/* Second key value passed to hook *\/$/;"	m	struct:PreUpdate	file:
iLangid	sqlite\sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	sqlite\sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLangid	sqlite\sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:
iLastCol	sqlite\sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	sqlite\sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	sqlite\sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLastRowid	sqlite\sqlite3.c	/^  i64 iLastRowid;                 \/* Return no rowids later than this *\/$/;"	m	struct:Fts5Cursor	file:
iLeafEndBlock	sqlite\sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeafOffset	sqlite\sqlite3.c	/^  int iLeafOffset;                \/* Byte offset within current leaf *\/$/;"	m	struct:Fts5SegIter	file:
iLeafPgno	sqlite\sqlite3.c	/^  int iLeafPgno;                  \/* Current leaf page number *\/$/;"	m	struct:Fts5SegIter	file:
iLeafPgno	sqlite\sqlite3.c	/^  int iLeafPgno;                \/* Page number of current leaf page *\/$/;"	m	struct:Fts5DlidxLvl	file:
iLeftJoin	sqlite\sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	sqlite\sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLevel	sqlite\sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iLevel	sqlite\sqlite3.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:
iLevel	sqlite\sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:
iLikeRepCntr	sqlite\sqlite3.c	/^  u32 iLikeRepCntr;     \/* LIKE range processing counter register (times 2) *\/$/;"	m	struct:WhereLevel	file:
iLimit	sqlite\sqlite3.c	/^  LogEst iLimit;            \/* LIMIT if wctrlFlags has WHERE_USE_LIMIT *\/$/;"	m	struct:WhereInfo	file:
iLimit	sqlite\sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iLookahead	sqlite\sqlite3.c	/^  i64 iLookahead;                 \/* Next position *\/$/;"	m	struct:Fts5LookaheadReader	file:
iMaster	sqlite\sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxDocid	sqlite\sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iMaxFrame	sqlite\sqlite3.c	/^  u32 iMaxFrame;                  \/* Largest iWalFrame value in aFrame[] *\/$/;"	m	struct:sqlite3rbu	file:
iMaxKey	sqlite\sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	sqlite\sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	sqlite\sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMemory	sqlite\sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	sqlite\sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iMinDocid	sqlite\sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iNewReg	sqlite\sqlite3.c	/^  int iNewReg;                    \/* Register for new.* values *\/$/;"	m	struct:PreUpdate	file:
iNewTable	sqlite\sqlite3.c	/^  int iNewTable;            \/* New table number *\/$/;"	m	struct:SubstContext	file:
iNext	sqlite\sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	sqlite\sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon18	file:
iNext	sqlite\sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNext	sqlite\sqlite3.c	/^  int iNext;                      \/* Offset in aData[] of next change *\/$/;"	m	struct:SessionInput	file:
iNextId	sqlite\sqlite3.c	/^  i64 iNextId;                    \/* Used to allocate unique cursor ids *\/$/;"	m	struct:Fts5Global	file:
iNextSelectId	sqlite\sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	sqlite\sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:
iNodeSize	sqlite\sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOalSz	sqlite\sqlite3.c	/^  i64 iOalSz;$/;"	m	struct:RbuState	file:
iOalSz	sqlite\sqlite3.c	/^  i64 iOalSz;$/;"	m	struct:sqlite3rbu	file:
iOff	sqlite\sqlite3.c	/^  i64 iOff;$/;"	m	struct:Fts5ExprCtx	file:
iOff	sqlite\sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	sqlite\sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	sqlite\sqlite3.c	/^  int iOff;                       \/* Current offset within zIn[] *\/$/;"	m	struct:HighlightContext	file:
iOff	sqlite\sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOff	sqlite\sqlite3.c	/^  int iOff;                     \/* Current offset into pData *\/$/;"	m	struct:Fts5DlidxLvl	file:
iOffset	sqlite\sqlite3.c	/^  i64 iOffset;                    \/* Value of 'pgOffset' column *\/$/;"	m	struct:StatCursor	file:
iOffset	sqlite\sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	sqlite\sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	sqlite\sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	sqlite\sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	sqlite\sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	sqlite\sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOnceResetThreshold	sqlite\sqlite3.c	/^  int iOnceResetThreshold;          \/* When to reset OP_Once counters *\/$/;"	m	struct:Sqlite3Config	file:
iOp	sqlite\sqlite3.c	/^  int iOp;                \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:
iOrDocid	sqlite\sqlite3.c	/^  i64 iOrDocid;$/;"	m	struct:Fts3Phrase	file:
iOrderByCol	sqlite\sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iOvfl	sqlite\sqlite3.c	/^  int iOvfl;                      \/* Iterates through aOvfl[] *\/$/;"	m	struct:StatCell	file:
iPKey	sqlite\sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the rowid *\/$/;"	m	struct:Table	file:
iPage	sqlite\sqlite3.c	/^  i8 iPage;                 \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iPage	sqlite\sqlite3.c	/^  int iPage;                      \/* Current entry in aPage[] *\/$/;"	m	struct:StatCursor	file:
iPageno	sqlite\sqlite3.c	/^  u32 iPageno;                    \/* Value of 'pageno' column *\/$/;"	m	struct:StatCursor	file:
iParent	sqlite\sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iPgidxOff	sqlite\sqlite3.c	/^  int iPgidxOff;                  \/* Next offset in pgidx *\/$/;"	m	struct:Fts5SegIter	file:
iPgno	sqlite\sqlite3.c	/^  u32 iPgno;$/;"	m	struct:StatPage	file:
iPhrase	sqlite\sqlite3.c	/^  int iPhrase;               \/* Index of this phrase in matchinfo() results *\/$/;"	m	struct:Fts3Expr	file:
iPkSortOrder	sqlite\sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:
iPkTnum	sqlite\sqlite3.c	/^  int iPkTnum;                    \/* If eType==EXTERNAL, root of PK index *\/$/;"	m	struct:RbuObjIter	file:
iPos	sqlite\sqlite3.c	/^  i64 iPos;                       \/* (iCol<<32) + iPos *\/$/;"	m	struct:Fts5PoslistReader	file:
iPos	sqlite\sqlite3.c	/^  i64 iPos;                       \/* Current position *\/$/;"	m	struct:Fts5LookaheadReader	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Current token offset in zIn[] *\/$/;"	m	struct:HighlightContext	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Current token position *\/$/;"	m	struct:Fts5SFinder	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPos	sqlite\sqlite3.c	/^  int iPos;                       \/* Position of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iPosOffset	sqlite\sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPragCName	sqlite\sqlite3.c	/^  u8 iPragCName;           \/* Start of column names in pragCName[] *\/$/;"	m	struct:PragmaName	file:
iPrev	sqlite\sqlite3.c	/^  i64 iPrev;                      \/* Previous rowid value written to page *\/$/;"	m	struct:Fts5DlidxWriter	file:
iPrev	sqlite\sqlite3.c	/^  i64 iPrev;$/;"	m	struct:Fts5PoslistWriter	file:
iPrev	sqlite\sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrevDocid	sqlite\sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	sqlite\sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	sqlite\sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevPgidx	sqlite\sqlite3.c	/^  int iPrevPgidx;                 \/* Previous value written into pgidx *\/$/;"	m	struct:Fts5PageWriter	file:
iPrevRowid	sqlite\sqlite3.c	/^  i64 iPrevRowid;                 \/* Previous rowid written to current leaf *\/$/;"	m	struct:Fts5SegWriter	file:
iPrior	sqlite\sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	sqlite\sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRangeEnd	sqlite\sqlite3.c	/^  int iRangeEnd;                  \/* If non-zero, last token to include *\/$/;"	m	struct:HighlightContext	file:
iRangeReg	sqlite\sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iRangeStart	sqlite\sqlite3.c	/^  int iRangeStart;                \/* First token to include *\/$/;"	m	struct:HighlightContext	file:
iReCksum	sqlite\sqlite3.c	/^  u32 iReCksum;              \/* On commit, recalculate checksums from here *\/$/;"	m	struct:Wal	file:
iRead	sqlite\sqlite3.c	/^  int iRead;$/;"	m	struct:PoslistOffsetsCtx	file:
iReadOff	sqlite\sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	sqlite\sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	sqlite\sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iReplace	sqlite\sqlite3.c	/^    u32 iReplace;          \/* Replacement content for JNODE_REPLACE *\/$/;"	m	union:JsonNode::__anon30	file:
iRightChildPg	sqlite\sqlite3.c	/^  u32 iRightChildPg;              \/* Right-child page number (or 0) *\/$/;"	m	struct:StatPage	file:
iRightJoinTable	sqlite\sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	sqlite\sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon19	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5ExprNode	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5SegIter	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                     \/* Current rowid *\/$/;"	m	struct:Fts5Sorter	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                     \/* Rowid of last value written *\/$/;"	m	struct:Fts5HashEntry	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;                   \/* First rowid on leaf iLeafPgno *\/$/;"	m	struct:Fts5DlidxLvl	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5DoclistIter	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5IndexIter	file:
iRowid	sqlite\sqlite3.c	/^  i64 iRowid;$/;"	m	struct:Fts5IntegrityCtx	file:
iRowid	sqlite\sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:
iRowid	sqlite\sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iRowid	sqlite\sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iRowid	sqlite\sqlite3.c	/^  sqlite3_int64 iRowid;      \/* The rowid *\/$/;"	m	struct:stmt_cursor	file:
iRowid	sqlite\sqlite3.c	/^  sqlite_int64 iRowid;      \/* Current rowid *\/$/;"	m	struct:PragmaVtabCursor	file:
iRowid	sqlite\sqlite3.c	/^  u32 iRowid;                \/* The rowid *\/$/;"	m	struct:JsonEachCursor	file:
iRowidOffset	sqlite\sqlite3.c	/^  int iRowidOffset;               \/* Current entry in aRowidOffset[] *\/$/;"	m	struct:Fts5SegIter	file:
iSDParm	sqlite\sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iSavepoint	sqlite\sqlite3.c	/^  int iSavepoint;                 \/* Number of open savepoints (0 -> none) *\/$/;"	m	struct:Fts5TransactionState	file:
iSavepoint	sqlite\sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSdst	sqlite\sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iSegid	sqlite\sqlite3.c	/^  int iSegid;                     \/* Segid to write to *\/$/;"	m	struct:Fts5SegWriter	file:
iSegid	sqlite\sqlite3.c	/^  int iSegid;                     \/* Segment id *\/$/;"	m	struct:Fts5StructureSegment	file:
iSegid	sqlite\sqlite3.c	/^  int iSegid;$/;"	m	struct:Fts5DlidxIter	file:
iSelectID	sqlite\sqlite3.c	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus	file:
iSelectId	sqlite\sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	sqlite\sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSelfTab	sqlite\sqlite3.c	/^  int iSelfTab;        \/* Table associated with an index on expr, or negative$/;"	m	struct:Parse	file:
iSize	sqlite\sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	sqlite\sqlite3.c	/^  u32 iSize;                  \/* Size of this object *\/$/;"	m	struct:RtreeMatchArg	file:
iSize	sqlite\sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSortIdx	sqlite\sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:
iSorterColumn	sqlite\sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iSpecial	sqlite\sqlite3.c	/^  i64 iSpecial;                   \/* Result of special query *\/$/;"	m	struct:Fts5Cursor	file:
iSrcLine	sqlite\sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:
iStart	sqlite\sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:
iStart	sqlite\sqlite3.c	/^  int iStart;                     \/* First token in coalesced phrase instance *\/$/;"	m	struct:CInstIter	file:
iStart	sqlite\sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	sqlite\sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStartOff	sqlite\sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	sqlite\sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	sqlite\sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iStructVersion	sqlite\sqlite3.c	/^  i64 iStructVersion;             \/* data_version when pStruct read *\/$/;"	m	struct:Fts5Index	file:
iSub	sqlite\sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	sqlite\sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	sqlite\sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSwitchRowid	sqlite\sqlite3.c	/^  i64 iSwitchRowid;               \/* Firstest rowid of other than aFirst[1] *\/$/;"	m	struct:Fts5Iter	file:
iSyncPoint	sqlite\sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iSysErrno	sqlite\sqlite3.c	/^  int iSysErrno;                \/* Errno value from last system error *\/$/;"	m	struct:sqlite3	file:
iSzPoslist	sqlite\sqlite3.c	/^  int iSzPoslist;                 \/* Offset of space for 4-byte poslist size *\/$/;"	m	struct:Fts5HashEntry	file:
iTab	sqlite\sqlite3.c	/^  int iTab;              \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	sqlite\sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:
iTabCur	sqlite\sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTabCur	sqlite\sqlite3.c	/^  int iTabCur;       \/* The cursor of the corresponding table *\/$/;"	m	struct:IdxExprTrans	file:
iTabCur	sqlite\sqlite3.c	/^  int iTabCur;    \/* Cursor for the main table *\/$/;"	m	struct:CCurHint	file:
iTable	sqlite\sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	sqlite\sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	sqlite\sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	sqlite\sqlite3.c	/^  int iTable;               \/* Replace references to this table *\/$/;"	m	struct:SubstContext	file:
iTable	sqlite\sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	sqlite\sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	sqlite\sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermLeafOffset	sqlite\sqlite3.c	/^  int iTermLeafOffset;$/;"	m	struct:Fts5SegIter	file:
iTermLeafPgno	sqlite\sqlite3.c	/^  int iTermLeafPgno;$/;"	m	struct:Fts5SegIter	file:
iTermOffset	sqlite\sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iTnum	sqlite\sqlite3.c	/^  int iTnum;                      \/* Root page of current object *\/$/;"	m	struct:RbuObjIter	file:
iToken	sqlite\sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	sqlite\sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	sqlite\sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	sqlite\sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	sqlite\sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	sqlite\sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iType	sqlite\sqlite3.c	/^  int iType;$/;"	m	struct:CheckMutex	file:
iVal	sqlite\sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	sqlite\sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon3	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	sqlite\sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	sqlite\sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iWalCksum	sqlite\sqlite3.c	/^  i64 iWalCksum;$/;"	m	struct:RbuState	file:
iWalCksum	sqlite\sqlite3.c	/^  i64 iWalCksum;$/;"	m	struct:sqlite3rbu	file:
iWalFrame	sqlite\sqlite3.c	/^  u32 iWalFrame;$/;"	m	struct:RbuFrame	file:
iWrite	sqlite\sqlite3.c	/^  int iWrite;$/;"	m	struct:PoslistOffsetsCtx	file:
iWriteOff	sqlite\sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iWriteRowid	sqlite\sqlite3.c	/^  i64 iWriteRowid;                \/* Rowid for current doc being written *\/$/;"	m	struct:Fts5Index	file:
iWriteVer	sqlite\sqlite3.c	/^  u8 iWriteVer;                   \/* "write-version" value for main db files *\/$/;"	m	struct:rbu_file	file:
iZero	sqlite\sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	sqlite\sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	sqlite\sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	sqlite\sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	sqlite\sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	sqlite\sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	sqlite\sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	sqlite\sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	sqlite\sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	sqlite\sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	sqlite\sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	sqlite\sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	sqlite\sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	sqlite\sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	sqlite\sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
icuUtf8Trans1	sqlite\sqlite3.c	/^static const unsigned char icuUtf8Trans1[] = {$/;"	v	file:
id	sqlite\sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	sqlite\sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	sqlite\sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:
id	sqlite\sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	sqlite\sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	sqlite\sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
identLength	sqlite\sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	sqlite\sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	sqlite\sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxFlags	sqlite\sqlite3.c	/^  int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info	file:
idxHash	sqlite\sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	sqlite\sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon22::__anon24	file:
idxNum	sqlite\sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	sqlite\sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon22::__anon24	file:
idxStr	sqlite\sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxType	sqlite\sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:
idxaff	sqlite\sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:
impliesNotNullRow	sqlite\sqlite3.c	/^static int impliesNotNullRow(Walker *pWalker, Expr *pExpr){$/;"	f	file:
imposterTable	sqlite\sqlite3.c	/^    unsigned imposterTable : 1; \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
in	sqlite\sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon20	typeref:struct:WhereLevel::__anon20::__anon21	file:
in	sqlite\sqlite3.c	/^  SessionInput in;                \/* Input buffer or stream *\/$/;"	m	struct:sqlite3_changeset_iter	file:
inNormalWrite	sqlite\sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	sqlite\sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	sqlite\sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	sqlite\sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	sqlite\sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inWrTrans	sqlite\sqlite3.c	/^  u8 inWrTrans;               \/* True if inside write transaction *\/$/;"	m	struct:Rtree	file:
incrAggDepth	sqlite\sqlite3.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	sqlite\sqlite3.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrPhraseTokenNext	sqlite\sqlite3.c	/^static int incrPhraseTokenNext($/;"	f	file:
incrVacuum	sqlite\sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	sqlite\sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
indexColumnNotNull	sqlite\sqlite3.c	/^static int indexColumnNotNull(Index *pIdx, int iCol){$/;"	f	file:
indexMightHelpWithOrderBy	sqlite\sqlite3.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	sqlite\sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	sqlite\sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	sqlite\sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initAvgEq	sqlite\sqlite3.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	sqlite\sqlite3.c	130649;"	d	file:
initMemArray	sqlite\sqlite3.c	/^static void initMemArray(Mem *p, int N, sqlite3 *db, u16 flags){$/;"	f	file:
ino	sqlite\sqlite3.c	/^  u64 ino;                   \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	sqlite\sqlite3.c	/^static unixInodeInfo *inodeList = 0;  \/* All unixInodeInfo objects *\/$/;"	v	file:
insertBinaryOperator	sqlite\sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	sqlite\sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	sqlite\sqlite3.c	/^static void insertElement($/;"	f	file:
instrFunc	sqlite\sqlite3.c	/^static void instrFunc($/;"	f	file:
intKey	sqlite\sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:
intKeyLeaf	sqlite\sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:
intTestFunc	sqlite\sqlite3.c	/^static void intTestFunc($/;"	f	file:
integrityCheckResultRow	sqlite\sqlite3.c	/^static int integrityCheckResultRow(Vdbe *v){$/;"	f	file:
interruptx	sqlite\sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	sqlite\sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateIncrblobCursors	sqlite\sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	sqlite\sqlite3.c	62150;"	d	file:
invalidateOverflowCache	sqlite\sqlite3.c	62100;"	d	file:
invalidateTempStorage	sqlite\sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokeProfileCallback	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void invokeProfileCallback(sqlite3 *db, Vdbe *p){$/;"	f	file:
invokeValueDestructor	sqlite\sqlite3.c	/^static int invokeValueDestructor($/;"	f	file:
isAllZero	sqlite\sqlite3.c	/^static int isAllZero(const char *z, int n){$/;"	f	file:
isAnchor	sqlite\sqlite3.c	/^  u8 isAnchor;                   \/* This is the PGroup.lru element *\/$/;"	m	struct:PgHdr1	file:
isAttached	sqlite\sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isAuxiliaryVtabOperator	sqlite\sqlite3.c	/^static int isAuxiliaryVtabOperator($/;"	f	file:
isBulkLocal	sqlite\sqlite3.c	/^  u8 isBulkLocal;                \/* This page from bulk local storage *\/$/;"	m	struct:PgHdr1	file:
isCandidateForInOpt	sqlite\sqlite3.c	/^static Select *isCandidateForInOpt(Expr *pX){$/;"	f	file:
isConsonant	sqlite\sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	sqlite\sqlite3.c	/^      unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
isCovering	sqlite\sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:
isDate	sqlite\sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	sqlite\sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	sqlite\sqlite3.c	159348;"	d	file:
isDirty	sqlite\sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:
isDistinctRedundant	sqlite\sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	sqlite\sqlite3.c	/^  int isEof;                      \/* After pStmt has returned SQLITE_DONE *\/$/;"	m	struct:StatCursor	file:
isEof	sqlite\sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	sqlite\sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isEphemeral	sqlite\sqlite3.c	/^  Bool isEphemeral:1;     \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:
isError	sqlite\sqlite3.c	/^  char isError;       \/* An overflow has occurred *\/$/;"	m	struct:DateTime	file:
isError	sqlite\sqlite3.c	/^  int isError;            \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	sqlite\sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isIndexedBy	sqlite\sqlite3.c	/^      unsigned isIndexedBy :1;   \/* True if there is an INDEXED BY clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
isInit	sqlite\sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	sqlite\sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	sqlite\sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	sqlite\sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	sqlite\sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	sqlite\sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon1	file:
isLeftJoin	sqlite\sqlite3.c	/^  int isLeftJoin;           \/* Add TK_IF_NULL_ROW opcodes on each replacement *\/$/;"	m	struct:SubstContext	file:
isLikeOrGlob	sqlite\sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	sqlite\sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	sqlite\sqlite3.c	25805;"	d	file:
isMallocInit	sqlite\sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMalloced	sqlite\sqlite3.c	17492;"	d	file:
isMatchinfoNeeded	sqlite\sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	sqlite\sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	sqlite\sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNot	sqlite\sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	sqlite\sqlite3.c	49944;"	d	file:
isOrdered	sqlite\sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon22::__anon24	file:
isOrdered	sqlite\sqlite3.c	/^  Bool isOrdered:1;       \/* True if the table is not BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isOrdered	sqlite\sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:
isPCacheInit	sqlite\sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	sqlite\sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPrefix	sqlite\sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isReadonly	sqlite\sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isReadonly	sqlite\sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:winShmNode	file:
isRecursive	sqlite\sqlite3.c	/^      unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
isRequireSeek	sqlite\sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isResized	sqlite\sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:
isSelfJoinView	sqlite\sqlite3.c	/^static struct SrcList_item *isSelfJoinView($/;"	f	file:
isSetNullAction	sqlite\sqlite3.c	/^static int isSetNullAction(Parse *pParse, FKey *pFKey){$/;"	f	file:
isSimpleCount	sqlite\sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	sqlite\sqlite3.c	81337;"	d	file:
isSystemTable	sqlite\sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTabFunc	sqlite\sqlite3.c	/^      unsigned isTabFunc :1;     \/* True if table-valued-function syntax *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
isTable	sqlite\sqlite3.c	/^  u8 isTable;             \/* True for rowid tables.  False for indexes *\/$/;"	m	struct:VdbeCursor	file:
isTnct	sqlite\sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	sqlite\sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isUnlocked	sqlite\sqlite3.c	/^  u8 isUnlocked;             \/* True if no DMS lock held *\/$/;"	m	struct:unixShmNode	file:
isUnlocked	sqlite\sqlite3.c	/^  u8 isUnlocked;             \/* True if no DMS lock held *\/$/;"	m	struct:winShmNode	file:
isView	sqlite\sqlite3.c	108422;"	d	file:
isView	sqlite\sqlite3.c	108423;"	d	file:
isView	sqlite\sqlite3.c	108743;"	d	file:
isView	sqlite\sqlite3.c	112987;"	d	file:
isView	sqlite\sqlite3.c	112988;"	d	file:
isView	sqlite\sqlite3.c	113499;"	d	file:
isView	sqlite\sqlite3.c	127892;"	d	file:
isView	sqlite\sqlite3.c	127893;"	d	file:
isView	sqlite\sqlite3.c	128472;"	d	file:
isVowel	sqlite\sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	sqlite\sqlite3.c	/^  u8 isWriteLock;        \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
iter	sqlite\sqlite3.c	/^  CInstIter iter;                 \/* Coalesced Instance Iterator *\/$/;"	m	struct:HighlightContext	file:
ix	sqlite\sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
ix	sqlite\sqlite3.c	/^  u16 ix;                   \/* Current index for apPage[iPage] *\/$/;"	m	struct:BtCursor	file:
j	sqlite\sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	sqlite\sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jnFlags	sqlite\sqlite3.c	/^  u8 jnFlags;            \/* JNODE flags *\/$/;"	m	struct:JsonNode	file:
jointype	sqlite\sqlite3.c	/^      u8 jointype;      \/* Type of join between this table and the previous *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
journalHdr	sqlite\sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	sqlite\sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	sqlite\sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	sqlite\sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	sqlite\sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	sqlite\sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jsonAppendChar	sqlite\sqlite3.c	/^static void jsonAppendChar(JsonString *p, char c){$/;"	f	file:
jsonAppendRaw	sqlite\sqlite3.c	/^static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){$/;"	f	file:
jsonAppendSeparator	sqlite\sqlite3.c	/^static void jsonAppendSeparator(JsonString *p){$/;"	f	file:
jsonAppendString	sqlite\sqlite3.c	/^static void jsonAppendString(JsonString *p, const char *zIn, u32 N){$/;"	f	file:
jsonAppendValue	sqlite\sqlite3.c	/^static void jsonAppendValue($/;"	f	file:
jsonArrayFinal	sqlite\sqlite3.c	/^static void jsonArrayFinal(sqlite3_context *ctx){$/;"	f	file:
jsonArrayFunc	sqlite\sqlite3.c	/^static void jsonArrayFunc($/;"	f	file:
jsonArrayLengthFunc	sqlite\sqlite3.c	/^static void jsonArrayLengthFunc($/;"	f	file:
jsonArrayStep	sqlite\sqlite3.c	/^static void jsonArrayStep($/;"	f	file:
jsonEachBestIndex	sqlite\sqlite3.c	/^static int jsonEachBestIndex($/;"	f	file:
jsonEachClose	sqlite\sqlite3.c	/^static int jsonEachClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachColumn	sqlite\sqlite3.c	/^static int jsonEachColumn($/;"	f	file:
jsonEachComputePath	sqlite\sqlite3.c	/^static void jsonEachComputePath($/;"	f	file:
jsonEachConnect	sqlite\sqlite3.c	/^static int jsonEachConnect($/;"	f	file:
jsonEachCursorReset	sqlite\sqlite3.c	/^static void jsonEachCursorReset(JsonEachCursor *p){$/;"	f	file:
jsonEachDisconnect	sqlite\sqlite3.c	/^static int jsonEachDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
jsonEachEof	sqlite\sqlite3.c	/^static int jsonEachEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachFilter	sqlite\sqlite3.c	/^static int jsonEachFilter($/;"	f	file:
jsonEachModule	sqlite\sqlite3.c	/^static sqlite3_module jsonEachModule = {$/;"	v	file:
jsonEachNext	sqlite\sqlite3.c	/^static int jsonEachNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
jsonEachOpenEach	sqlite\sqlite3.c	/^static int jsonEachOpenEach(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
jsonEachOpenTree	sqlite\sqlite3.c	/^static int jsonEachOpenTree(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
jsonEachRowid	sqlite\sqlite3.c	/^static int jsonEachRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
jsonExtractFunc	sqlite\sqlite3.c	/^static void jsonExtractFunc($/;"	f	file:
jsonGrow	sqlite\sqlite3.c	/^static int jsonGrow(JsonString *p, u32 N){$/;"	f	file:
jsonInit	sqlite\sqlite3.c	/^static void jsonInit(JsonString *p, sqlite3_context *pCtx){$/;"	f	file:
jsonIs4Hex	sqlite\sqlite3.c	/^static int jsonIs4Hex(const char *z){$/;"	f	file:
jsonIsSpace	sqlite\sqlite3.c	/^static const char jsonIsSpace[] = {$/;"	v	file:
jsonLabelCompare	sqlite\sqlite3.c	/^static int jsonLabelCompare(JsonNode *pNode, const char *zKey, u32 nKey){$/;"	f	file:
jsonLookup	sqlite\sqlite3.c	/^static JsonNode *jsonLookup($/;"	f	file:
jsonLookupAppend	sqlite\sqlite3.c	/^static JsonNode *jsonLookupAppend($/;"	f	file:
jsonLookupStep	sqlite\sqlite3.c	/^static JsonNode *jsonLookupStep($/;"	f	file:
jsonMergePatch	sqlite\sqlite3.c	/^static JsonNode *jsonMergePatch($/;"	f	file:
jsonNodeSize	sqlite\sqlite3.c	/^static u32 jsonNodeSize(JsonNode *pNode){$/;"	f	file:
jsonObjectFinal	sqlite\sqlite3.c	/^static void jsonObjectFinal(sqlite3_context *ctx){$/;"	f	file:
jsonObjectFunc	sqlite\sqlite3.c	/^static void jsonObjectFunc($/;"	f	file:
jsonObjectStep	sqlite\sqlite3.c	/^static void jsonObjectStep($/;"	f	file:
jsonOom	sqlite\sqlite3.c	/^static void jsonOom(JsonString *p){$/;"	f	file:
jsonParse	sqlite\sqlite3.c	/^static int jsonParse($/;"	f	file:
jsonParseAddNode	sqlite\sqlite3.c	/^static int jsonParseAddNode($/;"	f	file:
jsonParseAddNodeExpand	sqlite\sqlite3.c	/^static JSON_NOINLINE int jsonParseAddNodeExpand($/;"	f	file:
jsonParseCached	sqlite\sqlite3.c	/^static JsonParse *jsonParseCached($/;"	f	file:
jsonParseFillInParentage	sqlite\sqlite3.c	/^static void jsonParseFillInParentage(JsonParse *pParse, u32 i, u32 iParent){$/;"	f	file:
jsonParseFindParents	sqlite\sqlite3.c	/^static int jsonParseFindParents(JsonParse *pParse){$/;"	f	file:
jsonParseFree	sqlite\sqlite3.c	/^static void jsonParseFree(JsonParse *pParse){$/;"	f	file:
jsonParseFunc	sqlite\sqlite3.c	/^static void jsonParseFunc($/;"	f	file:
jsonParseReset	sqlite\sqlite3.c	/^static void jsonParseReset(JsonParse *pParse){$/;"	f	file:
jsonParseValue	sqlite\sqlite3.c	/^static int jsonParseValue(JsonParse *pParse, u32 i){$/;"	f	file:
jsonPatchFunc	sqlite\sqlite3.c	/^static void jsonPatchFunc($/;"	f	file:
jsonPathSyntaxError	sqlite\sqlite3.c	/^static char *jsonPathSyntaxError(const char *zErr){$/;"	f	file:
jsonPrintf	sqlite\sqlite3.c	/^static void jsonPrintf(int N, JsonString *p, const char *zFormat, ...){$/;"	f	file:
jsonQuoteFunc	sqlite\sqlite3.c	/^static void jsonQuoteFunc($/;"	f	file:
jsonRemoveAllNulls	sqlite\sqlite3.c	/^static void jsonRemoveAllNulls(JsonNode *pNode){$/;"	f	file:
jsonRemoveFunc	sqlite\sqlite3.c	/^static void jsonRemoveFunc($/;"	f	file:
jsonRenderNode	sqlite\sqlite3.c	/^static void jsonRenderNode($/;"	f	file:
jsonReplaceFunc	sqlite\sqlite3.c	/^static void jsonReplaceFunc($/;"	f	file:
jsonReset	sqlite\sqlite3.c	/^static void jsonReset(JsonString *p){$/;"	f	file:
jsonResult	sqlite\sqlite3.c	/^static void jsonResult(JsonString *p){$/;"	f	file:
jsonReturn	sqlite\sqlite3.c	/^static void jsonReturn($/;"	f	file:
jsonReturnJson	sqlite\sqlite3.c	/^static void jsonReturnJson($/;"	f	file:
jsonSetFunc	sqlite\sqlite3.c	/^static void jsonSetFunc($/;"	f	file:
jsonTest1Func	sqlite\sqlite3.c	/^static void jsonTest1Func($/;"	f	file:
jsonTreeModule	sqlite\sqlite3.c	/^static sqlite3_module jsonTreeModule = {$/;"	v	file:
jsonType	sqlite\sqlite3.c	/^static const char * const jsonType[] = {$/;"	v	file:
jsonTypeFunc	sqlite\sqlite3.c	/^static void jsonTypeFunc($/;"	f	file:
jsonValidFunc	sqlite\sqlite3.c	/^static void jsonValidFunc($/;"	f	file:
jsonWrongNumArgs	sqlite\sqlite3.c	/^static void jsonWrongNumArgs($/;"	f	file:
jsonZero	sqlite\sqlite3.c	/^static void jsonZero(JsonString *p){$/;"	f	file:
juliandayFunc	sqlite\sqlite3.c	/^static void juliandayFunc($/;"	f	file:
k	sqlite\sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:
key	sqlite\sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
keyClass	sqlite\sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	sqlite\sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	sqlite\sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
keyinfo	sqlite\sqlite3.c	/^  KeyInfo keyinfo;$/;"	m	struct:PreUpdate	file:
keywordCode	sqlite\sqlite3.c	/^static int keywordCode(const char *z, int n, int *pType){$/;"	f	file:
labelBkOut	sqlite\sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
labelDone	sqlite\sqlite3.c	/^  int labelDone;        \/* Jump here when done, ex: LIMIT reached *\/$/;"	m	struct:SortCtx	file:
langidFromSelect	sqlite\sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	sqlite\sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	sqlite\sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	sqlite\sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	sqlite\sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	sqlite\sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
last_insert_rowid	sqlite\sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	sqlite\sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	sqlite\sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:
leaveMutex	sqlite\sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	sqlite\sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon25	file:
leftCursor	sqlite\sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	sqlite\sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	sqlite\sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	sqlite\sqlite3.c	/^  YYCODETYPE lhs;       \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon28	file:
lhs	sqlite\sqlite3.c	/^  fts5YYCODETYPE lhs;       \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon32	file:
libversion	sqlite\sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	sqlite\sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	sqlite\sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	sqlite\sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	sqlite\sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	sqlite\sqlite3.c	12778;"	d	file:
limit	sqlite\sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
list	sqlite\sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon14	typeref:struct:Mem3Block::__anon14::__anon16	file:
list	sqlite\sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	sqlite\sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
loadAnalysis	sqlite\sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	sqlite\sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	sqlite\sqlite3.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	sqlite\sqlite3.c	/^static int loadStatTbl($/;"	f	file:
load_extension	sqlite\sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:
local	sqlite\sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	sqlite\sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localtime	sqlite\sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	sqlite\sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
lock	sqlite\sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	sqlite\sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	sqlite\sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	sqlite\sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	sqlite\sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	sqlite\sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	sqlite\sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	sqlite\sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	sqlite\sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	sqlite\sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	sqlite\sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	sqlite\sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	sqlite\sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	sqlite\sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	sqlite\sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	sqlite\sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	sqlite\sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lru	sqlite\sqlite3.c	/^  PgHdr1 lru;                    \/* The beginning and end of the LRU list *\/$/;"	m	struct:PGroup	file:
lseek	sqlite\sqlite3.c	31574;"	d	file:
m	sqlite\sqlite3.c	/^  int h, m;           \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	sqlite\sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
mDbFlags	sqlite\sqlite3.c	/^  u32 mDbFlags;                 \/* flags recording internal state *\/$/;"	m	struct:sqlite3	file:
mFlags	sqlite\sqlite3.c	/^  unsigned mFlags;                \/* Flags *\/$/;"	m	struct:MemFile	file:
mLock	sqlite\sqlite3.c	/^  u32 mLock;$/;"	m	struct:sqlite3rbu	file:
mPragFlg	sqlite\sqlite3.c	/^  u8 mPragFlg;             \/* Zero or more PragFlg_XXX values *\/$/;"	m	struct:PragmaName	file:
mTrace	sqlite\sqlite3.c	/^  u8 mTrace;                    \/* zero or more SQLITE_TRACE flags *\/$/;"	m	struct:sqlite3	file:
m_eq_1	sqlite\sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	sqlite\sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	sqlite\sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	sqlite\sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	sqlite\sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic1	sqlite\sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	sqlite\sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
major	sqlite\sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
major	sqlite\sqlite3.c	/^  fts5YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:fts5yyStackEntry	file:
malloc	sqlite\sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
malloc64	sqlite\sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	sqlite\sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	sqlite\sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	sqlite\sqlite3.c	/^static void mallocWithAlarm(int n, void **pp){$/;"	f	file:
markTermAsChild	sqlite\sqlite3.c	/^static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){$/;"	f	file:
mask	sqlite\sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon26::__anon27	file:
maskLoop	sqlite\sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:
maskPage	sqlite\sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
maskSelf	sqlite\sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:
maskUsed	sqlite\sqlite3.c	/^  u64 maskUsed;           \/* Mask of columns used by this cursor *\/$/;"	m	struct:VdbeCursor	file:
matchAll	sqlite\sqlite3.c	/^  u8 matchAll;          \/* "*" or "%" *\/$/;"	m	struct:compareInfo	file:
matchOne	sqlite\sqlite3.c	/^  u8 matchOne;          \/* "?" or "_" *\/$/;"	m	struct:compareInfo	file:
matchQuality	sqlite\sqlite3.c	/^static int matchQuality($/;"	f	file:
matchSet	sqlite\sqlite3.c	/^  u8 matchSet;          \/* "[" or 0 *\/$/;"	m	struct:compareInfo	file:
max1bytePayload	sqlite\sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	sqlite\sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	sqlite\sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	sqlite\sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite\sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite\sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	sqlite\sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	sqlite\sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	sqlite\sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
measureAllocationSize	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	sqlite\sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon13	file:
mem0	sqlite\sqlite3.c	/^} mem0 = { 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	sqlite\sqlite3.c	25579;"	d	file:
mem3	sqlite\sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	sqlite\sqlite3.c	22731;"	d	file:
mem5	sqlite\sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	sqlite\sqlite3.c	23417;"	d	file:
memAboutToChange	sqlite\sqlite3.c	81193;"	d	file:
memAboutToChange	sqlite\sqlite3.c	81195;"	d	file:
memDb	sqlite\sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIntValue	sqlite\sqlite3.c	/^static SQLITE_NOINLINE i64 memIntValue(Mem *pMem){$/;"	f	file:
memIsValid	sqlite\sqlite3.c	19293;"	d	file:
memRealValue	sqlite\sqlite3.c	/^static SQLITE_NOINLINE double memRealValue(Mem *pMem){$/;"	f	file:
memTracePrint	sqlite\sqlite3.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
memcpy	sqlite\sqlite3.c	13069;"	d	file:
memdbAccess	sqlite\sqlite3.c	/^static int memdbAccess($/;"	f	file:
memdbClose	sqlite\sqlite3.c	/^static int memdbClose(sqlite3_file *pFile){$/;"	f	file:
memdbCurrentTimeInt64	sqlite\sqlite3.c	/^static int memdbCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p){$/;"	f	file:
memdbDeviceCharacteristics	sqlite\sqlite3.c	/^static int memdbDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
memdbDlClose	sqlite\sqlite3.c	/^static void memdbDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
memdbDlError	sqlite\sqlite3.c	/^static void memdbDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
memdbDlOpen	sqlite\sqlite3.c	/^static void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
memdbDlSym	sqlite\sqlite3.c	/^static void (*memdbDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))(void){$/;"	f	file:
memdbEnlarge	sqlite\sqlite3.c	/^static int memdbEnlarge(MemFile *p, sqlite3_int64 newSz){$/;"	f	file:
memdbFetch	sqlite\sqlite3.c	/^static int memdbFetch($/;"	f	file:
memdbFileControl	sqlite\sqlite3.c	/^static int memdbFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
memdbFileSize	sqlite\sqlite3.c	/^static int memdbFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
memdbFromDbSchema	sqlite\sqlite3.c	/^static MemFile *memdbFromDbSchema(sqlite3 *db, const char *zSchema){$/;"	f	file:
memdbFullPathname	sqlite\sqlite3.c	/^static int memdbFullPathname($/;"	f	file:
memdbGetLastError	sqlite\sqlite3.c	/^static int memdbGetLastError(sqlite3_vfs *pVfs, int a, char *b){$/;"	f	file:
memdbLock	sqlite\sqlite3.c	/^static int memdbLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
memdbOpen	sqlite\sqlite3.c	/^static int memdbOpen($/;"	f	file:
memdbRandomness	sqlite\sqlite3.c	/^static int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
memdbRead	sqlite\sqlite3.c	/^static int memdbRead($/;"	f	file:
memdbSleep	sqlite\sqlite3.c	/^static int memdbSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
memdbSync	sqlite\sqlite3.c	/^static int memdbSync(sqlite3_file *pFile, int flags){$/;"	f	file:
memdbTruncate	sqlite\sqlite3.c	/^static int memdbTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
memdbUnfetch	sqlite\sqlite3.c	/^static int memdbUnfetch(sqlite3_file *pFile, sqlite3_int64 iOfst, void *pPage){$/;"	f	file:
memdbWrite	sqlite\sqlite3.c	/^static int memdbWrite($/;"	f	file:
memdb_io_methods	sqlite\sqlite3.c	/^static const sqlite3_io_methods memdb_io_methods = {$/;"	v	file:
memdb_vfs	sqlite\sqlite3.c	/^static sqlite3_vfs memdb_vfs = {$/;"	v	file:
memjrnlClose	sqlite\sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlCreateFile	sqlite\sqlite3.c	/^static int memjrnlCreateFile(MemJournal *p){$/;"	f	file:
memjrnlFileSize	sqlite\sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlFreeChunks	sqlite\sqlite3.c	/^static void memjrnlFreeChunks(MemJournal *p){$/;"	f	file:
memjrnlRead	sqlite\sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	sqlite\sqlite3.c	/^static int memjrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
memjrnlTruncate	sqlite\sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	sqlite\sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	sqlite\sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	sqlite\sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	sqlite\sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	sqlite\sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	sqlite\sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	sqlite\sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	sqlite\sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	sqlite\sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	sqlite\sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	sqlite\sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	sqlite\sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	sqlite\sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	sqlite\sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	sqlite\sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	sqlite\sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	sqlite\sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	sqlite\sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	sqlite\sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	sqlite\sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	sqlite\sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	sqlite\sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	sqlite\sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	sqlite\sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	sqlite\sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	sqlite\sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	sqlite\sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	sqlite\sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	sqlite\sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	sqlite\sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	sqlite\sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	sqlite\sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	sqlite\sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	sqlite\sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	sqlite\sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	sqlite\sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
minFrame	sqlite\sqlite3.c	/^  u32 minFrame;              \/* Ignore wal frames before this one *\/$/;"	m	struct:Wal	file:
minLeaf	sqlite\sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite\sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite\sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	sqlite\sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	sqlite\sqlite3.c	/^static u8 minMaxQuery(sqlite3 *db, Expr *pFunc, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	sqlite\sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	sqlite\sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	sqlite\sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	sqlite\sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
minor	sqlite\sqlite3.c	/^  fts5YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:fts5yyStackEntry	file:
mkFullPathname	sqlite\sqlite3.c	/^static int mkFullPathname($/;"	f	file:
mmapSize	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	sqlite\sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mnMaster	sqlite\sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	sqlite\sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	sqlite\sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mnReq	sqlite\sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	sqlite\sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	sqlite\sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	sqlite\sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	sqlite\sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	sqlite\sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	sqlite\sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	sqlite\sqlite3.c	/^  i64 movetoTarget;       \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	sqlite\sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msize	sqlite\sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	sqlite\sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	sqlite\sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	sqlite\sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	sqlite\sqlite3.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
multiSelectValues	sqlite\sqlite3.c	/^static int multiSelectValues($/;"	f	file:
multiThreadedCheckMutex	sqlite\sqlite3.c	/^sqlite3_mutex_methods const *multiThreadedCheckMutex(void){$/;"	f
mutex	sqlite\sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite\sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;           \/* Mutex to protect pMain *\/$/;"	m	struct:rbu_vfs	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:CheckMutex	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon13	file:
mutex	sqlite\sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	sqlite\sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	sqlite\sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	sqlite\sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	sqlite\sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	sqlite\sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	sqlite\sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	sqlite\sqlite3.c	/^  u32  mxAlloc;        \/* Maximum allowed allocation.  0 for no malloc usage *\/$/;"	m	struct:StrAccum	file:
mxCurrent	sqlite\sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon13	file:
mxErr	sqlite\sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	sqlite\sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	sqlite\sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxLevel	sqlite\sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
mxLevel	sqlite\sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:
mxMmap	sqlite\sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:
mxParserStack	sqlite\sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	sqlite\sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	sqlite\sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPgno	sqlite\sqlite3.c	/^  int mxPgno;                     \/* Last page to visit on this scan *\/$/;"	m	struct:DbpageCursor	file:
mxPinned	sqlite\sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	sqlite\sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	sqlite\sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mxReq	sqlite\sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	sqlite\sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxSavepoint	sqlite\sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	sqlite\sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxSz	sqlite\sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	sqlite\sqlite3.c	/^  sqlite3StatValueType mxValue[10];   \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	sqlite\sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	sqlite\sqlite3.c	/^    int n;                                    \/* A counter *\/$/;"	m	union:Walker::__anon10	file:
n	sqlite\sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Size of buffer a[] in bytes *\/$/;"	m	struct:Fts5LookaheadReader	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Size of buffer at a[] in bytes *\/$/;"	m	struct:Fts5PoslistReader	file:
n	sqlite\sqlite3.c	/^  int n;                          \/* Size of buffer p in bytes *\/$/;"	m	struct:Fts5Token	file:
n	sqlite\sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	sqlite\sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:sqlite3_value	file:
n	sqlite\sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:
n	sqlite\sqlite3.c	/^  int n;$/;"	m	struct:Fts5Buffer	file:
n	sqlite\sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:
n	sqlite\sqlite3.c	/^  u32 n;                 \/* Bytes of content, or number of sub-nodes *\/$/;"	m	struct:JsonNode	file:
n	sqlite\sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	sqlite\sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	sqlite\sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	sqlite\sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAll	sqlite\sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAllField	sqlite\sqlite3.c	/^  u16 nAllField;      \/* Total columns, including key plus others *\/$/;"	m	struct:KeyInfo	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                     \/* Size of allocation containing aBuf *\/$/;"	m	struct:SessionBuffer	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                     \/* Total size of allocation *\/$/;"	m	struct:Fts5HashEntry	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nAlloc	sqlite\sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon13	file:
nAlloc	sqlite\sqlite3.c	/^  u32  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	sqlite\sqlite3.c	/^  u32 nAlloc;        \/* Number of slots of aNode[] allocated *\/$/;"	m	struct:JsonParse	file:
nAlloc	sqlite\sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	sqlite\sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	sqlite\sqlite3.c	/^  u64 nAlloc;              \/* Bytes of storage available in zBuf[] *\/$/;"	m	struct:JsonString	file:
nAlloc	sqlite\sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	sqlite\sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	sqlite\sqlite3.c	/^  i8 nArg;             \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nArg	sqlite\sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:
nAuthPW	sqlite\sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:
nAutoincrmerge	sqlite\sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:
nAutomerge	sqlite\sqlite3.c	/^  int nAutomerge;                 \/* 'automerge' setting *\/$/;"	m	struct:Fts5Config	file:
nBackfill	sqlite\sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBackfillAttempted	sqlite\sqlite3.c	/^  u32 nBackfillAttempted;         \/* WAL frames perhaps written, or maybe not *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	sqlite\sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	sqlite\sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon13	file:
nBacktraceSlots	sqlite\sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	sqlite\sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	sqlite\sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBtm	sqlite\sqlite3.c	/^      u16 nBtm;              \/* Size of BTM vector *\/$/;"	m	struct:WhereLoop::__anon22::__anon23	file:
nBuf	sqlite\sqlite3.c	/^  int nBuf;                       \/* Size of buffer aBuf *\/$/;"	m	struct:SessionBuffer	file:
nBuffer	sqlite\sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	sqlite\sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	sqlite\sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBuffer	sqlite\sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	sqlite\sqlite3.c	/^  int nBusy;                        \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nBusy	sqlite\sqlite3.c	/^  u32 nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nByte	sqlite\sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	sqlite\sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	sqlite\sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	sqlite\sqlite3.c	/^  int nCell;                      \/* Number of cells on page *\/$/;"	m	struct:StatPage	file:
nCell	sqlite\sqlite3.c	/^  int nCell;                      \/* Value of 'ncell' column *\/$/;"	m	struct:StatCursor	file:
nCell	sqlite\sqlite3.c	/^  int nCell;              \/* Number of cells in apCell[] *\/$/;"	m	struct:CellArray	file:
nCell	sqlite\sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	sqlite\sqlite3.c	/^  int nChange;                    \/* Size of apChange[] array *\/$/;"	m	struct:SessionTable	file:
nChange	sqlite\sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	sqlite\sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	sqlite\sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	sqlite\sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChar	sqlite\sqlite3.c	/^  u32  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChild	sqlite\sqlite3.c	/^  int nChild;                     \/* Number of child nodes *\/$/;"	m	struct:Fts5ExprNode	file:
nChild	sqlite\sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	sqlite\sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	sqlite\sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChunkSize	sqlite\sqlite3.c	/^  int nChunkSize;                 \/* In-memory chunk-size *\/$/;"	m	struct:MemJournal	file:
nCkpt	sqlite\sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	sqlite\sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns *\/$/;"	m	struct:Fts5Config	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns in current object *\/$/;"	m	struct:RbuObjIter	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns in table zName *\/$/;"	m	struct:SessionTable	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Number of columns in zTab *\/$/;"	m	struct:sqlite3_changeset_iter	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                       \/* Size of azCol[] and abPK[] arrays *\/$/;"	m	struct:SessionApplyCtx	file:
nCol	sqlite\sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	sqlite\sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nCol	sqlite\sqlite3.c	/^  int nCol;$/;"	m	struct:Fts5Colset	file:
nColCache	sqlite\sqlite3.c	/^  u8 nColCache;        \/* Number of entries in aColCache[] *\/$/;"	m	struct:Parse	file:
nColumn	sqlite\sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	sqlite\sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	sqlite\sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:
nColumn	sqlite\sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConstraint	sqlite\sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	sqlite\sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCoord	sqlite\sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nCost	sqlite\sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCrisisMerge	sqlite\sqlite3.c	/^  int nCrisisMerge;               \/* Maximum allowed segments per level *\/$/;"	m	struct:Fts5Config	file:
nCsr	sqlite\sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCte	sqlite\sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:
nCurrent	sqlite\sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon13	file:
nCursor	sqlite\sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	sqlite\sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nCursor	sqlite\sqlite3.c	/^  u32 nCursor;                \/* Number of open cursors *\/$/;"	m	struct:Rtree	file:
nData	sqlite\sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	sqlite\sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	sqlite\sqlite3.c	/^  int nData;                      \/* Number of bytes in aData *\/$/;"	m	struct:SessionInput	file:
nData	sqlite\sqlite3.c	/^  int nData;                      \/* Total bytes of data (incl. structure) *\/$/;"	m	struct:Fts5HashEntry	file:
nData	sqlite\sqlite3.c	/^  int nData;              \/* Size of pData.  0 if none. *\/$/;"	m	struct:BtreePayload	file:
nData	sqlite\sqlite3.c	/^  int nData;$/;"	m	struct:Fts5IndexIter	file:
nData	sqlite\sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	sqlite\sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	sqlite\sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDbChange	sqlite\sqlite3.c	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame	file:
nDeferredCons	sqlite\sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	sqlite\sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDeferredImmCons	sqlite\sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:
nDeferredImmCons	sqlite\sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:
nDim	sqlite\sqlite3.c	/^  int nDim;                       \/* Number of dimensions for this rtree tbl *\/$/;"	m	struct:RtreeCheck	file:
nDim	sqlite\sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDim2	sqlite\sqlite3.c	/^  u8 nDim2;                   \/* Twice the number of dimensions *\/$/;"	m	struct:Rtree	file:
nDlidx	sqlite\sqlite3.c	/^  int nDlidx;                     \/* Allocated size of aDlidx[] array *\/$/;"	m	struct:Fts5SegWriter	file:
nDoc	sqlite\sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	sqlite\sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	sqlite\sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	sqlite\sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nElem	sqlite\sqlite3.c	/^  int nElem;$/;"	m	struct:MatchinfoBuffer	file:
nEmpty	sqlite\sqlite3.c	/^  int nEmpty;                     \/* Number of contiguous term-less nodes *\/$/;"	m	struct:Fts5SegWriter	file:
nEntry	sqlite\sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	sqlite\sqlite3.c	/^  int nEntry;                     \/* Number of entries currently in hash *\/$/;"	m	struct:Fts5Hash	file:
nEntry	sqlite\sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEntry	sqlite\sqlite3.c	/^  int nEntry;                     \/* Total number of entries in hash table *\/$/;"	m	struct:SessionTable	file:
nEq	sqlite\sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon22::__anon23	file:
nEquiv	sqlite\sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
nErr	sqlite\sqlite3.c	/^  int nErr;                       \/* Number of lines in zReport *\/$/;"	m	struct:RtreeCheck	file:
nErr	sqlite\sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	sqlite\sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	sqlite\sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nErr	sqlite\sqlite3.c	/^  u8 nErr;           \/* Number of errors seen *\/$/;"	m	struct:JsonParse	file:
nEst	sqlite\sqlite3.c	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus	file:
nException	sqlite\sqlite3.c	/^  int nException;$/;"	m	struct:Unicode61Tokenizer	file:
nException	sqlite\sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	sqlite\sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	sqlite\sqlite3.c	/^  u32 nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	sqlite\sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	sqlite\sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFails	sqlite\sqlite3.c	/^  int nFails;                  \/* Number of conch taking failures *\/$/;"	m	struct:proxyLockingContext	file:
nFetchOut	sqlite\sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	sqlite\sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	sqlite\sqlite3.c	/^  i16 nField;             \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	sqlite\sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nFirst	sqlite\sqlite3.c	/^  int nFirst;                     \/* Number of entries in aFirst[] *\/$/;"	m	struct:Fts5SFinder	file:
nFirstAlloc	sqlite\sqlite3.c	/^  int nFirstAlloc;                \/* Allocated size of aFirst[] *\/$/;"	m	struct:Fts5SFinder	file:
nFkConstraint	sqlite\sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFold	sqlite\sqlite3.c	/^  int nFold;                      \/* Size of aFold[] in bytes *\/$/;"	m	struct:Unicode61Tokenizer	file:
nFrame	sqlite\sqlite3.c	/^  int nFrame;                     \/* Entries in aFrame[] array *\/$/;"	m	struct:sqlite3rbu	file:
nFrame	sqlite\sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFrameAlloc	sqlite\sqlite3.c	/^  int nFrameAlloc;                \/* Allocated size of aFrame[] array *\/$/;"	m	struct:sqlite3rbu	file:
nFree	sqlite\sqlite3.c	/^  int nFree;           \/* Bytes of available memory *\/$/;"	m	struct:ReusableSpace	file:
nFree	sqlite\sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	sqlite\sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	sqlite\sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	sqlite\sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	sqlite\sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHashSize	sqlite\sqlite3.c	/^  int nHashSize;                  \/* Bytes of memory for in-memory hash *\/$/;"	m	struct:Fts5Config	file:
nHdrParsed	sqlite\sqlite3.c	/^  u16 nHdrParsed;         \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:
nHeap	sqlite\sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	sqlite\sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	sqlite\sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nHidden	sqlite\sqlite3.c	/^  u8 nHidden;               \/* Number of hidden columns *\/$/;"	m	struct:PragmaVtab	file:
nId	sqlite\sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIdx	sqlite\sqlite3.c	/^  int nIdx;                       \/* Number of entries in aIdx[] *\/$/;"	m	struct:Fts5Sorter	file:
nIdxCol	sqlite\sqlite3.c	/^      u16 nIdxCol;           \/* Index column used for ORDER BY *\/$/;"	m	struct:WhereLoop::__anon22::__anon23	file:
nIn	sqlite\sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon20::__anon21	file:
nIn	sqlite\sqlite3.c	/^  int nIn;                        \/* Size of input text in bytes *\/$/;"	m	struct:HighlightContext	file:
nIndex	sqlite\sqlite3.c	/^  int nIndex;                     \/* Number of aux. indexes on table zTbl *\/$/;"	m	struct:RbuObjIter	file:
nIndex	sqlite\sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInitPage	sqlite\sqlite3.c	/^  int nInitPage;                 \/* Initial bulk allocation size *\/   $/;"	m	struct:PCacheGlobal	file:
nInput	sqlite\sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	sqlite\sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nInst	sqlite\sqlite3.c	/^  int nInst;                      \/* Total number of phrase instances *\/$/;"	m	struct:CInstIter	file:
nInstAlloc	sqlite\sqlite3.c	/^  int nInstAlloc;                 \/* Size of aInst[] array (entries \/ 3) *\/$/;"	m	struct:Fts5Cursor	file:
nInstCount	sqlite\sqlite3.c	/^  int nInstCount;                 \/* Number of phrase instances *\/$/;"	m	struct:Fts5Cursor	file:
nJson	sqlite\sqlite3.c	/^  int nJson;         \/* Length of the zJson string in bytes *\/$/;"	m	struct:JsonParse	file:
nKey	sqlite\sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	sqlite\sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:
nKey	sqlite\sqlite3.c	/^  int nKey;                       \/* Length of key in bytes *\/$/;"	m	struct:Fts5HashEntry	file:
nKey	sqlite\sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKey	sqlite\sqlite3.c	/^  sqlite3_int64 nKey;     \/* Size of pKey for indexes.  PRIMARY KEY for tabs *\/$/;"	m	struct:BtreePayload	file:
nKey	sqlite\sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nKeyCol	sqlite\sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	sqlite\sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:
nKeyField	sqlite\sqlite3.c	/^  u16 nKeyField;      \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:
nLSlot	sqlite\sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLTerm	sqlite\sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLabel	sqlite\sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:
nLastOvfl	sqlite\sqlite3.c	/^  int nLastOvfl;                  \/* Bytes of payload on final overflow page *\/$/;"	m	struct:StatCell	file:
nLeTerm	sqlite\sqlite3.c	/^  int nLeTerm;                    \/* Size of zLeTerm in bytes *\/$/;"	m	struct:Fts5VocabCursor	file:
nLeaf	sqlite\sqlite3.c	/^  int nLeaf;                      \/* Number of leaf cells in table *\/$/;"	m	struct:RtreeCheck	file:
nLeafAdd	sqlite\sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafData	sqlite\sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:
nLeafData	sqlite\sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafEst	sqlite\sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafWritten	sqlite\sqlite3.c	/^  int nLeafWritten;               \/* Number of leaf pages written *\/$/;"	m	struct:Fts5SegWriter	file:
nLevel	sqlite\sqlite3.c	/^  int nLevel;                     \/* Number of levels in this index *\/$/;"	m	struct:Fts5Structure	file:
nLevel	sqlite\sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	sqlite\sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nList	sqlite\sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:
nLocal	sqlite\sqlite3.c	/^  int nLocal;                     \/* Bytes of local payload *\/$/;"	m	struct:StatCell	file:
nLocal	sqlite\sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:
nLock	sqlite\sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	sqlite\sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nLvl	sqlite\sqlite3.c	/^  int nLvl;$/;"	m	struct:Fts5DlidxIter	file:
nMalloc	sqlite\sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	sqlite\sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMax	sqlite\sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	sqlite\sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxEqZero	sqlite\sqlite3.c	/^  int nMaxEqZero;           \/* Max leading 0 in anEq[] for any a[] entry *\/$/;"	m	struct:Stat4Accum	file:
nMaxPage	sqlite\sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	sqlite\sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMaxSorterMmap	sqlite\sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:
nMem	sqlite\sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	sqlite\sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	sqlite\sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	sqlite\sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMem	sqlite\sqlite3.c	/^  u16 nMem;               \/* Number of aMem[] value.  Might be zero *\/$/;"	m	struct:BtreePayload	file:
nMemory	sqlite\sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMerge	sqlite\sqlite3.c	/^  int nMerge;                     \/* Number of segments in incr-merge *\/$/;"	m	struct:Fts5StructureLevel	file:
nMin	sqlite\sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	sqlite\sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmap	sqlite\sqlite3.c	/^  int nMmap;                      \/* Number of memory mapped pages *\/$/;"	m	struct:MemFile	file:
nMmapOut	sqlite\sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	sqlite\sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nMxPayload	sqlite\sqlite3.c	/^  int nMxPayload;                 \/* Largest payload of any cell on this page *\/$/;"	m	struct:StatPage	file:
nMxPayload	sqlite\sqlite3.c	/^  int nMxPayload;                 \/* Value of 'mx_payload' column *\/$/;"	m	struct:StatCursor	file:
nName	sqlite\sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nName	sqlite\sqlite3.c	/^  u8 nName;           \/* Length of th name *\/$/;"	m	struct:__anon12	file:
nNear	sqlite\sqlite3.c	/^  int nNear;                      \/* NEAR parameter *\/$/;"	m	struct:Fts5ExprNearset	file:
nNear	sqlite\sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNeeded	sqlite\sqlite3.c	/^  int nNeeded;         \/* Total bytes that could not be allocated *\/$/;"	m	struct:ReusableSpace	file:
nNest	sqlite\sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	sqlite\sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	sqlite\sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNode	sqlite\sqlite3.c	/^  u32 nNode;         \/* Number of slots of aNode[] used *\/$/;"	m	struct:JsonParse	file:
nNodeSize	sqlite\sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nNonLeaf	sqlite\sqlite3.c	/^  int nNonLeaf;                   \/* Number of non-leaf cells in table *\/$/;"	m	struct:RtreeCheck	file:
nOBSat	sqlite\sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:
nOBSat	sqlite\sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOcc	sqlite\sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	sqlite\sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOldOff	sqlite\sqlite3.c	/^  int nOldOff;$/;"	m	struct:SessionDiffCtx	file:
nOp	sqlite\sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	sqlite\sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	sqlite\sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	sqlite\sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
nOrderBy	sqlite\sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	sqlite\sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	sqlite\sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	sqlite\sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:
nOut	sqlite\sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:
nOutput	sqlite\sqlite3.c	/^  int nOutput;$/;"	m	struct:PorterRule	file:
nOverflow	sqlite\sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	sqlite\sqlite3.c	/^  int nOvfl;                      \/* Entries in aOvfl[] *\/$/;"	m	struct:StatCell	file:
nOvfl	sqlite\sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nPMA	sqlite\sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	sqlite\sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	sqlite\sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	sqlite\sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	sqlite\sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	sqlite\sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	sqlite\sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagePerSector	sqlite\sqlite3.c	/^  int nPagePerSector;             \/* Pages per sector for pTargetFd *\/$/;"	m	struct:sqlite3rbu	file:
nPagecount	sqlite\sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	sqlite\sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nParam	sqlite\sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	sqlite\sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
nPayload	sqlite\sqlite3.c	/^  int nPayload;                   \/* Value of 'payload' column *\/$/;"	m	struct:StatCursor	file:
nPayload	sqlite\sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	sqlite\sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPendingData	sqlite\sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts5Index	file:
nPgsz	sqlite\sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhaseOneStep	sqlite\sqlite3.c	/^  i64 nPhaseOneStep;$/;"	m	struct:RbuState	file:
nPhaseOneStep	sqlite\sqlite3.c	/^  i64 nPhaseOneStep;$/;"	m	struct:sqlite3rbu	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of entries in aPhrase[] array *\/$/;"	m	struct:Fts5ExprNearset	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in expression *\/$/;"	m	struct:Fts5Expr	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:Fts5Bm25Data	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPhrase	sqlite\sqlite3.c	/^  int nPhrase;                    \/* Size of apPhrase array *\/$/;"	m	struct:Fts5Parse	file:
nPoint	sqlite\sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPointAlloc	sqlite\sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPool	sqlite\sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	sqlite\sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPos	sqlite\sqlite3.c	/^  int nPos;                       \/* Number of bytes in current position list *\/$/;"	m	struct:Fts5SegIter	file:
nPoslist	sqlite\sqlite3.c	/^  int nPoslist;$/;"	m	struct:Fts5DoclistIter	file:
nPragCName	sqlite\sqlite3.c	/^  u8 nPragCName;           \/* Num of col names. 0 means use pragma name *\/$/;"	m	struct:PragmaName	file:
nPrefix	sqlite\sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nPrefix	sqlite\sqlite3.c	/^  int nPrefix;                    \/* Number of prefix indexes *\/$/;"	m	struct:Fts5Config	file:
nProgress	sqlite\sqlite3.c	/^  i64 nProgress;$/;"	m	struct:RbuState	file:
nProgress	sqlite\sqlite3.c	/^  int nProgress;                  \/* Rows processed for all objects *\/$/;"	m	struct:sqlite3rbu	file:
nProgressOps	sqlite\sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nPurgeable	sqlite\sqlite3.c	/^  unsigned int nPurgeable;       \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nQueryLoop	sqlite\sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:
nRangeReg	sqlite\sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRankArg	sqlite\sqlite3.c	/^  int nRankArg;                   \/* Number of trailing arguments for rank() *\/$/;"	m	struct:Fts5Cursor	file:
nRbu	sqlite\sqlite3.c	/^  int nRbu;                       \/* Number of RBU VFS in the stack *\/$/;"	m	struct:sqlite3rbu	file:
nRead	sqlite\sqlite3.c	/^  int nRead;                      \/* Total number of blocks read *\/$/;"	m	struct:Fts5Index	file:
nRead	sqlite\sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	sqlite\sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	sqlite\sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	sqlite\sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:
nRecord	sqlite\sqlite3.c	/^  int nRecord;                    \/* Number of bytes in buffer aRecord[] *\/$/;"	m	struct:SessionChange	file:
nRecyclable	sqlite\sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	sqlite\sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                       \/* Object reference count *\/$/;"	m	struct:Fts5Structure	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	sqlite\sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	sqlite\sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	sqlite\sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	sqlite\sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	sqlite\sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:
nRef	sqlite\sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	sqlite\sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	sqlite\sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRefSum	sqlite\sqlite3.c	/^  int nRefSum;                        \/* Sum of ref counts over all pages *\/$/;"	m	struct:PCache	file:
nRegion	sqlite\sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	sqlite\sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	sqlite\sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	sqlite\sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	sqlite\sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	sqlite\sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	sqlite\sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:
nRow	sqlite\sqlite3.c	/^  int nRow;$/;"	m	struct:RbuState	file:
nRow	sqlite\sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	sqlite\sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	sqlite\sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	sqlite\sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:
nRowEst0	sqlite\sqlite3.c	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index	file:
nRowLogEst	sqlite\sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	sqlite\sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nRowid	sqlite\sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nRowidOffset	sqlite\sqlite3.c	/^  int nRowidOffset;               \/* Allocated size of aRowidOffset[] array *\/$/;"	m	struct:Fts5SegIter	file:
nSample	sqlite\sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	sqlite\sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSampleCol	sqlite\sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:
nSavepoint	sqlite\sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	sqlite\sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScan	sqlite\sqlite3.c	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe	file:
nSchemaLock	sqlite\sqlite3.c	/^  u32 nSchemaLock;              \/* Do not reset the schema when non-zero *\/$/;"	m	struct:sqlite3	file:
nSdst	sqlite\sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nSeg	sqlite\sqlite3.c	/^  int nSeg;                       \/* Size of aSeg[] array *\/$/;"	m	struct:Fts5Iter	file:
nSeg	sqlite\sqlite3.c	/^  int nSeg;                       \/* Total number of segments on level *\/$/;"	m	struct:Fts5StructureLevel	file:
nSegment	sqlite\sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	sqlite\sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSegment	sqlite\sqlite3.c	/^  int nSegment;                   \/* Total segments in this structure *\/$/;"	m	struct:Fts5Structure	file:
nSelect	sqlite\sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:
nSelectRow	sqlite\sqlite3.c	/^  LogEst nSelectRow;     \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	sqlite\sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	sqlite\sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nShm	sqlite\sqlite3.c	/^  int nShm;                       \/* Number of entries in apShm[] array *\/$/;"	m	struct:rbu_file	file:
nSize	sqlite\sqlite3.c	/^  int nSize;                      \/* Bytes of data currently in memory *\/$/;"	m	struct:MemJournal	file:
nSize	sqlite\sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	sqlite\sqlite3.c	/^  int nSize;$/;"	m	struct:Fts5DoclistIter	file:
nSize	sqlite\sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSkip	sqlite\sqlite3.c	/^  u16 nSkip;            \/* Number of NULL aLTerm[] entries *\/$/;"	m	struct:WhereLoop	file:
nSlot	sqlite\sqlite3.c	/^  int nSlot;                      \/* Size of aSlot[] array *\/$/;"	m	struct:Fts5Hash	file:
nSlot	sqlite\sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	sqlite\sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSlot	sqlite\sqlite3.c	/^  u32 nSlot;              \/* Number of lookaside slots allocated *\/$/;"	m	struct:Lookaside	file:
nSnippet	sqlite\sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	sqlite\sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	sqlite\sqlite3.c	/^  int nSpace;$/;"	m	struct:Fts5Buffer	file:
nSpace	sqlite\sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSpill	sqlite\sqlite3.c	/^  int nSpill;                     \/* Bytes of data before flushing *\/$/;"	m	struct:MemJournal	file:
nSqlExec	sqlite\sqlite3.c	/^  u8 nSqlExec;                  \/* Number of pending OP_SqlExec opcodes *\/$/;"	m	struct:sqlite3	file:
nSrc	sqlite\sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	sqlite\sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	sqlite\sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStep	sqlite\sqlite3.c	/^  int nStep;                      \/* Rows processed for current object *\/$/;"	m	struct:sqlite3rbu	file:
nStmtDefCons	sqlite\sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtDefImmCons	sqlite\sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtSpill	sqlite\sqlite3.c	/^  int nStmtSpill;                   \/* Stmt-journal spill-to-disk threshold *\/$/;"	m	struct:Sqlite3Config	file:
nStop	sqlite\sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	sqlite\sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	sqlite\sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nSuffix	sqlite\sqlite3.c	/^  int nSuffix;$/;"	m	struct:PorterRule	file:
nTab	sqlite\sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTabRef	sqlite\sqlite3.c	/^  u32 nTabRef;         \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nTableLock	sqlite\sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTask	sqlite\sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTblCol	sqlite\sqlite3.c	/^  int nTblCol;                    \/* Size of azTblCol[] array *\/$/;"	m	struct:RbuObjIter	file:
nTempReg	sqlite\sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Number of entries in aTerm[] *\/$/;"	m	struct:Fts5ExprPhrase	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Size of phrase in terms *\/$/;"	m	struct:Fts5MatchPhrase	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTerm	sqlite\sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts5TermsetEntry	file:
nTermAlloc	sqlite\sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nThis	sqlite\sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	sqlite\sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon13	file:
nTitle	sqlite\sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	sqlite\sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	sqlite\sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	sqlite\sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:
nToken	sqlite\sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	sqlite\sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTop	sqlite\sqlite3.c	/^      u16 nTop;              \/* Size of TOP vector *\/$/;"	m	struct:WhereLoop::__anon22::__anon23	file:
nTotalChange	sqlite\sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTotalRow	sqlite\sqlite3.c	/^  i64 nTotalRow;                  \/* Total number of rows in FTS table *\/$/;"	m	struct:Fts5Storage	file:
nTransaction	sqlite\sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	sqlite\sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUnused	sqlite\sqlite3.c	/^  int nUnused;                    \/* Number of unused bytes on page *\/$/;"	m	struct:StatPage	file:
nUnused	sqlite\sqlite3.c	/^  int nUnused;                    \/* Value of 'unused' column *\/$/;"	m	struct:StatCursor	file:
nUnusedFd	sqlite\sqlite3.c	/^static unsigned int nUnusedFd = 0;    \/* Total unused file descriptors *\/$/;"	v	file:
nUsed	sqlite\sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:
nUsed	sqlite\sqlite3.c	/^  u64 nUsed;               \/* Bytes of zBuf[] currently used *\/$/;"	m	struct:JsonString	file:
nUsermerge	sqlite\sqlite3.c	/^  int nUsermerge;                 \/* 'usermerge' setting *\/$/;"	m	struct:Fts5Config	file:
nVDestroy	sqlite\sqlite3.c	/^  int nVDestroy;                \/* Number of active OP_VDestroy operations *\/$/;"	m	struct:sqlite3	file:
nVTrans	sqlite\sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	sqlite\sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	sqlite\sqlite3.c	/^  ynVar nVar;               \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	sqlite\sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVdbeActive	sqlite\sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:
nVdbeExec	sqlite\sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
nVdbeRead	sqlite\sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:
nVdbeWrite	sqlite\sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:
nVtabLock	sqlite\sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	sqlite\sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	sqlite\sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nWorkUnit	sqlite\sqlite3.c	/^  int nWorkUnit;                  \/* Leaf pages in a "unit" of work *\/$/;"	m	struct:Fts5Index	file:
nWorker	sqlite\sqlite3.c	90042;"	d	file:
nWorker	sqlite\sqlite3.c	90125;"	d	file:
nWriteCounter	sqlite\sqlite3.c	/^  u64 nWriteCounter;              \/* Total leaves written to level 0 *\/$/;"	m	struct:Fts5Structure	file:
nXor	sqlite\sqlite3.c	/^  int nXor;           \/* Number of XOR operations done *\/$/;"	m	struct:EntropyGatherer	file:
nZero	sqlite\sqlite3.c	/^    int nZero;          \/* Extra zero bytes when MEM_Zero and MEM_Blob set *\/$/;"	m	union:sqlite3_value::MemValue	file:
nZero	sqlite\sqlite3.c	/^  int nZero;              \/* Extra zero data appended after pData,nData *\/$/;"	m	struct:BtreePayload	file:
na	sqlite\sqlite3.c	/^  int na;             \/* Size of a[] in bytes *\/$/;"	m	struct:EntropyGatherer	file:
nameInUsingClause	sqlite\sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
ncFlags	sqlite\sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	sqlite\sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needFree	sqlite\sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon22::__anon24	file:
needToFreeIdxStr	sqlite\sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nested	sqlite\sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
neverCorrupt	sqlite\sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:
newDatabase	sqlite\sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	sqlite\sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	sqlite\sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	sqlite\sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	sqlite\sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon14::__anon16	file:
next	sqlite\sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	sqlite\sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	sqlite\sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	sqlite\sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	sqlite\sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	sqlite\sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	sqlite\sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	sqlite\sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	sqlite\sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
nn	sqlite\sqlite3.c	/^  int nn;                         \/* Size of record in bytes *\/$/;"	m	struct:Fts5Data	file:
noCase	sqlite\sqlite3.c	/^  u8 noCase;            \/* true to ignore case differences *\/$/;"	m	struct:compareInfo	file:
noLock	sqlite\sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noSkipScan	sqlite\sqlite3.c	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index	file:
noSync	sqlite\sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	sqlite\sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	sqlite\sqlite3.c	/^static int nodeAcquire($/;"	f	file:
nodeBlobReset	sqlite\sqlite3.c	/^static void nodeBlobReset(Rtree *pRtree){$/;"	f	file:
nodeDeleteCell	sqlite\sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	sqlite\sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	sqlite\sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	sqlite\sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	sqlite\sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	sqlite\sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	sqlite\sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	sqlite\sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	sqlite\sqlite3.c	/^static int nodeInsertCell($/;"	f	file:
nodeNew	sqlite\sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	sqlite\sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	sqlite\sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	sqlite\sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	sqlite\sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	sqlite\sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	sqlite\sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	sqlite\sqlite3.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	sqlite\sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	sqlite\sqlite3.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	sqlite\sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	sqlite\sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	sqlite\sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	sqlite\sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	sqlite\sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopFunc	sqlite\sqlite3.c	109553;"	d	file:
noopMutexAlloc	sqlite\sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	sqlite\sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	sqlite\sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	sqlite\sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	sqlite\sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	sqlite\sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	sqlite\sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	sqlite\sqlite3.c	/^      unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
notNull	sqlite\sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notReady	sqlite\sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:
notUsed0	sqlite\sqlite3.c	/^  u32 notUsed0;                   \/* Available for future enhancements *\/$/;"	m	struct:WalCkptInfo	file:
notUsed1	sqlite\sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon1	file:
notValid	sqlite\sqlite3.c	/^static void notValid($/;"	f	file:
nowValue	sqlite\sqlite3.c	/^  sqlite3StatValueType nowValue[10];  \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	sqlite\sqlite3.c	/^  signed char nrhs;     \/* Negative of the number of RHS symbols in the rule *\/$/;"	m	struct:__anon28	file:
nrhs	sqlite\sqlite3.c	/^  signed char nrhs;     \/* Negative of the number of RHS symbols in the rule *\/$/;"	m	struct:__anon32	file:
nullRow	sqlite\sqlite3.c	/^  u8 nullRow;             \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	sqlite\sqlite3.c	/^static void nullifFunc($/;"	f	file:
numberOfCachePages	sqlite\sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	sqlite\sqlite3.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
objiter	sqlite\sqlite3.c	/^  RbuObjIter objiter;             \/* Iterator for skipping through tbl\/idx *\/$/;"	m	struct:sqlite3rbu	file:
offset	sqlite\sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	sqlite\sqlite3.c	13178;"	d	file:
okConstFactor	sqlite\sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:
oldLockingContext	sqlite\sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	sqlite\sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	sqlite\sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omitMask	sqlite\sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon22::__anon24	file:
onError	sqlite\sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	sqlite\sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
oom	sqlite\sqlite3.c	/^  u8 oom;            \/* Set to true if out of memory *\/$/;"	m	struct:JsonParse	file:
op	sqlite\sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	sqlite\sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	sqlite\sqlite3.c	/^  int op;                         \/* Current operation *\/$/;"	m	struct:sqlite3_changeset_iter	file:
op	sqlite\sqlite3.c	/^  int op;                         \/* One of SQLITE_INSERT, UPDATE, DELETE *\/$/;"	m	struct:PreUpdate	file:
op	sqlite\sqlite3.c	/^  int op;                         \/* One of UPDATE, DELETE, INSERT *\/$/;"	m	struct:SessionChange	file:
op	sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	sqlite\sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	sqlite\sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	sqlite\sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	sqlite\sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	sqlite\sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	sqlite\sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:
opIterNext	sqlite\sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	sqlite\sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:
opPrecedence	sqlite\sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	sqlite\sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	sqlite\sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	sqlite\sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	sqlite\sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	sqlite\sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	sqlite\sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	sqlite\sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	sqlite\sqlite3.c	/^  int openFlags;                  \/* Flags this file was opened with *\/$/;"	m	struct:rbu_file	file:
openFlags	sqlite\sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	sqlite\sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openRbuHandle	sqlite\sqlite3.c	/^static sqlite3rbu *openRbuHandle($/;"	f	file:
openStatTable	sqlite\sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	sqlite\sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_v2	sqlite\sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	sqlite\sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
optimalReserve	sqlite\sqlite3.c	/^  u8 optimalReserve;    \/* Desired amount of reserved space per page *\/$/;"	m	struct:BtShared	file:
orconf	sqlite\sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	sqlite\sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	sqlite\sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	sqlite\sqlite3.c	/^    unsigned orphanTrigger : 1; \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
osAccess	sqlite\sqlite3.c	31625;"	d	file:
osAreFileApisANSI	sqlite\sqlite3.c	39746;"	d	file:
osAreFileApisANSI	sqlite\sqlite3.c	39767;"	d	file:
osCharLowerW	sqlite\sqlite3.c	39776;"	d	file:
osCharUpperW	sqlite\sqlite3.c	39784;"	d	file:
osClose	sqlite\sqlite3.c	31622;"	d	file:
osCloseHandle	sqlite\sqlite3.c	39788;"	d	file:
osCreateEventExW	sqlite\sqlite3.c	40254;"	d	file:
osCreateFile2	sqlite\sqlite3.c	40308;"	d	file:
osCreateFileA	sqlite\sqlite3.c	39796;"	d	file:
osCreateFileMappingA	sqlite\sqlite3.c	39816;"	d	file:
osCreateFileMappingFromApp	sqlite\sqlite3.c	40363;"	d	file:
osCreateFileMappingW	sqlite\sqlite3.c	39826;"	d	file:
osCreateFileW	sqlite\sqlite3.c	39805;"	d	file:
osCreateMutexW	sqlite\sqlite3.c	39835;"	d	file:
osDeleteFileA	sqlite\sqlite3.c	39844;"	d	file:
osDeleteFileW	sqlite\sqlite3.c	39852;"	d	file:
osFallocate	sqlite\sqlite3.c	31697;"	d	file:
osFchmod	sqlite\sqlite3.c	31690;"	d	file:
osFchown	sqlite\sqlite3.c	31716;"	d	file:
osFcntl	sqlite\sqlite3.c	31651;"	d	file:
osFcntl	sqlite\sqlite3.c	32038;"	d	file:
osFcntl	sqlite\sqlite3.c	32039;"	d	file:
osFileTimeToLocalFileTime	sqlite\sqlite3.c	39860;"	d	file:
osFileTimeToSystemTime	sqlite\sqlite3.c	39869;"	d	file:
osFlushFileBuffers	sqlite\sqlite3.c	39874;"	d	file:
osFlushViewOfFile	sqlite\sqlite3.c	40405;"	d	file:
osFormatMessageA	sqlite\sqlite3.c	39882;"	d	file:
osFormatMessageW	sqlite\sqlite3.c	39891;"	d	file:
osFreeLibrary	sqlite\sqlite3.c	39900;"	d	file:
osFstat	sqlite\sqlite3.c	31641;"	d	file:
osFtruncate	sqlite\sqlite3.c	31648;"	d	file:
osGetCurrentProcessId	sqlite\sqlite3.c	39904;"	d	file:
osGetDiskFreeSpaceA	sqlite\sqlite3.c	39912;"	d	file:
osGetDiskFreeSpaceW	sqlite\sqlite3.c	39921;"	d	file:
osGetFileAttributesA	sqlite\sqlite3.c	39930;"	d	file:
osGetFileAttributesExW	sqlite\sqlite3.c	39946;"	d	file:
osGetFileAttributesW	sqlite\sqlite3.c	39938;"	d	file:
osGetFileInformationByHandleEx	sqlite\sqlite3.c	40290;"	d	file:
osGetFileSize	sqlite\sqlite3.c	39955;"	d	file:
osGetFullPathNameA	sqlite\sqlite3.c	39963;"	d	file:
osGetFullPathNameW	sqlite\sqlite3.c	39972;"	d	file:
osGetLastError	sqlite\sqlite3.c	39977;"	d	file:
osGetNativeSystemInfo	sqlite\sqlite3.c	40334;"	d	file:
osGetProcAddressA	sqlite\sqlite3.c	39992;"	d	file:
osGetProcessHeap	sqlite\sqlite3.c	40355;"	d	file:
osGetSystemInfo	sqlite\sqlite3.c	40001;"	d	file:
osGetSystemTime	sqlite\sqlite3.c	40005;"	d	file:
osGetSystemTimeAsFileTime	sqlite\sqlite3.c	40013;"	d	file:
osGetTempPathA	sqlite\sqlite3.c	40022;"	d	file:
osGetTempPathW	sqlite\sqlite3.c	40030;"	d	file:
osGetTickCount	sqlite\sqlite3.c	40038;"	d	file:
osGetTickCount64	sqlite\sqlite3.c	40326;"	d	file:
osGetVersionExA	sqlite\sqlite3.c	40046;"	d	file:
osGetVersionExW	sqlite\sqlite3.c	40056;"	d	file:
osGetcwd	sqlite\sqlite3.c	31628;"	d	file:
osGeteuid	sqlite\sqlite3.c	31723;"	d	file:
osGetpagesize	sqlite\sqlite3.c	31751;"	d	file:
osGetpid	sqlite\sqlite3.c	31219;"	d	file:
osHeapAlloc	sqlite\sqlite3.c	40061;"	d	file:
osHeapCompact	sqlite\sqlite3.c	40110;"	d	file:
osHeapCreate	sqlite\sqlite3.c	40070;"	d	file:
osHeapDestroy	sqlite\sqlite3.c	40079;"	d	file:
osHeapFree	sqlite\sqlite3.c	40083;"	d	file:
osHeapReAlloc	sqlite\sqlite3.c	40087;"	d	file:
osHeapSize	sqlite\sqlite3.c	40092;"	d	file:
osHeapValidate	sqlite\sqlite3.c	40101;"	d	file:
osInterlockedCompareExchange	sqlite\sqlite3.c	40374;"	d	file:
osIoctl	sqlite\sqlite3.c	31772;"	d	file:
osIsNT	sqlite\sqlite3.c	40668;"	d	file:
osIsNT	sqlite\sqlite3.c	40670;"	d	file:
osIsNT	sqlite\sqlite3.c	40672;"	d	file:
osIsNT	sqlite\sqlite3.c	40674;"	d	file:
osLoadLibraryA	sqlite\sqlite3.c	40118;"	d	file:
osLoadLibraryW	sqlite\sqlite3.c	40127;"	d	file:
osLoadPackagedLibrary	sqlite\sqlite3.c	40317;"	d	file:
osLocalFree	sqlite\sqlite3.c	40135;"	d	file:
osLocaltime	sqlite\sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	sqlite\sqlite3.c	40144;"	d	file:
osLockFileEx	sqlite\sqlite3.c	40155;"	d	file:
osLstat	sqlite\sqlite3.c	31765;"	d	file:
osMapViewOfFile	sqlite\sqlite3.c	40166;"	d	file:
osMapViewOfFileFromApp	sqlite\sqlite3.c	40299;"	d	file:
osMkdir	sqlite\sqlite3.c	31706;"	d	file:
osMmap	sqlite\sqlite3.c	31730;"	d	file:
osMremap	sqlite\sqlite3.c	31744;"	d	file:
osMultiByteToWideChar	sqlite\sqlite3.c	40171;"	d	file:
osMunmap	sqlite\sqlite3.c	31737;"	d	file:
osOpen	sqlite\sqlite3.c	31619;"	d	file:
osOpenDirectory	sqlite\sqlite3.c	31703;"	d	file:
osOutputDebugStringA	sqlite\sqlite3.c	40343;"	d	file:
osOutputDebugStringW	sqlite\sqlite3.c	40351;"	d	file:
osPread	sqlite\sqlite3.c	31661;"	d	file:
osPread64	sqlite\sqlite3.c	31668;"	d	file:
osPwrite	sqlite\sqlite3.c	31678;"	d	file:
osPwrite64	sqlite\sqlite3.c	31686;"	d	file:
osQueryPerformanceCounter	sqlite\sqlite3.c	40176;"	d	file:
osRead	sqlite\sqlite3.c	31654;"	d	file:
osReadFile	sqlite\sqlite3.c	40181;"	d	file:
osReadlink	sqlite\sqlite3.c	31758;"	d	file:
osRmdir	sqlite\sqlite3.c	31709;"	d	file:
osSetEndOfFile	sqlite\sqlite3.c	40186;"	d	file:
osSetFilePointer	sqlite\sqlite3.c	40194;"	d	file:
osSetFilePointerEx	sqlite\sqlite3.c	40281;"	d	file:
osSetPosixAdvisoryLock	sqlite\sqlite3.c	/^static int osSetPosixAdvisoryLock($/;"	f	file:
osSetPosixAdvisoryLock	sqlite\sqlite3.c	32729;"	d	file:
osSleep	sqlite\sqlite3.c	40203;"	d	file:
osStat	sqlite\sqlite3.c	31631;"	d	file:
osSystemTimeToFileTime	sqlite\sqlite3.c	40207;"	d	file:
osUnlink	sqlite\sqlite3.c	31700;"	d	file:
osUnlockFile	sqlite\sqlite3.c	40217;"	d	file:
osUnlockFileEx	sqlite\sqlite3.c	40227;"	d	file:
osUnmapViewOfFile	sqlite\sqlite3.c	40236;"	d	file:
osUuidCreate	sqlite\sqlite3.c	40388;"	d	file:
osUuidCreateSequential	sqlite\sqlite3.c	40396;"	d	file:
osWaitForSingleObject	sqlite\sqlite3.c	40263;"	d	file:
osWaitForSingleObjectEx	sqlite\sqlite3.c	40272;"	d	file:
osWideCharToMultiByte	sqlite\sqlite3.c	40240;"	d	file:
osWrite	sqlite\sqlite3.c	31671;"	d	file:
osWriteFile	sqlite\sqlite3.c	40245;"	d	file:
out2Prerelease	sqlite\sqlite3.c	/^static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){$/;"	f	file:
out2PrereleaseWithClear	sqlite\sqlite3.c	/^static SQLITE_NOINLINE Mem *out2PrereleaseWithClear(Mem *pOut){$/;"	f	file:
overflow	sqlite\sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	sqlite\sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	sqlite\sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	sqlite\sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	sqlite\sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::p4union	file:
p	sqlite\sqlite3.c	/^  const char *p;                  \/* Token text (not NULL terminated) *\/$/;"	m	struct:Fts5Token	file:
p	sqlite\sqlite3.c	/^  u8 *p;                          \/* Pointer to buffer containing record *\/$/;"	m	struct:Fts5Data	file:
p	sqlite\sqlite3.c	/^  u8 *p;$/;"	m	struct:Fts5Buffer	file:
p	sqlite\sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:
p1	sqlite\sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	sqlite\sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	sqlite\sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	sqlite\sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	sqlite\sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	sqlite\sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	sqlite\sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	sqlite\sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p3	sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p4	sqlite\sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::p4union	file:
p4type	sqlite\sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p4union	sqlite\sqlite3.c	/^  union p4union {     \/* fourth parameter *\/$/;"	u	struct:VdbeOp	file:
p5	sqlite\sqlite3.c	/^  u16 p5;             \/* Fifth parameter is an unsigned 16-bit integer *\/$/;"	m	struct:VdbeOp	file:
p5	sqlite\sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
pAggInfo	sqlite\sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	sqlite\sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	sqlite\sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAltCursor	sqlite\sqlite3.c	/^  VdbeCursor *pAltCursor; \/* Associated index cursor from which to read *\/$/;"	m	struct:VdbeCursor	file:
pAndInfo	sqlite\sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon25	file:
pApi	sqlite\sqlite3.c	/^  const Fts5ExtensionApi *pApi;   \/* API offered by current FTS version *\/$/;"	m	struct:CInstIter	file:
pAppData	sqlite\sqlite3.c	/^  void *pAppData;                    \/* The extra pAppData, if any. *\/$/;"	m	struct:winVfsAppData	file:
pAppData	sqlite\sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	sqlite\sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	sqlite\sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	sqlite\sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pAuthArg	sqlite\sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	sqlite\sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* Currently executing extension function *\/$/;"	m	struct:Fts5Cursor	file:
pAux	sqlite\sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* Extension to which this belongs *\/$/;"	m	struct:Fts5Auxdata	file:
pAux	sqlite\sqlite3.c	/^  Fts5Auxiliary *pAux;            \/* First in list of all aux. functions *\/$/;"	m	struct:Fts5Global	file:
pAux	sqlite\sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pAux	sqlite\sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:
pAuxData	sqlite\sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:
pAuxData	sqlite\sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:VdbeFrame	file:
pAuxdata	sqlite\sqlite3.c	/^  Fts5Auxdata *pAuxdata;          \/* First in linked list of saved aux-data *\/$/;"	m	struct:Fts5Cursor	file:
pBackup	sqlite\sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	sqlite\sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	sqlite\sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	sqlite\sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	sqlite\sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	sqlite\sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	sqlite\sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	sqlite\sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	sqlite\sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	sqlite\sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBtx	sqlite\sqlite3.c	/^  Btree *pBtx;            \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBuf	sqlite\sqlite3.c	/^  Fts5Buffer *pBuf;               \/* Append to this buffer *\/$/;"	m	struct:PoslistCallbackCtx	file:
pBuf	sqlite\sqlite3.c	/^  Fts5Buffer *pBuf;               \/* Append to this buffer *\/$/;"	m	struct:PoslistOffsetsCtx	file:
pBuf	sqlite\sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBulk	sqlite\sqlite3.c	/^  void *pBulk;                        \/* Bulk memory used by pcache-local *\/$/;"	m	struct:PCache1	file:
pBusyArg	sqlite\sqlite3.c	/^  void *pBusyArg;                   \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pBusyHandlerArg	sqlite\sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCCurHint	sqlite\sqlite3.c	/^    struct CCurHint *pCCurHint;               \/* Used by codeCursorHint() *\/$/;"	m	union:Walker::__anon10	typeref:struct:Walker::__anon10::CCurHint	file:
pCache	sqlite\sqlite3.c	/^  PCache *pCache;                \/* PRIVATE: Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	sqlite\sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	sqlite\sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCheck	sqlite\sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	sqlite\sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	sqlite\sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	sqlite\sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	sqlite\sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::p4union	file:
pCollNeededArg	sqlite\sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pCols	sqlite\sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:
pColset	sqlite\sqlite3.c	/^  Fts5Colset *pColset;            \/* Columns to search (NULL -> all columns) *\/$/;"	m	struct:Fts5ExprNearset	file:
pColset	sqlite\sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to these columns *\/$/;"	m	struct:Fts5Iter	file:
pColset	sqlite\sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to this column *\/$/;"	m	struct:PoslistCallbackCtx	file:
pColset	sqlite\sqlite3.c	/^  Fts5Colset *pColset;            \/* Restrict matches to this column *\/$/;"	m	struct:PoslistOffsetsCtx	file:
pColumns	sqlite\sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	sqlite\sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/$/;"	m	struct:sqlite3	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;            \/* Fts5 table configuration *\/$/;"	m	struct:Fts5VocabCursor	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;            \/* Virtual table configuration *\/$/;"	m	struct:Fts5Index	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;            \/* Virtual table configuration *\/$/;"	m	struct:Fts5Table	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Expr	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5IntegrityCtx	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Parse	file:
pConfig	sqlite\sqlite3.c	/^  Fts5Config *pConfig;$/;"	m	struct:Fts5Storage	file:
pConflict	sqlite\sqlite3.c	/^  sqlite3_stmt *pConflict;        \/* Points to conflicting row, if any *\/$/;"	m	struct:sqlite3_changeset_iter	file:
pConstExpr	sqlite\sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:
pContext	sqlite\sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pContext	sqlite\sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	sqlite\sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pCovidx	sqlite\sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon20	file:
pCsr	sqlite\sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	sqlite\sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCsr	sqlite\sqlite3.c	/^  Fts5Cursor *pCsr;               \/* First in list of all open cursors *\/$/;"	m	struct:Fts5Global	file:
pCsr	sqlite\sqlite3.c	/^  VdbeCursor *pCsr;               \/* Cursor to read old values from *\/$/;"	m	struct:PreUpdate	file:
pCsr	sqlite\sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:
pCtx	sqlite\sqlite3.c	/^    sqlite3_context *pCtx; \/* Used when p4type is P4_FUNCCTX *\/$/;"	m	union:VdbeOp::p4union	file:
pCtx	sqlite\sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCtx	sqlite\sqlite3.c	/^  sqlite3_context *pCtx;   \/* Function context - put error messages here *\/$/;"	m	struct:JsonString	file:
pCtx	sqlite\sqlite3.c	/^  void *pCtx;$/;"	m	struct:PorterContext	file:
pCtx	sqlite\sqlite3.c	/^  void *pCtx;$/;"	m	struct:SessionHook	file:
pCurrent	sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	sqlite\sqlite3.c	/^    BtCursor *pCursor;          \/* CURTYPE_BTREE or _PSEUDO.  Btree cursor *\/$/;"	m	union:VdbeCursor::__anon11	file:
pCursor	sqlite\sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	sqlite\sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	sqlite\sqlite3.c	/^  Fts5Data *pData;              \/* Data for current page of this level *\/$/;"	m	struct:Fts5DlidxLvl	file:
pData	sqlite\sqlite3.c	/^  const u8 *pData;$/;"	m	struct:Fts5IndexIter	file:
pData	sqlite\sqlite3.c	/^  const void *pData;      \/* Data for tables.  NULL for indexes *\/$/;"	m	struct:BtreePayload	file:
pData	sqlite\sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDataVersion	sqlite\sqlite3.c	/^  sqlite3_stmt *pDataVersion;$/;"	m	struct:Fts5Index	file:
pDbFd	sqlite\sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	sqlite\sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	sqlite\sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:sqlite3_value::MemValue	file:
pDefault	sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	sqlite\sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	sqlite\sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	sqlite\sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	sqlite\sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDelete	sqlite\sqlite3.c	/^  sqlite3_stmt *pDelete;          \/* DELETE statement *\/$/;"	m	struct:SessionApplyCtx	file:
pDelete	sqlite\sqlite3.c	/^  sqlite3_stmt *pDelete;          \/* Statement for DELETE ops *\/$/;"	m	struct:RbuObjIter	file:
pDeleteNode	sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	sqlite\sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDeleter	sqlite\sqlite3.c	/^  sqlite3_stmt *pDeleter;         \/* "DELETE FROM %_data ... id>=? AND id<=?" *\/$/;"	m	struct:Fts5Index	file:
pDest	sqlite\sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	sqlite\sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	sqlite\sqlite3.c	/^    FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	union:FuncDef::__anon2	file:
pDflt	sqlite\sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	sqlite\sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDfltTok	sqlite\sqlite3.c	/^  Fts5TokenizerModule *pDfltTok;  \/* Default tokenizer module *\/$/;"	m	struct:Fts5Global	file:
pDirty	sqlite\sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	sqlite\sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty sorted by pgno *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	sqlite\sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	sqlite\sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	sqlite\sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	sqlite\sqlite3.c	/^  VTable *pDisconnect;          \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pDlidx	sqlite\sqlite3.c	/^  Fts5DlidxIter *pDlidx;          \/* If there is a doclist-index *\/$/;"	m	struct:Fts5SegIter	file:
pEList	sqlite\sqlite3.c	/^  ExprList *pEList;         \/* Replacement expressions *\/$/;"	m	struct:SubstContext	file:
pEList	sqlite\sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	sqlite\sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:
pEnd	sqlite\sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	sqlite\sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	sqlite\sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pEpoTab	sqlite\sqlite3.c	/^  Table *pEpoTab;                      \/* Eponymous table for this module *\/$/;"	m	struct:Module	file:
pErr	sqlite\sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	sqlite\sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	sqlite\sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	sqlite\sqlite3.c	/^    Expr *pExpr;            \/* The parse tree for this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	sqlite\sqlite3.c	/^    Expr *pExpr;           \/* Used when p4type is P4_EXPR *\/$/;"	m	union:VdbeOp::p4union	file:
pExpr	sqlite\sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	sqlite\sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	sqlite\sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExpr	sqlite\sqlite3.c	/^  Fts5Expr *pExpr;                \/* Expression for MATCH queries *\/$/;"	m	struct:Fts5Cursor	file:
pExpr	sqlite\sqlite3.c	/^  Fts5Expr *pExpr;$/;"	m	struct:Fts5ExprCtx	file:
pExpr	sqlite\sqlite3.c	/^  Fts5ExprNode *pExpr;            \/* Result of a successful parse *\/$/;"	m	struct:Fts5Parse	file:
pExprList	sqlite\sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:
pExtra	sqlite\sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	sqlite\sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pFKey	sqlite\sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	sqlite\sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	sqlite\sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	sqlite\sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFd	sqlite\sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFiller	sqlite\sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:sqlite3_value	file:
pFilter	sqlite\sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFilterCtx	sqlite\sqlite3.c	/^  void *pFilterCtx;               \/* First argument to pass to xTableFilter *\/$/;"	m	struct:sqlite3_session	file:
pFirst	sqlite\sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	sqlite\sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon13	typeref:struct:__anon13::MemBlockHdr	file:
pFirst	sqlite\sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	sqlite\sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	sqlite\sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	sqlite\sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:sqlite3_value::MemValue	file:
pFrame	sqlite\sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	sqlite\sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	sqlite\sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	sqlite\sqlite3.c	/^  PgHdr1 *pFree;                      \/* List of unused pcache-local pages *\/$/;"	m	struct:PCache1	file:
pFree	sqlite\sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	sqlite\sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	sqlite\sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts	sqlite\sqlite3.c	/^  Fts5Context *pFts;              \/* First arg to pass to pApi functions *\/$/;"	m	struct:CInstIter	file:
pFts3Tab	sqlite\sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	sqlite\sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	sqlite\sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::p4union	file:
pFunc	sqlite\sqlite3.c	/^  FuncDef *pFunc;         \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:
pFuncArg	sqlite\sqlite3.c	/^      ExprList *pFuncArg;  \/* Arguments to table-valued-function *\/$/;"	m	union:SrcList::SrcList_item::__anon8	file:
pGetNode	sqlite\sqlite3.c	/^  sqlite3_stmt *pGetNode;         \/* Statement used to retrieve nodes *\/$/;"	m	struct:RtreeCheck	file:
pGlobal	sqlite\sqlite3.c	/^  Fts5Global *pGlobal;            \/* FTS5 global object for this database *\/$/;"	m	struct:Fts5VocabTable	file:
pGlobal	sqlite\sqlite3.c	/^  Fts5Global *pGlobal;            \/* Global (connection wide) data *\/$/;"	m	struct:Fts5Table	file:
pGlobal	sqlite\sqlite3.c	/^  Fts5Global *pGlobal;            \/* Global context for this function *\/$/;"	m	struct:Fts5Auxiliary	file:
pGlobalMutexMethods	sqlite\sqlite3.c	/^static SQLITE_WSD const sqlite3_mutex_methods *pGlobalMutexMethods;$/;"	v	file:
pGroup	sqlite\sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	sqlite\sqlite3.c	/^    ExprList *pGroupBy;                       \/* GROUP BY clause *\/$/;"	m	union:Walker::__anon10	file:
pGroupBy	sqlite\sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	sqlite\sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	sqlite\sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	sqlite\sqlite3.c	/^    FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	union:FuncDef::__anon2	file:
pHash	sqlite\sqlite3.c	/^  Fts5Hash *pHash;                \/* Hash table for in-memory data *\/$/;"	m	struct:Fts5Index	file:
pHashNext	sqlite\sqlite3.c	/^  Fts5HashEntry *pHashNext;       \/* Next hash entry with same hash-key *\/$/;"	m	struct:Fts5HashEntry	file:
pHaving	sqlite\sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	sqlite\sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	sqlite\sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	sqlite\sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::p4union	file:
pIBIndex	sqlite\sqlite3.c	/^    Index *pIBIndex;  \/* Index structure corresponding to u1.zIndexedBy *\/$/;"	m	struct:SrcList::SrcList_item	file:
pId	sqlite\sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	sqlite\sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	sqlite\sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	sqlite\sqlite3.c	/^  Fts5Index *pIdx;$/;"	m	struct:Fts5FlushCtx	file:
pIdx	sqlite\sqlite3.c	/^  Index *pIdx;     \/* The index to be tested for coverage *\/$/;"	m	struct:IdxCover	file:
pIdx	sqlite\sqlite3.c	/^  Index *pIdx;    \/* The index used to access the table *\/$/;"	m	struct:CCurHint	file:
pIdx	sqlite\sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIdxCover	sqlite\sqlite3.c	/^    struct IdxCover *pIdxCover;               \/* Check for index coverage *\/$/;"	m	union:Walker::__anon10	typeref:struct:Walker::__anon10::IdxCover	file:
pIdxDeleter	sqlite\sqlite3.c	/^  sqlite3_stmt *pIdxDeleter;      \/* "DELETE FROM %_idx WHERE segid=? *\/$/;"	m	struct:Fts5Index	file:
pIdxExpr	sqlite\sqlite3.c	/^  Expr *pIdxExpr;            \/* Search for this index expression *\/$/;"	m	struct:WhereScan	file:
pIdxExpr	sqlite\sqlite3.c	/^  Expr *pIdxExpr;    \/* The index expression *\/$/;"	m	struct:IdxExprTrans	file:
pIdxIter	sqlite\sqlite3.c	/^  sqlite3_stmt *pIdxIter;         \/* Index iterator *\/$/;"	m	struct:RbuObjIter	file:
pIdxSelect	sqlite\sqlite3.c	/^  sqlite3_stmt *pIdxSelect;$/;"	m	struct:Fts5Index	file:
pIdxTrans	sqlite\sqlite3.c	/^    struct IdxExprTrans *pIdxTrans;           \/* Convert idxed expr to column *\/$/;"	m	union:Walker::__anon10	typeref:struct:Walker::__anon10::IdxExprTrans	file:
pIdxWriter	sqlite\sqlite3.c	/^  sqlite3_stmt *pIdxWriter;       \/* "INSERT ... %_idx VALUES(?,?,?,?)" *\/$/;"	m	struct:Fts5Index	file:
pIn	sqlite\sqlite3.c	/^  void *pIn;                                \/* First argument to xInput *\/$/;"	m	struct:SessionInput	file:
pIn	sqlite\sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	sqlite\sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	sqlite\sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	sqlite\sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	sqlite\sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIndex	sqlite\sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon22::__anon23	file:
pIndex	sqlite\sqlite3.c	/^  Fts5Index *pIndex;              \/* Associated FTS5 index *\/$/;"	m	struct:Fts5VocabCursor	file:
pIndex	sqlite\sqlite3.c	/^  Fts5Index *pIndex;              \/* Full-text index *\/$/;"	m	struct:Fts5Table	file:
pIndex	sqlite\sqlite3.c	/^  Fts5Index *pIndex;              \/* Index that owns this iterator *\/$/;"	m	struct:Fts5Iter	file:
pIndex	sqlite\sqlite3.c	/^  Fts5Index *pIndex;$/;"	m	struct:Fts5Expr	file:
pIndex	sqlite\sqlite3.c	/^  Fts5Index *pIndex;$/;"	m	struct:Fts5Storage	file:
pIndex	sqlite\sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInfo	sqlite\sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:
pInit	sqlite\sqlite3.c	/^  LookasideSlot *pInit;   \/* List of buffers not previously used *\/$/;"	m	struct:Lookaside	file:
pInitMutex	sqlite\sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	sqlite\sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	sqlite\sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	sqlite\sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pInsert	sqlite\sqlite3.c	/^  sqlite3_stmt *pInsert;          \/* INSERT statement *\/$/;"	m	struct:SessionApplyCtx	file:
pInsert	sqlite\sqlite3.c	/^  sqlite3_stmt *pInsert;          \/* Statement for INSERT operations *\/$/;"	m	struct:RbuObjIter	file:
pIter	sqlite\sqlite3.c	/^  Fts5IndexIter *pIter;           \/* Iterator for this term *\/$/;"	m	struct:Fts5ExprTerm	file:
pIter	sqlite\sqlite3.c	/^  Fts5IndexIter *pIter;           \/* Term\/rowid iterator object *\/$/;"	m	struct:Fts5VocabCursor	file:
pIter	sqlite\sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	sqlite\sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	sqlite\sqlite3.c	/^  const void *pKey;       \/* Key content for indexes.  NULL for tables *\/$/;"	m	struct:BtreePayload	file:
pKey	sqlite\sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:
pKey	sqlite\sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	sqlite\sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::p4union	file:
pKeyInfo	sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pKeyInfo	sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;      \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	sqlite\sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	sqlite\sqlite3.c	/^  struct KeyInfo *pKeyInfo;            \/* Arg passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	sqlite\sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	sqlite\sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon13	typeref:struct:__anon13::MemBlockHdr	file:
pLast	sqlite\sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeaf	sqlite\sqlite3.c	/^  Fts5Data *pLeaf;                \/* Current leaf data *\/$/;"	m	struct:Fts5SegIter	file:
pLeft	sqlite\sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	sqlite\sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	sqlite\sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	sqlite\sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	sqlite\sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pList	sqlite\sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon4	file:
pList	sqlite\sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	sqlite\sqlite3.c	/^  SessionTable *pList;            \/* List of tables in current patch *\/$/;"	m	struct:sqlite3_changegroup	file:
pList	sqlite\sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList	sqlite\sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	sqlite\sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	sqlite\sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pList	sqlite\sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:
pLock	sqlite\sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	sqlite\sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLoops	sqlite\sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:
pLruNext	sqlite\sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	sqlite\sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pMIBuffer	sqlite\sqlite3.c	/^  MatchinfoBuffer *pMIBuffer;     \/* Buffer for matchinfo data *\/$/;"	m	struct:Fts3Cursor	file:
pMain	sqlite\sqlite3.c	/^  rbu_file *pMain;                \/* Linked list of main db files *\/$/;"	m	struct:rbu_vfs	file:
pMainNext	sqlite\sqlite3.c	/^  rbu_file *pMainNext;            \/* Next MAIN_DB file *\/$/;"	m	struct:rbu_file	file:
pMap	sqlite\sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	sqlite\sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	sqlite\sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	sqlite\sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::p4union	file:
pMem	sqlite\sqlite3.c	/^  Mem *pMem;              \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMerger	sqlite\sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	sqlite\sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	sqlite\sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	sqlite\sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/* The file I\/O methods to use. *\/$/;"	m	struct:winVfsAppData	file:
pMethod	sqlite\sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	sqlite\sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	sqlite\sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMmapFreelist	sqlite\sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	sqlite\sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pMod	sqlite\sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:
pModule	sqlite\sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	sqlite\sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	sqlite\sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	sqlite\sqlite3.c	/^    NameContext *pNC;                         \/* Naming context *\/$/;"	m	union:Walker::__anon10	file:
pName	sqlite\sqlite3.c	/^  const PragmaName *pName;  \/* Name of the pragma *\/$/;"	m	struct:PragmaVtab	file:
pName	sqlite\sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNear	sqlite\sqlite3.c	/^  Fts5ExprNearset *pNear;         \/* For FTS5_STRING - cluster of phrases *\/$/;"	m	struct:Fts5ExprNode	file:
pNew	sqlite\sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:
pNewTable	sqlite\sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	sqlite\sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNewUnpacked	sqlite\sqlite3.c	/^  UnpackedRecord *pNewUnpacked;   \/* Unpacked version of new.* record *\/$/;"	m	struct:PreUpdate	file:
pNext	sqlite\sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon18	file:
pNext	sqlite\sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	sqlite\sqlite3.c	/^  BtCursor *pNext;          \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	sqlite\sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	sqlite\sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	sqlite\sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	sqlite\sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	sqlite\sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	sqlite\sqlite3.c	/^  Fts5Auxdata *pNext;             \/* Next object in linked list *\/$/;"	m	struct:Fts5Auxdata	file:
pNext	sqlite\sqlite3.c	/^  Fts5Auxiliary *pNext;           \/* Next registered auxiliary function *\/$/;"	m	struct:Fts5Auxiliary	file:
pNext	sqlite\sqlite3.c	/^  Fts5Cursor *pNext;              \/* Next cursor in Fts5Cursor.pCsr list *\/$/;"	m	struct:Fts5Cursor	file:
pNext	sqlite\sqlite3.c	/^  Fts5TermsetEntry *pNext;$/;"	m	struct:Fts5TermsetEntry	file:
pNext	sqlite\sqlite3.c	/^  Fts5TokenizerModule *pNext;     \/* Next registered tokenizer module *\/$/;"	m	struct:Fts5TokenizerModule	file:
pNext	sqlite\sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	sqlite\sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	sqlite\sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	sqlite\sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	sqlite\sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	sqlite\sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	sqlite\sqlite3.c	/^  RbuUpdateStmt *pNext;$/;"	m	struct:RbuUpdateStmt	file:
pNext	sqlite\sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:
pNext	sqlite\sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	sqlite\sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	sqlite\sqlite3.c	/^  SessionChange *pNext;           \/* For hash-table collisions *\/$/;"	m	struct:SessionChange	file:
pNext	sqlite\sqlite3.c	/^  SessionTable *pNext;$/;"	m	struct:SessionTable	file:
pNext	sqlite\sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	sqlite\sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	sqlite\sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	sqlite\sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	sqlite\sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	sqlite\sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	sqlite\sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	sqlite\sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	sqlite\sqlite3.c	/^  sqlite3_session *pNext;         \/* Next session object on same db. *\/$/;"	m	struct:sqlite3_session	file:
pNext	sqlite\sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	sqlite\sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	sqlite\sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	sqlite\sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	sqlite\sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	sqlite\sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	sqlite\sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextAux	sqlite\sqlite3.c	/^  AuxData *pNextAux;              \/* Next element in list *\/$/;"	m	struct:AuxData	file:
pNextBlocked	sqlite\sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	sqlite\sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	sqlite\sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	sqlite\sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:
pNextId	sqlite\sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextLeaf	sqlite\sqlite3.c	/^  Fts5Data *pNextLeaf;            \/* Leaf page (iLeafPgno+1) *\/$/;"	m	struct:Fts5SegIter	file:
pNextLoop	sqlite\sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:
pNextTo	sqlite\sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:
pNextZombie	sqlite\sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pNode	sqlite\sqlite3.c	/^  Fts5ExprNode *pNode;            \/* FTS5_STRING node this phrase is part of *\/$/;"	m	struct:Fts5ExprPhrase	file:
pNodeBlob	sqlite\sqlite3.c	/^  sqlite3_blob *pNodeBlob;$/;"	m	struct:Rtree	file:
pOffsetList	sqlite\sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	sqlite\sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	sqlite\sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	sqlite\sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon25	file:
pOrPoslist	sqlite\sqlite3.c	/^  char *pOrPoslist;$/;"	m	struct:Fts3Phrase	file:
pOrSet	sqlite\sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	sqlite\sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	sqlite\sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:
pOrderBy	sqlite\sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOrderBy	sqlite\sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	sqlite\sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:
pOrigWC	sqlite\sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:
pOut	sqlite\sqlite3.c	/^  Fts5Buffer *pOut;               \/* Output poslist *\/$/;"	m	struct:Fts5NearTrimmer	file:
pOut	sqlite\sqlite3.c	/^  Mem *pOut;              \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
pOut	sqlite\sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOuter	sqlite\sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pOuter	sqlite\sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:
pPCache	sqlite\sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	sqlite\sqlite3.c	/^  MemPage *pPage;                        \/* Current page *\/$/;"	m	struct:BtCursor	file:
pPage	sqlite\sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	sqlite\sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	sqlite\sqlite3.c	/^  DbPage *pPage1;                 \/* Page 1 of the database *\/$/;"	m	struct:DbpageCursor	file:
pPage1	sqlite\sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPager	sqlite\sqlite3.c	/^  Pager *pPager;                  \/* Pager being read\/written *\/$/;"	m	struct:DbpageCursor	file:
pPager	sqlite\sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	sqlite\sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	sqlite\sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	sqlite\sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	sqlite\sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	sqlite\sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	sqlite\sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;            \/* The parsing context *\/$/;"	m	struct:SubstContext	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;      \/* The parsing context *\/$/;"	m	struct:HiddenIndexInfo	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pParse	sqlite\sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pPartIdxWhere	sqlite\sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:
pPatch	sqlite\sqlite3.c	/^    JsonNode *pPatch;      \/* Node chain of patch for JNODE_PATCH *\/$/;"	m	union:JsonNode::__anon30	file:
pPayload	sqlite\sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:
pPg	sqlite\sqlite3.c	/^  DbPage *pPg;$/;"	m	struct:StatPage	file:
pPhrase	sqlite\sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	sqlite\sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPhrase	sqlite\sqlite3.c	/^  Fts5ExprPhrase *pPhrase;$/;"	m	struct:TokenCtx	file:
pPk	sqlite\sqlite3.c	/^  Index *pPk;                     \/* PK index if pTab is WITHOUT ROWID *\/$/;"	m	struct:PreUpdate	file:
pPoslist	sqlite\sqlite3.c	/^  Fts5Buffer *pPoslist;           \/* Pointer to current poslist *\/$/;"	m	struct:Fts5MatchPhrase	file:
pPragma	sqlite\sqlite3.c	/^  sqlite3_stmt *pPragma;    \/* The pragma statement to run *\/$/;"	m	struct:PragmaVtabCursor	file:
pPreUpdate	sqlite\sqlite3.c	/^  PreUpdate *pPreUpdate;        \/* Context for active pre-update callback *\/$/;"	m	struct:sqlite3	file:
pPreUpdateArg	sqlite\sqlite3.c	/^  void *pPreUpdateArg;          \/* First argument to xPreUpdateCallback *\/$/;"	m	struct:sqlite3	file:
pPreallocatedUnused	sqlite\sqlite3.c	/^  UnixUnusedFd *pPreallocatedUnused;  \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pPrev	sqlite\sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	sqlite\sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	sqlite\sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	sqlite\sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	sqlite\sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:
pPrior	sqlite\sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pPrior	sqlite\sqlite3.c	/^  VtabCtx *pPrior;    \/* Parent context (if any) *\/$/;"	m	struct:VtabCtx	file:
pProfileArg	sqlite\sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	sqlite\sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::p4union	file:
pProgram	sqlite\sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	sqlite\sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	sqlite\sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pPtr	sqlite\sqlite3.c	/^  void *pPtr;                     \/* Pointer value *\/$/;"	m	struct:Fts5Auxdata	file:
pRank	sqlite\sqlite3.c	/^  Fts5Auxiliary *pRank;           \/* Rank callback (or NULL) *\/$/;"	m	struct:Fts5Cursor	file:
pRankArgStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pRankArgStmt;     \/* Origin of objects in apRankArg[] *\/$/;"	m	struct:Fts5Cursor	file:
pRbu	sqlite\sqlite3.c	/^  sqlite3rbu *pRbu;               \/* Owner RBU object *\/$/;"	m	struct:rbu_vfs	file:
pRbu	sqlite\sqlite3.c	/^  sqlite3rbu *pRbu;               \/* Pointer to rbu object (rbu target only) *\/$/;"	m	struct:rbu_file	file:
pRbuFd	sqlite\sqlite3.c	/^  rbu_file *pRbuFd;               \/* Fd for main db of dbRbu *\/$/;"	m	struct:sqlite3rbu	file:
pRbuUpdate	sqlite\sqlite3.c	/^  RbuUpdateStmt *pRbuUpdate;$/;"	m	struct:RbuObjIter	file:
pRbuVfs	sqlite\sqlite3.c	/^  rbu_vfs *pRbuVfs;               \/* Pointer to the rbu_vfs object *\/$/;"	m	struct:rbu_file	file:
pRead	sqlite\sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadParent	sqlite\sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	sqlite\sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReader	sqlite\sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReader	sqlite\sqlite3.c	/^  sqlite3_blob *pReader;          \/* RO incr-blob open on %_data table *\/$/;"	m	struct:Fts5Index	file:
pReal	sqlite\sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::p4union	file:
pReal	sqlite\sqlite3.c	/^  sqlite3_file *pReal;            \/* Underlying file handle *\/$/;"	m	struct:rbu_file	file:
pRealVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pRealVfs;          \/* Underlying VFS *\/$/;"	m	struct:rbu_vfs	file:
pRec	sqlite\sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:
pRef	sqlite\sqlite3.c	/^  MemPage *pRef;          \/* Reference page *\/$/;"	m	struct:CellArray	file:
pReprepare	sqlite\sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResult	sqlite\sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	sqlite\sqlite3.c	/^  ExprList *pResultSet;     \/* Result set of the query *\/$/;"	m	struct:WhereInfo	file:
pResultSet	sqlite\sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	sqlite\sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	sqlite\sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	sqlite\sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	sqlite\sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRollbackArg	sqlite\sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/$/;"	m	struct:sqlite3	file:
pRoot	sqlite\sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRoot	sqlite\sqlite3.c	/^  Fts5ExprNode *pRoot;$/;"	m	struct:Fts5Expr	file:
pRowSet	sqlite\sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:sqlite3_value::MemValue	file:
pSavepoint	sqlite\sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pScan	sqlite\sqlite3.c	/^  Fts5HashEntry *pScan;           \/* Current ordered scan item *\/$/;"	m	struct:Fts5Hash	file:
pScanNext	sqlite\sqlite3.c	/^  Fts5HashEntry *pScanNext;       \/* Next entry in sorted order *\/$/;"	m	struct:Fts5HashEntry	file:
pSchema	sqlite\sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSchema	sqlite\sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	sqlite\sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	sqlite\sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	sqlite\sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	sqlite\sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:
pSchema	sqlite\sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	sqlite\sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:sqlite3_value	file:
pSeekStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pSeekStmt;        \/* Cache for fts3CursorSeekStmt() *\/$/;"	m	struct:Fts3Table	file:
pSeg	sqlite\sqlite3.c	/^  Fts5StructureSegment *pSeg;     \/* Segment to iterate through *\/$/;"	m	struct:Fts5SegIter	file:
pSegcsr	sqlite\sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	sqlite\sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	sqlite\sqlite3.c	/^    Select *pSelect;                          \/* HAVING to WHERE clause ctx *\/$/;"	m	union:Walker::__anon10	file:
pSelect	sqlite\sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:
pSelect	sqlite\sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon4	file:
pSelect	sqlite\sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	sqlite\sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	sqlite\sqlite3.c	/^  Select *pSelect;     \/* SELECT statement or RHS of INSERT INTO SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSelect	sqlite\sqlite3.c	/^  sqlite3_stmt *pSelect;          \/* SELECT statement *\/$/;"	m	struct:SessionApplyCtx	file:
pSelect	sqlite\sqlite3.c	/^  sqlite3_stmt *pSelect;          \/* Source data *\/$/;"	m	struct:RbuObjIter	file:
pSem	sqlite\sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	sqlite\sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pSession	sqlite\sqlite3.c	/^  sqlite3_session *pSession;$/;"	m	struct:SessionStat1Ctx	file:
pShm	sqlite\sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	sqlite\sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	sqlite\sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	sqlite\sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	sqlite\sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSnapshot	sqlite\sqlite3.c	/^  WalIndexHdr *pSnapshot;    \/* Start transaction here if not NULL *\/$/;"	m	struct:Wal	file:
pSortCsr	sqlite\sqlite3.c	/^  Fts5Cursor *pSortCsr;           \/* Sort data from this cursor *\/$/;"	m	struct:Fts5Table	file:
pSorter	sqlite\sqlite3.c	/^    VdbeSorter *pSorter;        \/* CURTYPE_SORTER.            Sorter object *\/$/;"	m	union:VdbeCursor::__anon11	file:
pSorter	sqlite\sqlite3.c	/^  Fts5Sorter *pSorter;            \/* Sorter for "ORDER BY rank" queries *\/$/;"	m	struct:Fts5Cursor	file:
pSorter	sqlite\sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSpace	sqlite\sqlite3.c	/^  u8 *pSpace;          \/* Available memory *\/$/;"	m	struct:ReusableSpace	file:
pSqllogArg	sqlite\sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:
pSrc	sqlite\sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	sqlite\sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrc	sqlite\sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrcCount	sqlite\sqlite3.c	/^    struct SrcCount *pSrcCount;               \/* Counting column references *\/$/;"	m	union:Walker::__anon10	typeref:struct:Walker::__anon10::SrcCount	file:
pSrcDb	sqlite\sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	sqlite\sqlite3.c	/^    SrcList *pSrcList;                        \/* FROM clause *\/$/;"	m	union:Walker::__anon10	file:
pSrcList	sqlite\sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	sqlite\sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of global page cache memory *\/$/;"	m	struct:PCacheGlobal	file:
pStart	sqlite\sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Iterates through set of root pages *\/$/;"	m	struct:StatCursor	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Statement holding lock on pIndex *\/$/;"	m	struct:Fts5VocabCursor	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Statement used to read %_content *\/$/;"	m	struct:Fts5Cursor	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;       \/* Statement cursor is currently pointing at *\/$/;"	m	struct:stmt_cursor	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:Fts5Sorter	file:
pStmt	sqlite\sqlite3.c	/^  sqlite3_stmt *pStmt;$/;"	m	struct:SessionDiffCtx	file:
pStorage	sqlite\sqlite3.c	/^  Fts5Storage *pStorage;          \/* Document store *\/$/;"	m	struct:Fts5Table	file:
pStorage	sqlite\sqlite3.c	/^  Fts5Storage *pStorage;$/;"	m	struct:Fts5InsertCtx	file:
pStress	sqlite\sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pStruct	sqlite\sqlite3.c	/^  Fts5Structure *pStruct;         \/* Current db structure (or NULL) *\/$/;"	m	struct:Fts5Index	file:
pStruct	sqlite\sqlite3.c	/^  Fts5Structure *pStruct;         \/* Database structure for this iterator *\/$/;"	m	struct:Fts5Iter	file:
pSynced	sqlite\sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pSynonym	sqlite\sqlite3.c	/^  Fts5ExprTerm *pSynonym;         \/* Pointer to first in list of synonyms *\/$/;"	m	struct:Fts5ExprTerm	file:
pTab	sqlite\sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	sqlite\sqlite3.c	/^    Table *pTab;           \/* Used when p4type is P4_TABLE *\/$/;"	m	union:VdbeOp::p4union	file:
pTab	sqlite\sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	sqlite\sqlite3.c	/^  Table *pTab;                    \/* Schema object being upated *\/          $/;"	m	struct:PreUpdate	file:
pTab	sqlite\sqlite3.c	/^  Table *pTab;            \/* Table object *\/$/;"	m	struct:Incrblob	file:
pTab	sqlite\sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions.  Can be NULL$/;"	m	struct:Expr	file:
pTab	sqlite\sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	sqlite\sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	sqlite\sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	sqlite\sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	sqlite\sqlite3.c	/^  SessionTable *pTable;           \/* List of attached tables *\/$/;"	m	struct:sqlite3_session	file:
pTable	sqlite\sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	sqlite\sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTargetFd	sqlite\sqlite3.c	/^  rbu_file *pTargetFd;            \/* File handle open on target db *\/$/;"	m	struct:sqlite3rbu	file:
pTask	sqlite\sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	sqlite\sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pTblIter	sqlite\sqlite3.c	/^  sqlite3_stmt *pTblIter;         \/* Iterate through tables *\/$/;"	m	struct:RbuObjIter	file:
pTerm	sqlite\sqlite3.c	/^  char *pTerm;$/;"	m	struct:Fts5TermsetEntry	file:
pTermset	sqlite\sqlite3.c	/^  Fts5Termset *pTermset;$/;"	m	struct:Fts5IntegrityCtx	file:
pThread	sqlite\sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpInsert	sqlite\sqlite3.c	/^  sqlite3_stmt *pTmpInsert;       \/* Insert into rbu_tmp_$zDataTbl *\/$/;"	m	struct:RbuObjIter	file:
pTmpSpace	sqlite\sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	sqlite\sqlite3.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:
pTok	sqlite\sqlite3.c	/^  Fts5Tokenizer *pTok;$/;"	m	struct:Fts5Config	file:
pTok	sqlite\sqlite3.c	/^  Fts5TokenizerModule *pTok;      \/* First in list of all tokenizer modules *\/$/;"	m	struct:Fts5Global	file:
pTok	sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:
pTokApi	sqlite\sqlite3.c	/^  fts5_tokenizer *pTokApi;$/;"	m	struct:Fts5Config	file:
pToken	sqlite\sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	sqlite\sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	sqlite\sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	sqlite\sqlite3.c	/^  Fts5Tokenizer *pTokenizer;      \/* Parent tokenizer instance *\/$/;"	m	struct:PorterTokenizer	file:
pTokenizer	sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	sqlite\sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	sqlite\sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	sqlite\sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	sqlite\sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	sqlite\sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	sqlite\sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	sqlite\sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	sqlite\sqlite3.c	108746;"	d	file:
pTrigger	sqlite\sqlite3.c	113502;"	d	file:
pTrigger	sqlite\sqlite3.c	128475;"	d	file:
pTriggerPrg	sqlite\sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	sqlite\sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	sqlite\sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	sqlite\sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	sqlite\sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	sqlite\sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Unpacked version of aRecord[] *\/$/;"	m	struct:PreUpdate	file:
pUnpacked	sqlite\sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	sqlite\sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdate	sqlite\sqlite3.c	/^  sqlite3_stmt *pUpdate;          \/* Last update statement (or NULL) *\/$/;"	m	struct:RbuUpdateStmt	file:
pUpdate	sqlite\sqlite3.c	/^  sqlite3_stmt *pUpdate;          \/* UPDATE statement *\/$/;"	m	struct:SessionApplyCtx	file:
pUpdateArg	sqlite\sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	sqlite\sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pUser	sqlite\sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	sqlite\sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	sqlite\sqlite3.c	/^  void *pUserData;                \/* User pointer passed to xCreate() *\/$/;"	m	struct:Fts5TokenizerModule	file:
pUserData	sqlite\sqlite3.c	/^  void *pUserData;                \/* User-data pointer *\/$/;"	m	struct:Fts5Auxiliary	file:
pUserData	sqlite\sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	sqlite\sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	sqlite\sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVCur	sqlite\sqlite3.c	/^    sqlite3_vtab_cursor *pVCur; \/* CURTYPE_VTAB.              Vtab cursor *\/$/;"	m	union:VdbeCursor::__anon11	file:
pVList	sqlite\sqlite3.c	/^  VList *pVList;            \/* Mapping between variable names and numbers *\/$/;"	m	struct:Parse	file:
pVList	sqlite\sqlite3.c	/^  VList *pVList;          \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
pVTable	sqlite\sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	sqlite\sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	sqlite\sqlite3.c	/^  Vdbe *pVdbe;            \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:
pVdbe	sqlite\sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	sqlite\sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeBranchArg	sqlite\sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:MemJournal	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	sqlite\sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	sqlite\sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::p4union	file:
pVtab	sqlite\sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	sqlite\sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCtx	sqlite\sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pWC	sqlite\sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:
pWC	sqlite\sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:
pWC	sqlite\sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWC	sqlite\sqlite3.c	/^  WhereClause *pWC;   \/* The Where clause being analyzed *\/$/;"	m	struct:HiddenIndexInfo	file:
pWInfo	sqlite\sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:
pWInfo	sqlite\sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:
pWLoop	sqlite\sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:
pWal	sqlite\sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	sqlite\sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	sqlite\sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	sqlite\sqlite3.c	/^  rbu_file *pWalFd;               \/* Wal file descriptor for this main db *\/$/;"	m	struct:rbu_file	file:
pWalFd	sqlite\sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	sqlite\sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	sqlite\sqlite3.c	/^  Expr *pWhere;             \/* The complete WHERE clause *\/$/;"	m	struct:WhereInfo	file:
pWhere	sqlite\sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	sqlite\sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWith	sqlite\sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:
pWith	sqlite\sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:
pWithToFree	sqlite\sqlite3.c	/^  With *pWithToFree;        \/* Free this WITH object at the end of the parse *\/$/;"	m	struct:Parse	file:
pWriteNode	sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	sqlite\sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	sqlite\sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pWriter	sqlite\sqlite3.c	/^  sqlite3_stmt *pWriter;          \/* "INSERT ... %_data VALUES(?,?)" *\/$/;"	m	struct:Fts5Index	file:
pZeroBlob	sqlite\sqlite3.c	/^  sqlite3_value *pZeroBlob;       \/* Value containing X'' *\/$/;"	m	struct:sqlite3_session	file:
pZombieTab	sqlite\sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
padToSectorBoundary	sqlite\sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	sqlite\sqlite3.c	/^  sqlite3_pcache_page page;      \/* Base class. Must be first. pBuf & pExtra *\/$/;"	m	struct:PgHdr1	file:
pageFindSlot	sqlite\sqlite3.c	/^static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc){$/;"	f	file:
pageFreeArray	sqlite\sqlite3.c	/^static int pageFreeArray($/;"	f	file:
pageHash	sqlite\sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	sqlite\sqlite3.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageInsertArray	sqlite\sqlite3.c	/^static int pageInsertArray($/;"	f	file:
pageReinit	sqlite\sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	sqlite\sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	sqlite\sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerAcquireMapPage	sqlite\sqlite3.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerAddPageToRollbackJournal	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){$/;"	f	file:
pagerBeginReadTransaction	sqlite\sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	sqlite\sqlite3.c	49966;"	d	file:
pagerExclusiveLock	sqlite\sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	sqlite\sqlite3.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFlushOnCommit	sqlite\sqlite3.c	/^static int pagerFlushOnCommit(Pager *pPager, int bCommit){$/;"	f	file:
pagerFreeMapHdrs	sqlite\sqlite3.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	sqlite\sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenSavepoint	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int pagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f	file:
pagerOpenWal	sqlite\sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite\sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite\sqlite3.c	49965;"	d	file:
pagerOpentemp	sqlite\sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	sqlite\sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	sqlite\sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	sqlite\sqlite3.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	sqlite\sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	sqlite\sqlite3.c	51341;"	d	file:
pagerRollbackWal	sqlite\sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	sqlite\sqlite3.c	49963;"	d	file:
pagerStress	sqlite\sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	sqlite\sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	sqlite\sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	sqlite\sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	sqlite\sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	sqlite\sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	sqlite\sqlite3.c	49960;"	d	file:
pagerUseWal	sqlite\sqlite3.c	49962;"	d	file:
pagerWalFrames	sqlite\sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	sqlite\sqlite3.c	49964;"	d	file:
pagerWriteLargeSector	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	sqlite\sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	sqlite\sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	sqlite\sqlite3.c	50395;"	d	file:
pager_delmaster	sqlite\sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	sqlite\sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	sqlite\sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	sqlite\sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open_journal	sqlite\sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	sqlite\sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	sqlite\sqlite3.c	50396;"	d	file:
pager_playback	sqlite\sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	sqlite\sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	sqlite\sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	sqlite\sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	sqlite\sqlite3.c	50397;"	d	file:
pager_truncate	sqlite\sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	sqlite\sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	sqlite\sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	sqlite\sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	sqlite\sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	sqlite\sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	sqlite\sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseDateOrTime	sqlite\sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	sqlite\sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	sqlite\sqlite3.c	/^static int parseModifier($/;"	f	file:
parseTimezone	sqlite\sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	sqlite\sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parserAddExprIdListTerm	sqlite\sqlite3.c	/^  static ExprList *parserAddExprIdListTerm($/;"	f	file:
parserDoubleLinkSelect	sqlite\sqlite3.c	/^  static void parserDoubleLinkSelect(Parse *pParse, Select *p){$/;"	f	file:
patternCompare	sqlite\sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	sqlite\sqlite3.c	/^  u32 payloadSize;        \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	sqlite\sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	sqlite\sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	sqlite\sqlite3.c	47427;"	d	file:
pcache1Alloc	sqlite\sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	sqlite\sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache, int benignMalloc){$/;"	f	file:
pcache1Cachesize	sqlite\sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	sqlite\sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	sqlite\sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	sqlite\sqlite3.c	/^static void pcache1EnforceMaxPage(PCache1 *pCache){$/;"	f	file:
pcache1EnterMutex	sqlite\sqlite3.c	47433;"	d	file:
pcache1EnterMutex	sqlite\sqlite3.c	47437;"	d	file:
pcache1Fetch	sqlite\sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchNoMutex	sqlite\sqlite3.c	/^static PgHdr1 *pcache1FetchNoMutex($/;"	f	file:
pcache1FetchStage2	sqlite\sqlite3.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1FetchWithMutex	sqlite\sqlite3.c	/^static PgHdr1 *pcache1FetchWithMutex($/;"	f	file:
pcache1Free	sqlite\sqlite3.c	/^static void pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	sqlite\sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	sqlite\sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1InitBulk	sqlite\sqlite3.c	/^static int pcache1InitBulk(PCache1 *pCache){$/;"	f	file:
pcache1LeaveMutex	sqlite\sqlite3.c	47434;"	d	file:
pcache1LeaveMutex	sqlite\sqlite3.c	47438;"	d	file:
pcache1MemSize	sqlite\sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	sqlite\sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	sqlite\sqlite3.c	/^static PgHdr1 *pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	sqlite\sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	sqlite\sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage, int freeFlag){$/;"	f	file:
pcache1ResizeHash	sqlite\sqlite3.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	sqlite\sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	sqlite\sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	sqlite\sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	sqlite\sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	sqlite\sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	sqlite\sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	sqlite\sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	sqlite\sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheDump	sqlite\sqlite3.c	/^  void pcacheDump(PCache *pCache){$/;"	f
pcacheDump	sqlite\sqlite3.c	46425;"	d	file:
pcacheFetchFinishWithInit	sqlite\sqlite3.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	sqlite\sqlite3.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	sqlite\sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	sqlite\sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheTrace	sqlite\sqlite3.c	46398;"	d	file:
pcacheTrace	sqlite\sqlite3.c	46424;"	d	file:
pcacheUnpin	sqlite\sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgidx	sqlite\sqlite3.c	/^  Fts5Buffer pgidx;               \/* Buffer containing page-index *\/$/;"	m	struct:Fts5PageWriter	file:
pgno	sqlite\sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	sqlite\sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgno	sqlite\sqlite3.c	/^  int pgno;                       \/* Current page number *\/$/;"	m	struct:DbpageCursor	file:
pgno	sqlite\sqlite3.c	/^  int pgno;                       \/* Page number for this page *\/$/;"	m	struct:Fts5DlidxWriter	file:
pgno	sqlite\sqlite3.c	/^  int pgno;                       \/* Page number for this page *\/$/;"	m	struct:Fts5PageWriter	file:
pgnoFirst	sqlite\sqlite3.c	/^  int pgnoFirst;                  \/* First leaf page number in segment *\/$/;"	m	struct:Fts5StructureSegment	file:
pgnoLast	sqlite\sqlite3.c	/^  int pgnoLast;                   \/* Last leaf page number in segment *\/$/;"	m	struct:Fts5StructureSegment	file:
pgnoRoot	sqlite\sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pgnoRoot	sqlite\sqlite3.c	/^  Pgno pgnoRoot;          \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:
pgsz	sqlite\sqlite3.c	/^  int pgsz;                       \/* Approximate page size used in %_data *\/$/;"	m	struct:Fts5Config	file:
pgsz	sqlite\sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pgsz	sqlite\sqlite3.c	/^  int pgsz;$/;"	m	struct:sqlite3rbu	file:
pnByte	sqlite\sqlite3.c	/^  int *pnByte;                    \/* Pointer to bytes counter *\/$/;"	m	struct:Fts5Hash	file:
pnBytesFreed	sqlite\sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
pnPurgeable	sqlite\sqlite3.c	/^  unsigned int *pnPurgeable;          \/* Pointer to pGroup->nPurgeable *\/$/;"	m	struct:PCache1	file:
populateCellCache	sqlite\sqlite3.c	/^static void populateCellCache(CellArray *p, int idx, int N){$/;"	f	file:
porterClose	sqlite\sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	sqlite\sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	sqlite\sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	sqlite\sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	sqlite\sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	sqlite\sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	sqlite\sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	sqlite\sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	sqlite\sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	sqlite\sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	sqlite\sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixOpen	sqlite\sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	sqlite\sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
poslist	sqlite\sqlite3.c	/^  Fts5Buffer poslist;             \/* Buffer containing current poslist *\/$/;"	m	struct:Fts5Iter	file:
poslist	sqlite\sqlite3.c	/^  Fts5Buffer poslist;             \/* Current position list *\/$/;"	m	struct:Fts5ExprPhrase	file:
ppNextElem	sqlite\sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
ppRec	sqlite\sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
pragCName	sqlite\sqlite3.c	/^static const char *const pragCName[] = {$/;"	v	file:
pragmaLocate	sqlite\sqlite3.c	/^static const PragmaName *pragmaLocate(const char *zName){$/;"	f	file:
pragmaVtabBestIndex	sqlite\sqlite3.c	/^static int pragmaVtabBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
pragmaVtabClose	sqlite\sqlite3.c	/^static int pragmaVtabClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
pragmaVtabColumn	sqlite\sqlite3.c	/^static int pragmaVtabColumn($/;"	f	file:
pragmaVtabConnect	sqlite\sqlite3.c	/^static int pragmaVtabConnect($/;"	f	file:
pragmaVtabCursorClear	sqlite\sqlite3.c	/^static void pragmaVtabCursorClear(PragmaVtabCursor *pCsr){$/;"	f	file:
pragmaVtabDisconnect	sqlite\sqlite3.c	/^static int pragmaVtabDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
pragmaVtabEof	sqlite\sqlite3.c	/^static int pragmaVtabEof(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
pragmaVtabFilter	sqlite\sqlite3.c	/^static int pragmaVtabFilter($/;"	f	file:
pragmaVtabModule	sqlite\sqlite3.c	/^static const sqlite3_module pragmaVtabModule = {$/;"	v	file:
pragmaVtabNext	sqlite\sqlite3.c	/^static int pragmaVtabNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
pragmaVtabOpen	sqlite\sqlite3.c	/^static int pragmaVtabOpen(sqlite3_vtab *pVtab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
pragmaVtabRowid	sqlite\sqlite3.c	/^static int pragmaVtabRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *p){$/;"	f	file:
prefix	sqlite\sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepFlags	sqlite\sqlite3.c	/^  u8 prepFlags;           \/* SQLITE_PREPARE_* flags *\/$/;"	m	struct:Vdbe	file:
prepare	sqlite\sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	sqlite\sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	sqlite\sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v3	sqlite\sqlite3.c	/^  int (*prepare16_v3)(sqlite3*,const void*,int,unsigned int,$/;"	m	struct:sqlite3_api_routines	file:
prepareAndCollectError	sqlite\sqlite3.c	/^static int prepareAndCollectError($/;"	f	file:
prepareFreeAndCollectError	sqlite\sqlite3.c	/^static int prepareFreeAndCollectError($/;"	f	file:
prepare_v2	sqlite\sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v3	sqlite\sqlite3.c	/^  int (*prepare_v3)(sqlite3*,const char*,int,unsigned int,$/;"	m	struct:sqlite3_api_routines	file:
prereq	sqlite\sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:
prereq	sqlite\sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:
prereqAll	sqlite\sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	sqlite\sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	sqlite\sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon14::__anon16	file:
prev	sqlite\sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	sqlite\sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	sqlite\sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	sqlite\sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon14::__anon15	file:
print_pager_state	sqlite\sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfFlags	sqlite\sqlite3.c	/^  u8   printfFlags;    \/* SQLITE_PRINTF flags below *\/$/;"	m	struct:StrAccum	file:
printfFunc	sqlite\sqlite3.c	/^static void printfFunc($/;"	f	file:
profile	sqlite\sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress_handler	sqlite\sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	sqlite\sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	sqlite\sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	sqlite\sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	sqlite\sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	sqlite\sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	sqlite\sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	sqlite\sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	sqlite\sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	sqlite\sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	sqlite\sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	sqlite\sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	sqlite\sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	sqlite\sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	sqlite\sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	sqlite\sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	sqlite\sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	sqlite\sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	sqlite\sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pthreadMutexAlloc	sqlite\sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	sqlite\sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	sqlite\sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	sqlite\sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	sqlite\sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	sqlite\sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	sqlite\sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	sqlite\sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	sqlite\sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	sqlite\sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	sqlite\sqlite3.c	62650;"	d	file:
ptrmapPageno	sqlite\sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	sqlite\sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	sqlite\sqlite3.c	62649;"	d	file:
ptrmapPutOvflPtr	sqlite\sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	sqlite\sqlite3.c	62651;"	d	file:
pushDownWhereTerms	sqlite\sqlite3.c	/^static int pushDownWhereTerms($/;"	f	file:
pushOntoSorter	sqlite\sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	sqlite\sqlite3.c	61285;"	d	file:
put32bits	sqlite\sqlite3.c	50239;"	d	file:
put4byte	sqlite\sqlite3.c	61287;"	d	file:
putVarint	sqlite\sqlite3.c	18249;"	d	file:
putVarint32	sqlite\sqlite3.c	18245;"	d	file:
putVarint64	sqlite\sqlite3.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
pzErrMsg	sqlite\sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon9	file:
pzErrmsg	sqlite\sqlite3.c	/^  char **pzErrmsg;$/;"	m	struct:Fts5Config	file:
querySharedCacheTableLock	sqlite\sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	sqlite\sqlite3.c	61705;"	d	file:
queryTestTokenizer	sqlite\sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	sqlite\sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	sqlite\sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	sqlite\sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:sqlite3_value::MemValue	file:
r1	sqlite\sqlite3.c	/^  i8 r1;              \/* Value to return if (lhs < rhs) *\/$/;"	m	struct:UnpackedRecord	file:
r2	sqlite\sqlite3.c	/^  i8 r2;              \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:
rCost	sqlite\sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:
rLimit	sqlite\sqlite3.c	/^  double rLimit;      \/* Maximum NNN value for this transform *\/$/;"	m	struct:__anon12	file:
rParentScore	sqlite\sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rRun	sqlite\sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:
rRun	sqlite\sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:
rScore	sqlite\sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:
rScore	sqlite\sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rSetup	sqlite\sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:
rSum	sqlite\sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	sqlite\sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:
rValue	sqlite\sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon29	file:
rXform	sqlite\sqlite3.c	/^  double rXform;      \/* Constant used for this transform *\/$/;"	m	struct:__anon12	file:
randomBlob	sqlite\sqlite3.c	/^static void randomBlob($/;"	f	file:
randomFill	sqlite\sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	sqlite\sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	sqlite\sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
randomnessPid	sqlite\sqlite3.c	/^static pid_t randomnessPid = 0;$/;"	v	file:
rawS	sqlite\sqlite3.c	/^  char rawS;          \/* Raw numeric value stored in s *\/$/;"	m	struct:DateTime	file:
rbuAllocateIterArrays	sqlite\sqlite3.c	/^static void rbuAllocateIterArrays(sqlite3rbu *p, RbuObjIter *pIter, int nCol){$/;"	f	file:
rbuBadControlError	sqlite\sqlite3.c	/^static void rbuBadControlError(sqlite3rbu *p){$/;"	f	file:
rbuCaptureDbWrite	sqlite\sqlite3.c	/^static int rbuCaptureDbWrite(sqlite3rbu *pRbu, i64 iOff){$/;"	f	file:
rbuCaptureWalRead	sqlite\sqlite3.c	/^static int rbuCaptureWalRead(sqlite3rbu *pRbu, i64 iOff, int iAmt){$/;"	f	file:
rbuCheckpointFrame	sqlite\sqlite3.c	/^static void rbuCheckpointFrame(sqlite3rbu *p, RbuFrame *pFrame){$/;"	f	file:
rbuCopyPragma	sqlite\sqlite3.c	/^static void rbuCopyPragma(sqlite3rbu *p, const char *zPragma){$/;"	f	file:
rbuCreateImposterTable	sqlite\sqlite3.c	/^static void rbuCreateImposterTable(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuCreateImposterTable2	sqlite\sqlite3.c	/^static void rbuCreateImposterTable2(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuCreateTargetSchema	sqlite\sqlite3.c	/^static void rbuCreateTargetSchema(sqlite3rbu *p){$/;"	f	file:
rbuCreateVfs	sqlite\sqlite3.c	/^static void rbuCreateVfs(sqlite3rbu *p){$/;"	f	file:
rbuDeleteOalFile	sqlite\sqlite3.c	/^static void rbuDeleteOalFile(sqlite3rbu *p){$/;"	f	file:
rbuDeleteVfs	sqlite\sqlite3.c	/^static void rbuDeleteVfs(sqlite3rbu *p){$/;"	f	file:
rbuDeltaApply	sqlite\sqlite3.c	/^static int rbuDeltaApply($/;"	f	file:
rbuDeltaChecksum	sqlite\sqlite3.c	/^static unsigned int rbuDeltaChecksum(const char *zIn, size_t N){$/;"	f	file:
rbuDeltaGetInt	sqlite\sqlite3.c	/^static unsigned int rbuDeltaGetInt(const char **pz, int *pLen){$/;"	f	file:
rbuDeltaOutputSize	sqlite\sqlite3.c	/^static int rbuDeltaOutputSize(const char *zDelta, int lenDelta){$/;"	f	file:
rbuEditErrmsg	sqlite\sqlite3.c	/^static void rbuEditErrmsg(sqlite3rbu *p){$/;"	f	file:
rbuFileSuffix3	sqlite\sqlite3.c	/^static void rbuFileSuffix3(const char *zBase, char *z){$/;"	f	file:
rbuFinalize	sqlite\sqlite3.c	/^static void rbuFinalize(sqlite3rbu *p, sqlite3_stmt *pStmt){$/;"	f	file:
rbuFindMaindb	sqlite\sqlite3.c	/^static rbu_file *rbuFindMaindb(rbu_vfs *pRbuVfs, const char *zWal){$/;"	f	file:
rbuFossilDeltaFunc	sqlite\sqlite3.c	/^static void rbuFossilDeltaFunc($/;"	f	file:
rbuFreeState	sqlite\sqlite3.c	/^static void rbuFreeState(RbuState *p){$/;"	f	file:
rbuGetU32	sqlite\sqlite3.c	/^static u32 rbuGetU32(u8 *aBuf){$/;"	f	file:
rbuGetUpdateStmt	sqlite\sqlite3.c	/^static int rbuGetUpdateStmt($/;"	f	file:
rbuIncrSchemaCookie	sqlite\sqlite3.c	/^static void rbuIncrSchemaCookie(sqlite3rbu *p){$/;"	f	file:
rbuIndexCntFunc	sqlite\sqlite3.c	/^static void rbuIndexCntFunc($/;"	f	file:
rbuInitPhaseOneSteps	sqlite\sqlite3.c	/^static void rbuInitPhaseOneSteps(sqlite3rbu *p){$/;"	f	file:
rbuIsVacuum	sqlite\sqlite3.c	174901;"	d	file:
rbuLoadState	sqlite\sqlite3.c	/^static RbuState *rbuLoadState(sqlite3rbu *p){$/;"	f	file:
rbuLockDatabase	sqlite\sqlite3.c	/^static void rbuLockDatabase(sqlite3rbu *p){$/;"	f	file:
rbuMPrintf	sqlite\sqlite3.c	/^static char *rbuMPrintf(sqlite3rbu *p, const char *zFmt, ...){$/;"	f	file:
rbuMPrintfExec	sqlite\sqlite3.c	/^static int rbuMPrintfExec(sqlite3rbu *p, sqlite3 *db, const char *zFmt, ...){$/;"	f	file:
rbuMainToWal	sqlite\sqlite3.c	/^static const char *rbuMainToWal(const char *zName, int flags){$/;"	f	file:
rbuMalloc	sqlite\sqlite3.c	/^static void *rbuMalloc(sqlite3rbu *p, int nByte){$/;"	f	file:
rbuMisuseError	sqlite\sqlite3.c	/^static sqlite3rbu *rbuMisuseError(void){$/;"	f	file:
rbuMoveOalFile	sqlite\sqlite3.c	/^static void rbuMoveOalFile(sqlite3rbu *p){$/;"	f	file:
rbuObjIterCacheIndexedCols	sqlite\sqlite3.c	/^static void rbuObjIterCacheIndexedCols(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterCacheTableInfo	sqlite\sqlite3.c	/^static int rbuObjIterCacheTableInfo(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterClearStatements	sqlite\sqlite3.c	/^static void rbuObjIterClearStatements(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFinalize	sqlite\sqlite3.c	/^static void rbuObjIterFinalize(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFirst	sqlite\sqlite3.c	/^static int rbuObjIterFirst(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterFreeCols	sqlite\sqlite3.c	/^static void rbuObjIterFreeCols(RbuObjIter *pIter){$/;"	f	file:
rbuObjIterGetBindlist	sqlite\sqlite3.c	/^static char *rbuObjIterGetBindlist(sqlite3rbu *p, int nBind){$/;"	f	file:
rbuObjIterGetCollist	sqlite\sqlite3.c	/^static char *rbuObjIterGetCollist($/;"	f	file:
rbuObjIterGetIndexCols	sqlite\sqlite3.c	/^static char *rbuObjIterGetIndexCols($/;"	f	file:
rbuObjIterGetOldlist	sqlite\sqlite3.c	/^static char *rbuObjIterGetOldlist($/;"	f	file:
rbuObjIterGetSetlist	sqlite\sqlite3.c	/^static char *rbuObjIterGetSetlist($/;"	f	file:
rbuObjIterGetWhere	sqlite\sqlite3.c	/^static char *rbuObjIterGetWhere($/;"	f	file:
rbuObjIterNext	sqlite\sqlite3.c	/^static int rbuObjIterNext(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbuObjIterPrepareAll	sqlite\sqlite3.c	/^static int rbuObjIterPrepareAll($/;"	f	file:
rbuObjIterPrepareTmpInsert	sqlite\sqlite3.c	/^static void rbuObjIterPrepareTmpInsert($/;"	f	file:
rbuOpenDatabase	sqlite\sqlite3.c	/^static void rbuOpenDatabase(sqlite3rbu *p, int *pbRetry){$/;"	f	file:
rbuOpenDbhandle	sqlite\sqlite3.c	/^static sqlite3 *rbuOpenDbhandle($/;"	f	file:
rbuPutU16	sqlite\sqlite3.c	/^static void rbuPutU16(u8 *aBuf, u16 iVal){$/;"	f	file:
rbuPutU32	sqlite\sqlite3.c	/^static void rbuPutU32(u8 *aBuf, u32 iVal){$/;"	f	file:
rbuSaveState	sqlite\sqlite3.c	/^static void rbuSaveState(sqlite3rbu *p, int eStage){$/;"	f	file:
rbuSetupCheckpoint	sqlite\sqlite3.c	/^static void rbuSetupCheckpoint(sqlite3rbu *p, RbuState *pState){$/;"	f	file:
rbuSetupOal	sqlite\sqlite3.c	/^static void rbuSetupOal(sqlite3rbu *p, RbuState *pState){$/;"	f	file:
rbuShmChecksum	sqlite\sqlite3.c	/^static i64 rbuShmChecksum(sqlite3rbu *p){$/;"	f	file:
rbuStep	sqlite\sqlite3.c	/^static int rbuStep(sqlite3rbu *p){$/;"	f	file:
rbuStepOneOp	sqlite\sqlite3.c	/^static void rbuStepOneOp(sqlite3rbu *p, int eType){$/;"	f	file:
rbuStepType	sqlite\sqlite3.c	/^static int rbuStepType(sqlite3rbu *p, const char **pzMask){$/;"	f	file:
rbuStrCompare	sqlite\sqlite3.c	/^static int rbuStrCompare(const char *z1, const char *z2){$/;"	f	file:
rbuStrndup	sqlite\sqlite3.c	/^static char *rbuStrndup(const char *zStr, int *pRc){$/;"	f	file:
rbuTableType	sqlite\sqlite3.c	/^static void rbuTableType($/;"	f	file:
rbuTargetNameFunc	sqlite\sqlite3.c	/^static void rbuTargetNameFunc($/;"	f	file:
rbuTmpInsertFunc	sqlite\sqlite3.c	/^static void rbuTmpInsertFunc($/;"	f	file:
rbuUnlockShm	sqlite\sqlite3.c	/^static void rbuUnlockShm(rbu_file *p){$/;"	f	file:
rbuUpdateTempSize	sqlite\sqlite3.c	/^static int rbuUpdateTempSize(rbu_file *pFd, sqlite3_int64 nNew){$/;"	f	file:
rbuVfsAccess	sqlite\sqlite3.c	/^static int rbuVfsAccess($/;"	f	file:
rbuVfsCheckReservedLock	sqlite\sqlite3.c	/^static int rbuVfsCheckReservedLock(sqlite3_file *pFile, int *pResOut){$/;"	f	file:
rbuVfsClose	sqlite\sqlite3.c	/^static int rbuVfsClose(sqlite3_file *pFile){$/;"	f	file:
rbuVfsCurrentTime	sqlite\sqlite3.c	/^static int rbuVfsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){$/;"	f	file:
rbuVfsDelete	sqlite\sqlite3.c	/^static int rbuVfsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f	file:
rbuVfsDeviceCharacteristics	sqlite\sqlite3.c	/^static int rbuVfsDeviceCharacteristics(sqlite3_file *pFile){$/;"	f	file:
rbuVfsDlClose	sqlite\sqlite3.c	/^static void rbuVfsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
rbuVfsDlError	sqlite\sqlite3.c	/^static void rbuVfsDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg){$/;"	f	file:
rbuVfsDlOpen	sqlite\sqlite3.c	/^static void *rbuVfsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f	file:
rbuVfsDlSym	sqlite\sqlite3.c	/^static void (*rbuVfsDlSym($/;"	f	file:
rbuVfsFileControl	sqlite\sqlite3.c	/^static int rbuVfsFileControl(sqlite3_file *pFile, int op, void *pArg){$/;"	f	file:
rbuVfsFileSize	sqlite\sqlite3.c	/^static int rbuVfsFileSize(sqlite3_file *pFile, sqlite_int64 *pSize){$/;"	f	file:
rbuVfsFullPathname	sqlite\sqlite3.c	/^static int rbuVfsFullPathname($/;"	f	file:
rbuVfsGetLastError	sqlite\sqlite3.c	/^static int rbuVfsGetLastError(sqlite3_vfs *pVfs, int a, char *b){$/;"	f	file:
rbuVfsLock	sqlite\sqlite3.c	/^static int rbuVfsLock(sqlite3_file *pFile, int eLock){$/;"	f	file:
rbuVfsOpen	sqlite\sqlite3.c	/^static int rbuVfsOpen($/;"	f	file:
rbuVfsRandomness	sqlite\sqlite3.c	/^static int rbuVfsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f	file:
rbuVfsRead	sqlite\sqlite3.c	/^static int rbuVfsRead($/;"	f	file:
rbuVfsSectorSize	sqlite\sqlite3.c	/^static int rbuVfsSectorSize(sqlite3_file *pFile){$/;"	f	file:
rbuVfsShmBarrier	sqlite\sqlite3.c	/^static void rbuVfsShmBarrier(sqlite3_file *pFile){$/;"	f	file:
rbuVfsShmLock	sqlite\sqlite3.c	/^static int rbuVfsShmLock(sqlite3_file *pFile, int ofst, int n, int flags){$/;"	f	file:
rbuVfsShmMap	sqlite\sqlite3.c	/^static int rbuVfsShmMap($/;"	f	file:
rbuVfsShmUnmap	sqlite\sqlite3.c	/^static int rbuVfsShmUnmap(sqlite3_file *pFile, int delFlag){$/;"	f	file:
rbuVfsSleep	sqlite\sqlite3.c	/^static int rbuVfsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f	file:
rbuVfsSync	sqlite\sqlite3.c	/^static int rbuVfsSync(sqlite3_file *pFile, int flags){$/;"	f	file:
rbuVfsTruncate	sqlite\sqlite3.c	/^static int rbuVfsTruncate(sqlite3_file *pFile, sqlite_int64 size){$/;"	f	file:
rbuVfsUnlock	sqlite\sqlite3.c	/^static int rbuVfsUnlock(sqlite3_file *pFile, int eLock){$/;"	f	file:
rbuVfsWrite	sqlite\sqlite3.c	/^static int rbuVfsWrite($/;"	f	file:
rbuWinUtf8ToUnicode	sqlite\sqlite3.c	/^static LPWSTR rbuWinUtf8ToUnicode(const char *zFilename){$/;"	f	file:
rbuWithoutRowidPK	sqlite\sqlite3.c	/^static char *rbuWithoutRowidPK(sqlite3rbu *p, RbuObjIter *pIter){$/;"	f	file:
rbu_file	sqlite\sqlite3.c	/^struct rbu_file {$/;"	s	file:
rbu_file	sqlite\sqlite3.c	/^typedef struct rbu_file rbu_file;$/;"	t	typeref:struct:rbu_file	file:
rbu_vfs	sqlite\sqlite3.c	/^struct rbu_vfs {$/;"	s	file:
rbu_vfs	sqlite\sqlite3.c	/^typedef struct rbu_vfs rbu_vfs;$/;"	t	typeref:struct:rbu_vfs	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Current error code *\/$/;"	m	struct:Fts5Index	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Error code *\/$/;"	m	struct:sqlite3_changegroup	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Iterator error code *\/$/;"	m	struct:sqlite3_changeset_iter	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Non-zero if an error has occurred *\/$/;"	m	struct:sqlite3_session	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Return code *\/$/;"	m	struct:RtreeCheck	file:
rc	sqlite\sqlite3.c	/^  int rc;                         \/* Value returned by last rbu_step() call *\/$/;"	m	struct:sqlite3rbu	file:
rc	sqlite\sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	sqlite\sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	sqlite\sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	sqlite\sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon9	file:
rc	sqlite\sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rc	sqlite\sqlite3.c	/^  int rc;$/;"	m	struct:Fts5Parse	file:
rc	sqlite\sqlite3.c	/^  int rc;$/;"	m	struct:TokenCtx	file:
rcApp	sqlite\sqlite3.c	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe	file:
read32bits	sqlite\sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	sqlite\sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	sqlite\sqlite3.c	/^static int readDbPage(PgHdr *pPg){$/;"	f	file:
readInt16	sqlite\sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	sqlite\sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	sqlite\sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	sqlite\sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	sqlite\sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	sqlite\sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:
readOnly	sqlite\sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	sqlite\sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
reader	sqlite\sqlite3.c	/^  Fts5LookaheadReader reader;     \/* Input iterator *\/$/;"	m	struct:Fts5NearTrimmer	file:
readpoint	sqlite\sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	sqlite\sqlite3.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
realloc	sqlite\sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realloc64	sqlite\sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
rebase	sqlite\sqlite3.c	/^  SessionBuffer rebase;           \/* Rebase information (if any) here *\/$/;"	m	struct:SessionApplyCtx	file:
rebuildPage	sqlite\sqlite3.c	/^static int rebuildPage($/;"	f	file:
recordFunc	sqlite\sqlite3.c	/^static void recordFunc($/;"	f	file:
regCtr	sqlite\sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regResult	sqlite\sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	sqlite\sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	sqlite\sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regRoot	sqlite\sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	sqlite\sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	sqlite\sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	sqlite\sqlite3.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
rehash	sqlite\sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	sqlite\sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	sqlite\sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	sqlite\sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	sqlite\sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	sqlite\sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	sqlite\sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	sqlite\sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
releasePageNotNull	sqlite\sqlite3.c	/^static void releasePageNotNull(MemPage *pPage){$/;"	f	file:
releasePageOne	sqlite\sqlite3.c	/^static void releasePageOne(MemPage *pPage){$/;"	f	file:
release_memory	sqlite\sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	sqlite\sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	sqlite\sqlite3.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	sqlite\sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	sqlite\sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	sqlite\sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	sqlite\sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
removeUnindexableInClauseTerms	sqlite\sqlite3.c	/^static Expr *removeUnindexableInClauseTerms($/;"	f	file:
remove_diacritic	sqlite\sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	sqlite\sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	sqlite\sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	sqlite\sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	sqlite\sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
reopenMemdb	sqlite\sqlite3.c	/^    unsigned reopenMemdb : 1;   \/* ATTACH is really a reopen using MemDB *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
replaceFunc	sqlite\sqlite3.c	/^static void replaceFunc($/;"	f	file:
reserved	sqlite\sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	sqlite\sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	sqlite\sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
resetAndCollectError	sqlite\sqlite3.c	/^static int resetAndCollectError(sqlite3_stmt *pStmt, char **pzErrmsg){$/;"	f	file:
reset_auto_extension	sqlite\sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:
resizeIndexObject	sqlite\sqlite3.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	sqlite\sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	sqlite\sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	sqlite\sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	sqlite\sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	sqlite\sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	sqlite\sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	sqlite\sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	sqlite\sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	sqlite\sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	sqlite\sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	sqlite\sqlite3.c	62447;"	d	file:
result_blob	sqlite\sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_blob64	sqlite\sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_double	sqlite\sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	sqlite\sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	sqlite\sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	sqlite\sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	sqlite\sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	sqlite\sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	sqlite\sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	sqlite\sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	sqlite\sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_pointer	sqlite\sqlite3.c	/^  void (*result_pointer)(sqlite3_context*,void*,const char*,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_subtype	sqlite\sqlite3.c	/^  void (*result_subtype)(sqlite3_context*,unsigned int);$/;"	m	struct:sqlite3_api_routines	file:
result_text	sqlite\sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	sqlite\sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	sqlite\sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	sqlite\sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text64	sqlite\sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_value	sqlite\sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	sqlite\sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob64	sqlite\sqlite3.c	/^  int (*result_zeroblob64)(sqlite3_context*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	sqlite\sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	sqlite\sqlite3.c	/^static void returnSingleInt(Vdbe *v, i64 value){$/;"	f	file:
returnSingleText	sqlite\sqlite3.c	/^static void returnSingleText($/;"	f	file:
reusable	sqlite\sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:
revLoop	sqlite\sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:
revMask	sqlite\sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:
robustFchown	sqlite\sqlite3.c	/^static int robustFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
robust_close	sqlite\sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	sqlite\sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	sqlite\sqlite3.c	33565;"	d	file:
robust_ftruncate	sqlite\sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	sqlite\sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	sqlite\sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
rootOnly	sqlite\sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	sqlite\sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetEntryAlloc	sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	sqlite\sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetTreeToList	sqlite\sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowid	sqlite\sqlite3.c	/^  i64 rowid;                      \/* This table's current rowid value *\/$/;"	m	struct:Fts5VocabCursor	file:
rowidWrite	sqlite\sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rsFlags	sqlite\sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
rtreeBeginTransaction	sqlite\sqlite3.c	/^static int rtreeBeginTransaction(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeBestIndex	sqlite\sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeCallbackConstraint	sqlite\sqlite3.c	/^static int rtreeCallbackConstraint($/;"	f	file:
rtreeCheckAppendMsg	sqlite\sqlite3.c	/^static void rtreeCheckAppendMsg(RtreeCheck *pCheck, const char *zFmt, ...){$/;"	f	file:
rtreeCheckCellCoord	sqlite\sqlite3.c	/^static void rtreeCheckCellCoord($/;"	f	file:
rtreeCheckCount	sqlite\sqlite3.c	/^static void rtreeCheckCount(RtreeCheck *pCheck, const char *zTbl, i64 nExpect){$/;"	f	file:
rtreeCheckGetNode	sqlite\sqlite3.c	/^static u8 *rtreeCheckGetNode(RtreeCheck *pCheck, i64 iNode, int *pnNode){$/;"	f	file:
rtreeCheckMapping	sqlite\sqlite3.c	/^static void rtreeCheckMapping($/;"	f	file:
rtreeCheckNode	sqlite\sqlite3.c	/^static void rtreeCheckNode($/;"	f	file:
rtreeCheckPrepare	sqlite\sqlite3.c	/^static sqlite3_stmt *rtreeCheckPrepare($/;"	f	file:
rtreeCheckReset	sqlite\sqlite3.c	/^static void rtreeCheckReset(RtreeCheck *pCheck, sqlite3_stmt *pStmt){$/;"	f	file:
rtreeCheckTable	sqlite\sqlite3.c	/^static int rtreeCheckTable($/;"	f	file:
rtreeClose	sqlite\sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	sqlite\sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	sqlite\sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeConstraintError	sqlite\sqlite3.c	/^static int rtreeConstraintError(Rtree *pRtree, int iCol){$/;"	f	file:
rtreeCreate	sqlite\sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	sqlite\sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	sqlite\sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	sqlite\sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEndTransaction	sqlite\sqlite3.c	/^static int rtreeEndTransaction(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEnqueue	sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:
rtreeEof	sqlite\sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	sqlite\sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeFreeCallback	sqlite\sqlite3.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:
rtreeInit	sqlite\sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	sqlite\sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeLeafConstraint	sqlite\sqlite3.c	/^static void rtreeLeafConstraint($/;"	f	file:
rtreeMatchArgFree	sqlite\sqlite3.c	/^static void rtreeMatchArgFree(void *pArg){$/;"	f	file:
rtreeModule	sqlite\sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	sqlite\sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeNodeOfFirstSearchPoint	sqlite\sqlite3.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:
rtreeNonleafConstraint	sqlite\sqlite3.c	/^static void rtreeNonleafConstraint($/;"	f	file:
rtreeOpen	sqlite\sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeQueryStat1	sqlite\sqlite3.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:
rtreeReference	sqlite\sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	sqlite\sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	sqlite\sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	sqlite\sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSavepoint	sqlite\sqlite3.c	/^static int rtreeSavepoint(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
rtreeSearchPointCompare	sqlite\sqlite3.c	/^static int rtreeSearchPointCompare($/;"	f	file:
rtreeSearchPointFirst	sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:
rtreeSearchPointNew	sqlite\sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:
rtreeSearchPointPop	sqlite\sqlite3.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:
rtreeSearchPointSwap	sqlite\sqlite3.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:
rtreeSqlInit	sqlite\sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeStepToLeaf	sqlite\sqlite3.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:
rtreeUpdate	sqlite\sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	sqlite\sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	sqlite\sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreecheck	sqlite\sqlite3.c	/^static void rtreecheck($/;"	f	file:
rtreedepth	sqlite\sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	sqlite\sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	sqlite\sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	sqlite\sqlite3.c	/^  double s;           \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	sqlite\sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	sqlite\sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	sqlite\sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sFts5Api	sqlite\sqlite3.c	/^static const Fts5ExtensionApi sFts5Api = {$/;"	v	file:
sLastToken	sqlite\sqlite3.c	/^  Token sLastToken;       \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sMaskSet	sqlite\sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:
sNameToken	sqlite\sqlite3.c	/^  Token sNameToken;       \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
sParse	sqlite\sqlite3.c	/^  JsonParse sParse;          \/* Parse of the input JSON *\/$/;"	m	struct:JsonEachCursor	file:
sPoint	sqlite\sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:
sWC	sqlite\sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
safe_isalnum	sqlite\sqlite3.c	185897;"	d	file:
safe_isdigit	sqlite\sqlite3.c	185896;"	d	file:
safe_isspace	sqlite\sqlite3.c	185930;"	d	file:
safe_isxdigit	sqlite\sqlite3.c	185898;"	d	file:
safety_level	sqlite\sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
sampleClear	sqlite\sqlite3.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	sqlite\sqlite3.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	sqlite\sqlite3.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	sqlite\sqlite3.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	sqlite\sqlite3.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	sqlite\sqlite3.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	sqlite\sqlite3.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	sqlite\sqlite3.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
saveAllCursors	sqlite\sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorKey	sqlite\sqlite3.c	/^static int saveCursorKey(BtCursor *pCur){$/;"	f	file:
saveCursorPosition	sqlite\sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	sqlite\sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
savedNQueryLoop	sqlite\sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	sqlite\sqlite3.c	/^static int saved_cnt;$/;"	v	file:
schemaFlags	sqlite\sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
schemaIsValid	sqlite\sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	sqlite\sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
searchWith	sqlite\sqlite3.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	sqlite\sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	sqlite\sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	sqlite\sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	sqlite\sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	sqlite\sqlite3.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	sqlite\sqlite3.c	/^  u8 seekOp;              \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:
seekResult	sqlite\sqlite3.c	/^  int seekResult;         \/* Result of previous sqlite3BtreeMoveto() or 0$/;"	m	struct:VdbeCursor	file:
selFlags	sqlite\sqlite3.c	/^  u32 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddSubqueryTypeInfo	sqlite\sqlite3.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectExpander	sqlite\sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	sqlite\sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectOpName	sqlite\sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	sqlite\sqlite3.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
selectPopWith	sqlite\sqlite3.c	124603;"	d	file:
semXCheckReservedLock	sqlite\sqlite3.c	/^static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semXClose	sqlite\sqlite3.c	/^static int semXClose(sqlite3_file *id) {$/;"	f	file:
semXLock	sqlite\sqlite3.c	/^static int semXLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semXUnlock	sqlite\sqlite3.c	/^static int semXUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
separateCache	sqlite\sqlite3.c	/^  int separateCache;             \/* Use a new PGroup for each PCache *\/$/;"	m	struct:PCacheGlobal	file:
seqCount	sqlite\sqlite3.c	/^  i64 seqCount;           \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
serialGet	sqlite\sqlite3.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
sessionAppendBlob	sqlite\sqlite3.c	/^static void sessionAppendBlob($/;"	f	file:
sessionAppendByte	sqlite\sqlite3.c	/^static void sessionAppendByte(SessionBuffer *p, u8 v, int *pRc){$/;"	f	file:
sessionAppendCol	sqlite\sqlite3.c	/^static void sessionAppendCol($/;"	f	file:
sessionAppendDelete	sqlite\sqlite3.c	/^static int sessionAppendDelete($/;"	f	file:
sessionAppendIdent	sqlite\sqlite3.c	/^static void sessionAppendIdent($/;"	f	file:
sessionAppendInteger	sqlite\sqlite3.c	/^static void sessionAppendInteger($/;"	f	file:
sessionAppendPartialUpdate	sqlite\sqlite3.c	/^static void sessionAppendPartialUpdate($/;"	f	file:
sessionAppendRecordMerge	sqlite\sqlite3.c	/^static void sessionAppendRecordMerge($/;"	f	file:
sessionAppendStr	sqlite\sqlite3.c	/^static void sessionAppendStr($/;"	f	file:
sessionAppendTableHdr	sqlite\sqlite3.c	/^static void sessionAppendTableHdr($/;"	f	file:
sessionAppendUpdate	sqlite\sqlite3.c	/^static int sessionAppendUpdate($/;"	f	file:
sessionAppendValue	sqlite\sqlite3.c	/^static void sessionAppendValue(SessionBuffer *p, sqlite3_value *pVal, int *pRc){$/;"	f	file:
sessionAppendVarint	sqlite\sqlite3.c	/^static void sessionAppendVarint(SessionBuffer *p, int v, int *pRc){$/;"	f	file:
sessionApplyOneOp	sqlite\sqlite3.c	/^static int sessionApplyOneOp($/;"	f	file:
sessionApplyOneWithRetry	sqlite\sqlite3.c	/^static int sessionApplyOneWithRetry($/;"	f	file:
sessionBindRow	sqlite\sqlite3.c	/^static int sessionBindRow($/;"	f	file:
sessionBindValue	sqlite\sqlite3.c	/^static int sessionBindValue($/;"	f	file:
sessionBufferGrow	sqlite\sqlite3.c	/^static int sessionBufferGrow(SessionBuffer *p, int nByte, int *pRc){$/;"	f	file:
sessionChangeEqual	sqlite\sqlite3.c	/^static int sessionChangeEqual($/;"	f	file:
sessionChangeHash	sqlite\sqlite3.c	/^static unsigned int sessionChangeHash($/;"	f	file:
sessionChangeMerge	sqlite\sqlite3.c	/^static int sessionChangeMerge($/;"	f	file:
sessionChangegroupOutput	sqlite\sqlite3.c	/^static int sessionChangegroupOutput($/;"	f	file:
sessionChangesetApply	sqlite\sqlite3.c	/^static int sessionChangesetApply($/;"	f	file:
sessionChangesetBufferRecord	sqlite\sqlite3.c	/^static int sessionChangesetBufferRecord($/;"	f	file:
sessionChangesetBufferTblhdr	sqlite\sqlite3.c	/^static int sessionChangesetBufferTblhdr(SessionInput *pIn, int *pnByte){$/;"	f	file:
sessionChangesetInvert	sqlite\sqlite3.c	/^static int sessionChangesetInvert($/;"	f	file:
sessionChangesetNew	sqlite\sqlite3.c	183600;"	d	file:
sessionChangesetNext	sqlite\sqlite3.c	/^static int sessionChangesetNext($/;"	f	file:
sessionChangesetOld	sqlite\sqlite3.c	183601;"	d	file:
sessionChangesetReadTblhdr	sqlite\sqlite3.c	/^static int sessionChangesetReadTblhdr(sqlite3_changeset_iter *p){$/;"	f	file:
sessionChangesetStart	sqlite\sqlite3.c	/^static int sessionChangesetStart($/;"	f	file:
sessionChangesetToHash	sqlite\sqlite3.c	/^static int sessionChangesetToHash($/;"	f	file:
sessionConflictHandler	sqlite\sqlite3.c	/^static int sessionConflictHandler($/;"	f	file:
sessionDeleteRow	sqlite\sqlite3.c	/^static int sessionDeleteRow($/;"	f	file:
sessionDeleteTable	sqlite\sqlite3.c	/^static void sessionDeleteTable(SessionTable *pList){$/;"	f	file:
sessionDiffCount	sqlite\sqlite3.c	/^static int sessionDiffCount(void *pCtx){$/;"	f	file:
sessionDiffDepth	sqlite\sqlite3.c	/^static int sessionDiffDepth(void *pCtx){$/;"	f	file:
sessionDiffFindModified	sqlite\sqlite3.c	/^static int sessionDiffFindModified($/;"	f	file:
sessionDiffFindNew	sqlite\sqlite3.c	/^static int sessionDiffFindNew($/;"	f	file:
sessionDiffHooks	sqlite\sqlite3.c	/^static void sessionDiffHooks($/;"	f	file:
sessionDiffNew	sqlite\sqlite3.c	/^static int sessionDiffNew(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionDiffOld	sqlite\sqlite3.c	/^static int sessionDiffOld(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionDiscardData	sqlite\sqlite3.c	/^static void sessionDiscardData(SessionInput *pIn){$/;"	f	file:
sessionExprCompareOther	sqlite\sqlite3.c	/^static char *sessionExprCompareOther($/;"	f	file:
sessionExprComparePK	sqlite\sqlite3.c	/^static char *sessionExprComparePK($/;"	f	file:
sessionFindTable	sqlite\sqlite3.c	/^static int sessionFindTable($/;"	f	file:
sessionGenerateChangeset	sqlite\sqlite3.c	/^static int sessionGenerateChangeset($/;"	f	file:
sessionGetI64	sqlite\sqlite3.c	/^static sqlite3_int64 sessionGetI64(u8 *aRec){$/;"	f	file:
sessionGrowHash	sqlite\sqlite3.c	/^static int sessionGrowHash(int bPatchset, SessionTable *pTab){$/;"	f	file:
sessionHashAppendBlob	sqlite\sqlite3.c	/^static unsigned int sessionHashAppendBlob(unsigned int h, int n, const u8 *z){$/;"	f	file:
sessionHashAppendI64	sqlite\sqlite3.c	/^static unsigned int sessionHashAppendI64(unsigned int h, i64 i){$/;"	f	file:
sessionHashAppendType	sqlite\sqlite3.c	/^static unsigned int sessionHashAppendType(unsigned int h, int eType){$/;"	f	file:
sessionInitTable	sqlite\sqlite3.c	/^static int sessionInitTable(sqlite3_session *pSession, SessionTable *pTab){$/;"	f	file:
sessionInputBuffer	sqlite\sqlite3.c	/^static int sessionInputBuffer(SessionInput *pIn, int nByte){$/;"	f	file:
sessionInsertRow	sqlite\sqlite3.c	/^static int sessionInsertRow($/;"	f	file:
sessionMergeRecord	sqlite\sqlite3.c	/^static void sessionMergeRecord($/;"	f	file:
sessionMergeUpdate	sqlite\sqlite3.c	/^static int sessionMergeUpdate($/;"	f	file:
sessionMergeValue	sqlite\sqlite3.c	/^static u8 *sessionMergeValue($/;"	f	file:
sessionPrepare	sqlite\sqlite3.c	/^static int sessionPrepare(sqlite3 *db, sqlite3_stmt **pp, const char *zSql){$/;"	f	file:
sessionPreupdateCount	sqlite\sqlite3.c	/^static int sessionPreupdateCount(void *pCtx){$/;"	f	file:
sessionPreupdateDepth	sqlite\sqlite3.c	/^static int sessionPreupdateDepth(void *pCtx){$/;"	f	file:
sessionPreupdateEqual	sqlite\sqlite3.c	/^static int sessionPreupdateEqual($/;"	f	file:
sessionPreupdateHash	sqlite\sqlite3.c	/^static int sessionPreupdateHash($/;"	f	file:
sessionPreupdateHooks	sqlite\sqlite3.c	/^static void sessionPreupdateHooks($/;"	f	file:
sessionPreupdateNew	sqlite\sqlite3.c	/^static int sessionPreupdateNew(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionPreupdateOld	sqlite\sqlite3.c	/^static int sessionPreupdateOld(void *pCtx, int iVal, sqlite3_value **ppVal){$/;"	f	file:
sessionPreupdateOneChange	sqlite\sqlite3.c	/^static void sessionPreupdateOneChange($/;"	f	file:
sessionPutI64	sqlite\sqlite3.c	/^static void sessionPutI64(u8 *aBuf, sqlite3_int64 i){$/;"	f	file:
sessionReadRecord	sqlite\sqlite3.c	/^static int sessionReadRecord($/;"	f	file:
sessionRebase	sqlite\sqlite3.c	/^static int sessionRebase($/;"	f	file:
sessionRebaseAdd	sqlite\sqlite3.c	/^static int sessionRebaseAdd($/;"	f	file:
sessionRetryConstraints	sqlite\sqlite3.c	/^static int sessionRetryConstraints($/;"	f	file:
sessionSeekToRow	sqlite\sqlite3.c	/^static int sessionSeekToRow($/;"	f	file:
sessionSelectBind	sqlite\sqlite3.c	/^static int sessionSelectBind($/;"	f	file:
sessionSelectFindNew	sqlite\sqlite3.c	/^static char *sessionSelectFindNew($/;"	f	file:
sessionSelectRow	sqlite\sqlite3.c	/^static int sessionSelectRow($/;"	f	file:
sessionSelectStmt	sqlite\sqlite3.c	/^static int sessionSelectStmt($/;"	f	file:
sessionSerialLen	sqlite\sqlite3.c	/^static int sessionSerialLen(u8 *a){$/;"	f	file:
sessionSerializeValue	sqlite\sqlite3.c	/^static int sessionSerializeValue($/;"	f	file:
sessionSkipRecord	sqlite\sqlite3.c	/^static void sessionSkipRecord($/;"	f	file:
sessionStat1Count	sqlite\sqlite3.c	/^static int sessionStat1Count(void *pCtx){$/;"	f	file:
sessionStat1Depth	sqlite\sqlite3.c	/^static int sessionStat1Depth(void *pCtx){$/;"	f	file:
sessionStat1New	sqlite\sqlite3.c	/^static int sessionStat1New(void *pCtx, int iCol, sqlite3_value **ppVal){$/;"	f	file:
sessionStat1Old	sqlite\sqlite3.c	/^static int sessionStat1Old(void *pCtx, int iCol, sqlite3_value **ppVal){$/;"	f	file:
sessionStat1Sql	sqlite\sqlite3.c	/^static int sessionStat1Sql(sqlite3 *db, SessionApplyCtx *p){$/;"	f	file:
sessionTableInfo	sqlite\sqlite3.c	/^static int sessionTableInfo($/;"	f	file:
sessionUpdateRow	sqlite\sqlite3.c	/^static int sessionUpdateRow($/;"	f	file:
sessionValueSetStr	sqlite\sqlite3.c	/^static int sessionValueSetStr($/;"	f	file:
sessionVarintGet	sqlite\sqlite3.c	/^static int sessionVarintGet(u8 *aBuf, int *piVal){$/;"	f	file:
sessionVarintLen	sqlite\sqlite3.c	/^static int sessionVarintLen(int iVal){$/;"	f	file:
sessionVarintPut	sqlite\sqlite3.c	/^static int sessionVarintPut(u8 *aBuf, int iVal){$/;"	f	file:
setAllPagerFlags	sqlite\sqlite3.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setAllPagerFlags	sqlite\sqlite3.c	117108;"	d	file:
setChildPtrmaps	sqlite\sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	sqlite\sqlite3.c	65451;"	d	file:
setDateTimeToCurrent	sqlite\sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDefaultSyncFlag	sqlite\sqlite3.c	/^static void setDefaultSyncFlag(BtShared *pBt, u8 safety_level){$/;"	f	file:
setDefaultSyncFlag	sqlite\sqlite3.c	64570;"	d	file:
setDestPgsz	sqlite\sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setDeviceCharacteristics	sqlite\sqlite3.c	/^static void setDeviceCharacteristics(unixFile *pFd){$/;"	f	file:
setDeviceCharacteristics	sqlite\sqlite3.c	/^static void setDeviceCharacteristics(unixFile *pFile){$/;"	f	file:
setGetterMethod	sqlite\sqlite3.c	/^static void setGetterMethod(Pager *pPager){$/;"	f	file:
setJoinExpr	sqlite\sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	sqlite\sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	sqlite\sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	sqlite\sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	sqlite\sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setPragmaResultColumnNames	sqlite\sqlite3.c	/^static void setPragmaResultColumnNames($/;"	f	file:
setRawDateNumber	sqlite\sqlite3.c	/^static void setRawDateNumber(DateTime *p, double r){$/;"	f	file:
setResultStrOrError	sqlite\sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	sqlite\sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	sqlite\sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	sqlite\sqlite3.c	61706;"	d	file:
setStrAccumError	sqlite\sqlite3.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
set_authorizer	sqlite\sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	sqlite\sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
set_last_insert_rowid	sqlite\sqlite3.c	/^  void (*set_last_insert_rowid)(sqlite3*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	sqlite\sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	sqlite\sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	sqlite\sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	sqlite\sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	sqlite\sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	sqlite\sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	sqlite\sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	sqlite\sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	sqlite\sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
simpleClose	sqlite\sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	sqlite\sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	sqlite\sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	sqlite\sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	sqlite\sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	sqlite\sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	sqlite\sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	sqlite\sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	sqlite\sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	sqlite\sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	sqlite\sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size4x	sqlite\sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon14::__anon15	file:
sjfd	sqlite\sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipBtreeMutex	sqlite\sqlite3.c	/^  u8 skipBtreeMutex;            \/* True if no shared-cache backends *\/$/;"	m	struct:sqlite3	file:
skipFlag	sqlite\sqlite3.c	/^  u8 skipFlag;            \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	sqlite\sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:
sleep	sqlite\sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	sqlite\sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
soft_heap_limit	sqlite\sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	sqlite\sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortFlags	sqlite\sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	sqlite\sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sorted	sqlite\sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:
sortingIdx	sqlite\sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	sqlite\sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	sqlite\sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	sqlite\sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	sqlite\sqlite3.c	/^static void sourceidFunc($/;"	f	file:
splitNodeStartree	sqlite\sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sql	sqlite\sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqlite3	sqlite\sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	sqlite\sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AbsInt32	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName, Token *pType){$/;"	f
sqlite3AddDefaultValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue($/;"	f
sqlite3AddInt64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	sqlite\sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f
sqlite3ArrayAllocate	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	sqlite\sqlite3.c	18194;"	d	file:
sqlite3AuthContextPop	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	sqlite\sqlite3.c	18196;"	d	file:
sqlite3AuthContextPush	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	sqlite\sqlite3.c	18195;"	d	file:
sqlite3AuthRead	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	sqlite\sqlite3.c	18193;"	d	file:
sqlite3AuthReadCol	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	sqlite\sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	sqlite\sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	sqlite\sqlite3.c	17981;"	d	file:
sqlite3AutoincrementEnd	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	sqlite\sqlite3.c	17982;"	d	file:
sqlite3BackupRestart	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	sqlite\sqlite3.c	18546;"	d	file:
sqlite3BeginTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecTestNotNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTestNotNull(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	sqlite\sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeConnectionCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeConnectionCount(Btree *p){$/;"	f
sqlite3BtreeConnectionCount	sqlite\sqlite3.c	13992;"	d	file:
sqlite3BtreeCopyFile	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasHint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorHasMoved	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHint(BtCursor *pCur, int eHintType, ...){$/;"	f
sqlite3BtreeCursorHintFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHintFlags(BtCursor *pCur, unsigned x){$/;"	f
sqlite3BtreeCursorIsValid	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorIsValidNN	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValidNN(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorRestore	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur, u8 flags){$/;"	f
sqlite3BtreeDropTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	sqlite\sqlite3.c	13988;"	d	file:
sqlite3BtreeEnterAll	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	sqlite\sqlite3.c	13989;"	d	file:
sqlite3BtreeEnterCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	sqlite\sqlite3.c	13991;"	d	file:
sqlite3BtreeEof	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFakeValidCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE BtCursor *sqlite3BtreeFakeValidCursor(void){$/;"	f
sqlite3BtreeFirst	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetOptimalReserve	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){$/;"	f
sqlite3BtreeGetPageSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite\sqlite3.c	14012;"	d	file:
sqlite3BtreeHoldsMutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	sqlite\sqlite3.c	14011;"	d	file:
sqlite3BtreeIncrVacuum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegerKey	sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3BtreeIntegerKey(BtCursor *pCur){$/;"	f
sqlite3BtreeIntegrityCheck	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeLast	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite\sqlite3.c	14007;"	d	file:
sqlite3BtreeLeaveAll	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	sqlite\sqlite3.c	14009;"	d	file:
sqlite3BtreeLeaveCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	sqlite\sqlite3.c	14008;"	d	file:
sqlite3BtreeLockTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int flags){$/;"	f
sqlite3BtreeOffset	sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3BtreeOffset(BtCursor *pCur){$/;"	f
sqlite3BtreeOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	sqlite\sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePayload	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePayload(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreePayloadChecked	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePayloadChecked(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreePayloadFetch	sqlite\sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreePayloadFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreePayloadSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreePayloadSize(BtCursor *pCur){$/;"	f
sqlite3BtreePrevious	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int flags){$/;"	f
sqlite3BtreePutData	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f
sqlite3BtreeRowCountEst	sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3BtreeRowCountEst(BtCursor *pCur){$/;"	f
sqlite3BtreeSavepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetSpillSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetSpillSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetVersion	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	sqlite\sqlite3.c	13990;"	d	file:
sqlite3BtreeTripAllCursors	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f
sqlite3BtreeUpdateMeta	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3BuiltinFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE FuncDefHash sqlite3BuiltinFunctions;$/;"	v
sqlite3CantopenError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	sqlite\sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	sqlite\sqlite3.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	sqlite\sqlite3.c	18420;"	d	file:
sqlite3CloseSavepoints	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeRowTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	sqlite\sqlite3.c	18175;"	d	file:
sqlite3CodeRowTriggerDirect	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	sqlite\sqlite3.c	18176;"	d	file:
sqlite3CodeSubselect	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3ColumnPropertiesFromName	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnPropertiesFromName(Table *pTab, Column *pCol){$/;"	f
sqlite3ColumnPropertiesFromName	sqlite\sqlite3.c	17927;"	d	file:
sqlite3ColumnType	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3ColumnType(Column *pCol, char *zDflt){$/;"	f
sqlite3ColumnsFromExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ColumnsFromExprList($/;"	f
sqlite3CommitInternalChanges	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CompareAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompileOptions	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char **sqlite3CompileOptions(int *pnOpt){$/;"	f
sqlite3CompleteInsertion	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	sqlite\sqlite3.c	18593;"	d	file:
sqlite3ConnectionClosed	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	sqlite\sqlite3.c	18595;"	d	file:
sqlite3ConnectionUnlocked	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	sqlite\sqlite3.c	18594;"	d	file:
sqlite3CorruptError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3CorruptPgnoError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptPgnoError(int lineno, Pgno pgno){$/;"	f
sqlite3Coverage	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateIndex($/;"	f
sqlite3CreateView	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbFreeNN	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFreeNN(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocRawNN	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRawNN(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	sqlite\sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbSpanDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbSpanDup(sqlite3 *db, const char *zStart, const char *zEnd){$/;"	f
sqlite3DbStrDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DbpageRegister	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbpageRegister(sqlite3 *db){ return SQLITE_OK; }$/;"	f
sqlite3DbpageRegister	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbpageRegister(sqlite3 *db){$/;"	f
sqlite3DbstatRegister	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){ return SQLITE_OK; }$/;"	f
sqlite3DbstatRegister	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbstatRegister(sqlite3 *db){$/;"	f
sqlite3DebugPrintf	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteColumnNames	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteFrom	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	sqlite\sqlite3.c	18172;"	d	file:
sqlite3DeleteTriggerStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	sqlite\sqlite3.c	18173;"	d	file:
sqlite3EndBenignMalloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	sqlite\sqlite3.c	18547;"	d	file:
sqlite3EndTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3EndTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTransaction(Parse *pParse, int eType){$/;"	f
sqlite3ErrName	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorFinish	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void  sqlite3ErrorFinish(sqlite3 *db, int err_code){$/;"	f	file:
sqlite3ErrorMsg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr, u32 n){$/;"	f
sqlite3ExprAttachSubtrees	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	sqlite\sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	sqlite\sqlite3.c	18582;"	d	file:
sqlite3ExprCheckIN	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckIN(Parse *pParse, Expr *pIn){$/;"	f
sqlite3ExprCheckIN	sqlite\sqlite3.c	18391;"	d	file:
sqlite3ExprCode	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeCopy	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeGetColumnToReg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnToReg($/;"	f
sqlite3ExprCodeIN	sqlite\sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeLoadIndexColumn	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeLoadIndexColumn($/;"	f
sqlite3ExprCodeMove	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCollSeqMatch	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCollSeqMatch(Parse *pParse, Expr *pE1, Expr *pE2){$/;"	f
sqlite3ExprCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Parse *pParse, Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprCompareSkip	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprContainsSubquery	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprContainsSubquery(Expr *p){$/;"	f
sqlite3ExprCoveredByIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCoveredByIndex($/;"	f
sqlite3ExprDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDeleteNN	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void sqlite3ExprDeleteNN(sqlite3 *db, Expr *p){$/;"	f	file:
sqlite3ExprDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprForVectorField	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprForVectorField($/;"	f
sqlite3ExprFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIdToTrueFalse	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIdToTrueFalse(Expr *pExpr){$/;"	f
sqlite3ExprIfFalse	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfFalseDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalseDup(Parse *pParse, Expr *pExpr, int dest,int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Parse *pParse, Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprImpliesNonNullRow	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){$/;"	f
sqlite3ExprIsConstant	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsConstantOrGroupBy	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrGroupBy(Parse *pParse, Expr *p, ExprList *pGroupBy){$/;"	f
sqlite3ExprIsInteger	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprIsTableConstant	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){$/;"	f
sqlite3ExprIsVector	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsVector(Expr *pExpr){$/;"	f
sqlite3ExprListAppend	sqlite\sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListAppendVector	sqlite\sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppendVector($/;"	f
sqlite3ExprListCheckLength	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){$/;"	f
sqlite3ExprListSetName	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSortOrder	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder){$/;"	f
sqlite3ExprListSetSpan	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNNCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprNNCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprNeedsNoAffinityChange	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeightAndFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSkipCollate	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3ExprTruthValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprTruthValue(const Expr *pExpr){$/;"	f
sqlite3ExprVectorSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprVectorSize(Expr *pExpr){$/;"	f
sqlite3ExprWalkNoop	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f
sqlite3FaultSim	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FaultSim	sqlite\sqlite3.c	17941;"	d	file:
sqlite3FileSuffix3	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	sqlite\sqlite3.c	18295;"	d	file:
sqlite3FindCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex($/;"	f
sqlite3FindIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f
sqlite3FixSelect	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	sqlite\sqlite3.c	18515;"	d	file:
sqlite3FkCheck	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	sqlite\sqlite3.c	18516;"	d	file:
sqlite3FkDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	sqlite\sqlite3.c	18526;"	d	file:
sqlite3FkDropTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	sqlite\sqlite3.c	18517;"	d	file:
sqlite3FkLocateIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f
sqlite3FkLocateIndex	sqlite\sqlite3.c	18527;"	d	file:
sqlite3FkOldmask	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	sqlite\sqlite3.c	18518;"	d	file:
sqlite3FkReferences	sqlite\sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkReferences	sqlite\sqlite3.c	18520;"	d	file:
sqlite3FkRequired	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	sqlite\sqlite3.c	18519;"	d	file:
sqlite3Fts3AllSegdirs	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3Always	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }$/;"	f
sqlite3Fts3CacheDeferredDoclists	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3CacheDeferredDoclists	sqlite\sqlite3.c	150704;"	d	file:
sqlite3Fts3Corrupt	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferToken	sqlite\sqlite3.c	150703;"	d	file:
sqlite3Fts3DeferredTokenList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3DeferredTokenList	sqlite\sqlite3.c	150706;"	d	file:
sqlite3Fts3Dequote	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3ErrMsg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){$/;"	f
sqlite3Fts3EvalPhraseCleanup	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3EvalTestDeferred	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc){$/;"	f
sqlite3Fts3ExprFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f
sqlite3Fts3ExprInitTestInterface	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredDoclists	sqlite\sqlite3.c	150705;"	d	file:
sqlite3Fts3FreeDeferredTokens	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	sqlite\sqlite3.c	150702;"	d	file:
sqlite3Fts3GetVarint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *pBuf, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	sqlite\sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTok	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f
sqlite3Fts3InitTokenizer	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3MIBufferFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3MIBufferFree(MatchinfoBuffer *p){$/;"	f
sqlite3Fts3Matchinfo	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3Never	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }$/;"	f
sqlite3Fts3NextToken	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3Fts5AuxInit	sqlite\sqlite3.c	/^static int sqlite3Fts5AuxInit(fts5_api *pApi){$/;"	f	file:
sqlite3Fts5BufferAppendBlob	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferAppendBlob($/;"	f	file:
sqlite3Fts5BufferAppendPrintf	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferAppendPrintf($/;"	f	file:
sqlite3Fts5BufferAppendString	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferAppendString($/;"	f	file:
sqlite3Fts5BufferAppendVarint	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferAppendVarint(int *pRc, Fts5Buffer *pBuf, i64 iVal){$/;"	f	file:
sqlite3Fts5BufferFree	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferFree(Fts5Buffer *pBuf){$/;"	f	file:
sqlite3Fts5BufferSet	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferSet($/;"	f	file:
sqlite3Fts5BufferSize	sqlite\sqlite3.c	/^static int sqlite3Fts5BufferSize(int *pRc, Fts5Buffer *pBuf, u32 nByte){$/;"	f	file:
sqlite3Fts5BufferZero	sqlite\sqlite3.c	/^static void sqlite3Fts5BufferZero(Fts5Buffer *pBuf){$/;"	f	file:
sqlite3Fts5ConfigDeclareVtab	sqlite\sqlite3.c	/^static int sqlite3Fts5ConfigDeclareVtab(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ConfigFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ConfigFree(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ConfigLoad	sqlite\sqlite3.c	/^static int sqlite3Fts5ConfigLoad(Fts5Config *pConfig, int iCookie){$/;"	f	file:
sqlite3Fts5ConfigParse	sqlite\sqlite3.c	/^static int sqlite3Fts5ConfigParse($/;"	f	file:
sqlite3Fts5ConfigParseRank	sqlite\sqlite3.c	/^static int sqlite3Fts5ConfigParseRank($/;"	f	file:
sqlite3Fts5ConfigSetValue	sqlite\sqlite3.c	/^static int sqlite3Fts5ConfigSetValue($/;"	f	file:
sqlite3Fts5Corrupt	sqlite\sqlite3.c	/^static int sqlite3Fts5Corrupt() { return SQLITE_CORRUPT_VTAB; }$/;"	f	file:
sqlite3Fts5CreateTable	sqlite\sqlite3.c	/^static int sqlite3Fts5CreateTable($/;"	f	file:
sqlite3Fts5Dequote	sqlite\sqlite3.c	/^static void sqlite3Fts5Dequote(char *z){$/;"	f	file:
sqlite3Fts5DropAll	sqlite\sqlite3.c	/^static int sqlite3Fts5DropAll(Fts5Config *pConfig){$/;"	f	file:
sqlite3Fts5ExprCheckPoslists	sqlite\sqlite3.c	/^static void sqlite3Fts5ExprCheckPoslists(Fts5Expr *pExpr, i64 iRowid){$/;"	f	file:
sqlite3Fts5ExprClearPoslists	sqlite\sqlite3.c	/^static Fts5PoslistPopulator *sqlite3Fts5ExprClearPoslists(Fts5Expr *pExpr, int bLive){$/;"	f	file:
sqlite3Fts5ExprClonePhrase	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprClonePhrase($/;"	f	file:
sqlite3Fts5ExprEof	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprEof(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5ExprFirst	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprFirst(Fts5Expr *p, Fts5Index *pIdx, i64 iFirst, int bDesc){$/;"	f	file:
sqlite3Fts5ExprFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ExprFree(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5ExprInit	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprInit(Fts5Global *pGlobal, sqlite3 *db){$/;"	f	file:
sqlite3Fts5ExprNew	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprNew($/;"	f	file:
sqlite3Fts5ExprNext	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprNext(Fts5Expr *p, i64 iLast){$/;"	f	file:
sqlite3Fts5ExprPhraseCollist	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprPhraseCollist($/;"	f	file:
sqlite3Fts5ExprPhraseCount	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprPhraseCount(Fts5Expr *pExpr){$/;"	f	file:
sqlite3Fts5ExprPhraseSize	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprPhraseSize(Fts5Expr *pExpr, int iPhrase){$/;"	f	file:
sqlite3Fts5ExprPopulatePoslists	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprPopulatePoslists($/;"	f	file:
sqlite3Fts5ExprPoslist	sqlite\sqlite3.c	/^static int sqlite3Fts5ExprPoslist(Fts5Expr *pExpr, int iPhrase, const u8 **pa){$/;"	f	file:
sqlite3Fts5ExprRowid	sqlite\sqlite3.c	/^static i64 sqlite3Fts5ExprRowid(Fts5Expr *p){$/;"	f	file:
sqlite3Fts5Get32	sqlite\sqlite3.c	/^static int sqlite3Fts5Get32(const u8 *aBuf){$/;"	f	file:
sqlite3Fts5GetTokenizer	sqlite\sqlite3.c	/^static int sqlite3Fts5GetTokenizer($/;"	f	file:
sqlite3Fts5GetVarint	sqlite\sqlite3.c	/^static u8 sqlite3Fts5GetVarint(const unsigned char *p, u64 *v){$/;"	f	file:
sqlite3Fts5GetVarint32	sqlite\sqlite3.c	/^static int sqlite3Fts5GetVarint32(const unsigned char *p, u32 *v){$/;"	f	file:
sqlite3Fts5GetVarintLen	sqlite\sqlite3.c	/^static int sqlite3Fts5GetVarintLen(u32 iVal){$/;"	f	file:
sqlite3Fts5HashClear	sqlite\sqlite3.c	/^static void sqlite3Fts5HashClear(Fts5Hash *pHash){$/;"	f	file:
sqlite3Fts5HashFree	sqlite\sqlite3.c	/^static void sqlite3Fts5HashFree(Fts5Hash *pHash){$/;"	f	file:
sqlite3Fts5HashNew	sqlite\sqlite3.c	/^static int sqlite3Fts5HashNew(Fts5Config *pConfig, Fts5Hash **ppNew, int *pnByte){$/;"	f	file:
sqlite3Fts5HashQuery	sqlite\sqlite3.c	/^static int sqlite3Fts5HashQuery($/;"	f	file:
sqlite3Fts5HashScanEntry	sqlite\sqlite3.c	/^static void sqlite3Fts5HashScanEntry($/;"	f	file:
sqlite3Fts5HashScanEof	sqlite\sqlite3.c	/^static int sqlite3Fts5HashScanEof(Fts5Hash *p){$/;"	f	file:
sqlite3Fts5HashScanInit	sqlite\sqlite3.c	/^static int sqlite3Fts5HashScanInit($/;"	f	file:
sqlite3Fts5HashScanNext	sqlite\sqlite3.c	/^static void sqlite3Fts5HashScanNext(Fts5Hash *p){$/;"	f	file:
sqlite3Fts5HashWrite	sqlite\sqlite3.c	/^static int sqlite3Fts5HashWrite($/;"	f	file:
sqlite3Fts5IndexBeginWrite	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexBeginWrite(Fts5Index *p, int bDelete, i64 iRowid){$/;"	f	file:
sqlite3Fts5IndexCharlenToBytelen	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexCharlenToBytelen($/;"	f	file:
sqlite3Fts5IndexClose	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexClose(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexEntryCksum	sqlite\sqlite3.c	/^static u64 sqlite3Fts5IndexEntryCksum($/;"	f	file:
sqlite3Fts5IndexFromCsrid	sqlite\sqlite3.c	/^static Fts5Index *sqlite3Fts5IndexFromCsrid($/;"	f	file:
sqlite3Fts5IndexGetAverages	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexGetAverages(Fts5Index *p, i64 *pnRow, i64 *anSize){$/;"	f	file:
sqlite3Fts5IndexInit	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexInit(sqlite3 *db){$/;"	f	file:
sqlite3Fts5IndexIntegrityCheck	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexIntegrityCheck(Fts5Index *p, u64 cksum){$/;"	f	file:
sqlite3Fts5IndexLoadConfig	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexLoadConfig(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexMerge	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexMerge(Fts5Index *p, int nMerge){$/;"	f	file:
sqlite3Fts5IndexOpen	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexOpen($/;"	f	file:
sqlite3Fts5IndexOptimize	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexOptimize(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexQuery	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexQuery($/;"	f	file:
sqlite3Fts5IndexReads	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexReads(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexReinit	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexReinit(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexReset	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexReset(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexRollback	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexRollback(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexSetAverages	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexSetAverages(Fts5Index *p, const u8 *pData, int nData){$/;"	f	file:
sqlite3Fts5IndexSetCookie	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexSetCookie(Fts5Index *p, int iNew){$/;"	f	file:
sqlite3Fts5IndexSync	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexSync(Fts5Index *p){$/;"	f	file:
sqlite3Fts5IndexWrite	sqlite\sqlite3.c	/^static int sqlite3Fts5IndexWrite($/;"	f	file:
sqlite3Fts5Init	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts5Init(sqlite3 *db){$/;"	f
sqlite3Fts5IsBareword	sqlite\sqlite3.c	/^static int sqlite3Fts5IsBareword(char t){$/;"	f	file:
sqlite3Fts5IterClose	sqlite\sqlite3.c	/^static void sqlite3Fts5IterClose(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterEof	sqlite\sqlite3.c	189209;"	d	file:
sqlite3Fts5IterNext	sqlite\sqlite3.c	/^static int sqlite3Fts5IterNext(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterNextFrom	sqlite\sqlite3.c	/^static int sqlite3Fts5IterNextFrom(Fts5IndexIter *pIndexIter, i64 iMatch){$/;"	f	file:
sqlite3Fts5IterNextScan	sqlite\sqlite3.c	/^static int sqlite3Fts5IterNextScan(Fts5IndexIter *pIndexIter){$/;"	f	file:
sqlite3Fts5IterTerm	sqlite\sqlite3.c	/^static const char *sqlite3Fts5IterTerm(Fts5IndexIter *pIndexIter, int *pn){$/;"	f	file:
sqlite3Fts5MallocZero	sqlite\sqlite3.c	/^static void *sqlite3Fts5MallocZero(int *pRc, int nByte){$/;"	f	file:
sqlite3Fts5Mprintf	sqlite\sqlite3.c	/^static char *sqlite3Fts5Mprintf(int *pRc, const char *zFmt, ...){$/;"	f	file:
sqlite3Fts5ParseColset	sqlite\sqlite3.c	/^static Fts5Colset *sqlite3Fts5ParseColset($/;"	f	file:
sqlite3Fts5ParseColsetInvert	sqlite\sqlite3.c	/^static Fts5Colset *sqlite3Fts5ParseColsetInvert(Fts5Parse *pParse, Fts5Colset *p){$/;"	f	file:
sqlite3Fts5ParseError	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseError(Fts5Parse *pParse, const char *zFmt, ...){$/;"	f	file:
sqlite3Fts5ParseFinished	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseFinished(Fts5Parse *pParse, Fts5ExprNode *p){$/;"	f	file:
sqlite3Fts5ParseImplicitAnd	sqlite\sqlite3.c	/^static Fts5ExprNode *sqlite3Fts5ParseImplicitAnd($/;"	f	file:
sqlite3Fts5ParseNear	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseNear(Fts5Parse *pParse, Fts5Token *pTok){$/;"	f	file:
sqlite3Fts5ParseNearset	sqlite\sqlite3.c	/^static Fts5ExprNearset *sqlite3Fts5ParseNearset($/;"	f	file:
sqlite3Fts5ParseNearsetFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseNearsetFree(Fts5ExprNearset *pNear){$/;"	f	file:
sqlite3Fts5ParseNode	sqlite\sqlite3.c	/^static Fts5ExprNode *sqlite3Fts5ParseNode($/;"	f	file:
sqlite3Fts5ParseNodeFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseNodeFree(Fts5ExprNode *p){$/;"	f	file:
sqlite3Fts5ParsePhraseFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ParsePhraseFree(Fts5ExprPhrase *pPhrase){$/;"	f	file:
sqlite3Fts5ParseSetCaret	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseSetCaret(Fts5ExprPhrase *pPhrase){$/;"	f	file:
sqlite3Fts5ParseSetColset	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseSetColset($/;"	f	file:
sqlite3Fts5ParseSetDistance	sqlite\sqlite3.c	/^static void sqlite3Fts5ParseSetDistance($/;"	f	file:
sqlite3Fts5ParseTerm	sqlite\sqlite3.c	/^static Fts5ExprPhrase *sqlite3Fts5ParseTerm($/;"	f	file:
sqlite3Fts5Parser	sqlite\sqlite3.c	/^static void sqlite3Fts5Parser($/;"	f	file:
sqlite3Fts5ParserARG_FETCH	sqlite\sqlite3.c	189808;"	d	file:
sqlite3Fts5ParserARG_PDECL	sqlite\sqlite3.c	189807;"	d	file:
sqlite3Fts5ParserARG_SDECL	sqlite\sqlite3.c	189806;"	d	file:
sqlite3Fts5ParserARG_STORE	sqlite\sqlite3.c	189809;"	d	file:
sqlite3Fts5ParserAlloc	sqlite\sqlite3.c	/^static void *sqlite3Fts5ParserAlloc(void *(*mallocProc)(fts5YYMALLOCARGTYPE)){$/;"	f	file:
sqlite3Fts5ParserCoverage	sqlite\sqlite3.c	/^static int sqlite3Fts5ParserCoverage(FILE *out){$/;"	f	file:
sqlite3Fts5ParserFTS5TOKENTYPE	sqlite\sqlite3.c	189793;"	d	file:
sqlite3Fts5ParserFinalize	sqlite\sqlite3.c	/^static void sqlite3Fts5ParserFinalize(void *p){$/;"	f	file:
sqlite3Fts5ParserFree	sqlite\sqlite3.c	/^static void sqlite3Fts5ParserFree($/;"	f	file:
sqlite3Fts5ParserInit	sqlite\sqlite3.c	/^static void sqlite3Fts5ParserInit(void *fts5yypParser){$/;"	f	file:
sqlite3Fts5ParserStackPeak	sqlite\sqlite3.c	/^static int sqlite3Fts5ParserStackPeak(void *p){$/;"	f	file:
sqlite3Fts5ParserTrace	sqlite\sqlite3.c	/^static void sqlite3Fts5ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f	file:
sqlite3Fts5PoslistNext64	sqlite\sqlite3.c	/^static int sqlite3Fts5PoslistNext64($/;"	f	file:
sqlite3Fts5PoslistReaderInit	sqlite\sqlite3.c	/^static int sqlite3Fts5PoslistReaderInit($/;"	f	file:
sqlite3Fts5PoslistReaderNext	sqlite\sqlite3.c	/^static int sqlite3Fts5PoslistReaderNext(Fts5PoslistReader *pIter){$/;"	f	file:
sqlite3Fts5PoslistSafeAppend	sqlite\sqlite3.c	/^static void sqlite3Fts5PoslistSafeAppend($/;"	f	file:
sqlite3Fts5PoslistWriterAppend	sqlite\sqlite3.c	/^static int sqlite3Fts5PoslistWriterAppend($/;"	f	file:
sqlite3Fts5Put32	sqlite\sqlite3.c	/^static void sqlite3Fts5Put32(u8 *aBuf, int iVal){$/;"	f	file:
sqlite3Fts5PutVarint	sqlite\sqlite3.c	/^static int sqlite3Fts5PutVarint(unsigned char *p, u64 v){$/;"	f	file:
sqlite3Fts5StorageClose	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageClose(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageConfigValue	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageConfigValue($/;"	f	file:
sqlite3Fts5StorageContentInsert	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageContentInsert($/;"	f	file:
sqlite3Fts5StorageDelete	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageDelete(Fts5Storage *p, i64 iDel, sqlite3_value **apVal){$/;"	f	file:
sqlite3Fts5StorageDeleteAll	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageDeleteAll(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageDocsize	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageDocsize(Fts5Storage *p, i64 iRowid, int *aCol){$/;"	f	file:
sqlite3Fts5StorageIndexInsert	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageIndexInsert($/;"	f	file:
sqlite3Fts5StorageIntegrity	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageIntegrity(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageMerge	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageMerge(Fts5Storage *p, int nMerge){$/;"	f	file:
sqlite3Fts5StorageOpen	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageOpen($/;"	f	file:
sqlite3Fts5StorageOptimize	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageOptimize(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRebuild	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageRebuild(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRename	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageRename(Fts5Storage *pStorage, const char *zName){$/;"	f	file:
sqlite3Fts5StorageReset	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageReset(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRollback	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageRollback(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5StorageRowCount	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageRowCount(Fts5Storage *p, i64 *pnRow){$/;"	f	file:
sqlite3Fts5StorageSize	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageSize(Fts5Storage *p, int iCol, i64 *pnToken){$/;"	f	file:
sqlite3Fts5StorageStmt	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageStmt($/;"	f	file:
sqlite3Fts5StorageStmtRelease	sqlite\sqlite3.c	/^static void sqlite3Fts5StorageStmtRelease($/;"	f	file:
sqlite3Fts5StorageSync	sqlite\sqlite3.c	/^static int sqlite3Fts5StorageSync(Fts5Storage *p){$/;"	f	file:
sqlite3Fts5Strndup	sqlite\sqlite3.c	/^static char *sqlite3Fts5Strndup(int *pRc, const char *pIn, int nIn){$/;"	f	file:
sqlite3Fts5TermsetAdd	sqlite\sqlite3.c	/^static int sqlite3Fts5TermsetAdd($/;"	f	file:
sqlite3Fts5TermsetFree	sqlite\sqlite3.c	/^static void sqlite3Fts5TermsetFree(Fts5Termset *p){$/;"	f	file:
sqlite3Fts5TermsetNew	sqlite\sqlite3.c	/^static int sqlite3Fts5TermsetNew(Fts5Termset **pp){$/;"	f	file:
sqlite3Fts5Tokenize	sqlite\sqlite3.c	/^static int sqlite3Fts5Tokenize($/;"	f	file:
sqlite3Fts5TokenizerInit	sqlite\sqlite3.c	/^static int sqlite3Fts5TokenizerInit(fts5_api *pApi){$/;"	f	file:
sqlite3Fts5UnicodeFold	sqlite\sqlite3.c	/^static int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic){$/;"	f	file:
sqlite3Fts5UnicodeIsalnum	sqlite\sqlite3.c	/^static int sqlite3Fts5UnicodeIsalnum(int c){$/;"	f	file:
sqlite3Fts5UnicodeIsdiacritic	sqlite\sqlite3.c	/^static int sqlite3Fts5UnicodeIsdiacritic(int c){$/;"	f	file:
sqlite3Fts5VocabInit	sqlite\sqlite3.c	/^static int sqlite3Fts5VocabInit(Fts5Global *pGlobal, sqlite3 *db){$/;"	f	file:
sqlite3FtsUnicodeFold	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FunctionUsesThisSrc	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	sqlite\sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	sqlite\sqlite3.c	18443;"	d	file:
sqlite3GetVarint	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	sqlite\sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	sqlite\sqlite3.c	13550;"	d	file:
sqlite3GlobalConfig	sqlite\sqlite3.c	13556;"	d	file:
sqlite3HaltConstraint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeaderSizeBtree	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }$/;"	f
sqlite3HeaderSizePcache	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }$/;"	f
sqlite3HeaderSizePcache1	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }$/;"	f
sqlite3HeapNearlyFull	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	sqlite\sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	sqlite\sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	sqlite\sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	sqlite\sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	sqlite\sqlite3.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3IndexColumnAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3IndexColumnAffinity(sqlite3 *db, Index *pIdx, int iCol){$/;"	f
sqlite3IndexedByLookup	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	sqlite\sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	sqlite\sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3InsertBuiltinFuncs	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3InsertBuiltinFuncs($/;"	f
sqlite3IntFloatCompare	sqlite\sqlite3.c	/^static int sqlite3IntFloatCompare(i64 i, double r){$/;"	f	file:
sqlite3IntTokens	sqlite\sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	sqlite\sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p, sqlite3_file *pFile){$/;"	f
sqlite3IoTrace	sqlite\sqlite3.c	/^SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IoTrace	sqlite\sqlite3.c	/^SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoerrnomemError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IoerrnomemError(int lineno){$/;"	f
sqlite3IsEbcdicIdChar	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsNaN	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	sqlite\sqlite3.c	17842;"	d	file:
sqlite3IsNumericAffinity	sqlite\sqlite3.c	16048;"	d	file:
sqlite3IsReadOnly	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3IsToplevel	sqlite\sqlite3.c	18169;"	d	file:
sqlite3IsToplevel	sqlite\sqlite3.c	18179;"	d	file:
sqlite3Isalnum	sqlite\sqlite3.c	17727;"	d	file:
sqlite3Isalnum	sqlite\sqlite3.c	17736;"	d	file:
sqlite3Isalpha	sqlite\sqlite3.c	17728;"	d	file:
sqlite3Isalpha	sqlite\sqlite3.c	17737;"	d	file:
sqlite3Isdigit	sqlite\sqlite3.c	17729;"	d	file:
sqlite3Isdigit	sqlite\sqlite3.c	17738;"	d	file:
sqlite3Isquote	sqlite\sqlite3.c	17732;"	d	file:
sqlite3Isquote	sqlite\sqlite3.c	17741;"	d	file:
sqlite3Isspace	sqlite\sqlite3.c	17726;"	d	file:
sqlite3Isspace	sqlite\sqlite3.c	17735;"	d	file:
sqlite3Isxdigit	sqlite\sqlite3.c	17730;"	d	file:
sqlite3Isxdigit	sqlite\sqlite3.c	17739;"	d	file:
sqlite3JoinType	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *pJfd){$/;"	f
sqlite3JournalIsInMemory	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalIsInMemory(sqlite3_file *p){$/;"	f
sqlite3JournalModename	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3Json1Init	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){$/;"	f
sqlite3KeyInfoAlloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	sqlite\sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3KeywordCode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LeaveMutexAndCloseZombie	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	sqlite\sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	sqlite\sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	sqlite\sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	sqlite\sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3LookasideUsed	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3LookasideUsed(sqlite3 *db, int *pHighwater){$/;"	f
sqlite3MPrintf	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	sqlite\sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocMutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){$/;"	f
sqlite3MallocSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	sqlite\sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	sqlite\sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	sqlite\sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	sqlite\sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	sqlite\sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemMalloc	sqlite\sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	sqlite\sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	sqlite\sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	sqlite\sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	sqlite\sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	sqlite\sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	sqlite\sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	sqlite\sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	sqlite\sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	sqlite\sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	sqlite\sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdbInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdbInit(void){$/;"	f
sqlite3MemdebugBacktrace	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	sqlite\sqlite3.c	18653;"	d	file:
sqlite3MemdebugMallocCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	sqlite\sqlite3.c	18654;"	d	file:
sqlite3MemdebugSetType	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	sqlite\sqlite3.c	18652;"	d	file:
sqlite3MemdebugSettitle	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryBarrier	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemoryBarrier(void){$/;"	f
sqlite3MemoryBarrier	sqlite\sqlite3.c	17820;"	d	file:
sqlite3Memsys3Dump	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	sqlite\sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MisuseError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	sqlite\sqlite3.c	15354;"	d	file:
sqlite3MutexEnd	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	sqlite\sqlite3.c	15356;"	d	file:
sqlite3MutexInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	sqlite\sqlite3.c	15355;"	d	file:
sqlite3MutexWarnOnContention	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3MutexWarnOnContention(sqlite3_mutex *p){$/;"	f
sqlite3MutexWarnOnContention	sqlite\sqlite3.c	17836;"	d	file:
sqlite3NProfileCnt	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_uint64 sqlite3NProfileCnt = 0;$/;"	v
sqlite3NProfileCnt	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_uint64 sqlite3NProfileCnt;$/;"	v
sqlite3NameFromToken	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoTempsInRange	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3NoTempsInRange(Parse *pParse, int iFirst, int iLast){$/;"	f
sqlite3NomemError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3NomemError(int lineno){$/;"	f
sqlite3NoopDestructor	sqlite\sqlite3.c	/^static void sqlite3NoopDestructor(void *p){ UNUSED_PARAMETER(p); }$/;"	f	file:
sqlite3NoopMutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3NotPureFunc	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3NotPureFunc(sqlite3_context *pCtx){$/;"	f
sqlite3OSTrace	sqlite\sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OomClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OomClear(sqlite3 *db){$/;"	f
sqlite3OomFault	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){$/;"	f
sqlite3OpcodeName	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	sqlite\sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsGetLastError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsGetLastError(sqlite3_vfs *pVfs){$/;"	f
sqlite3OsInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCachePercentDirty	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PCachePercentDirty(PCache *pCache){$/;"	f
sqlite3PCacheSetDefault	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PExprAddSelect	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PExprAddSelect(Parse *pParse, Expr *pExpr, Select *pSelect){$/;"	f
sqlite3PageFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAlignReserve	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerAlignReserve(Pager *pDest, Pager *pSrc){$/;"	f
sqlite3PagerBackupPtr	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint($/;"	f
sqlite3PagerClearCache	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager, sqlite3 *db){$/;"	f
sqlite3PagerCloseWal	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager, sqlite3 *db){$/;"	f
sqlite3PagerCodec	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDataVersion	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerFlush	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerFlush(Pager *pPager){$/;"	f
sqlite3PagerGet	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGet($/;"	f
sqlite3PagerGetCodec	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerJrnlFile	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerJrnlFile(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	sqlite\sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerOkToChangeJournalMode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	sqlite\sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRekey	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){$/;"	f
sqlite3PagerResetLockTimeout	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerResetLockTimeout(Pager *pPager){$/;"	f
sqlite3PagerResetLockTimeout	sqlite\sqlite3.c	14789;"	d	file:
sqlite3PagerRollback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyHandler	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyHandler($/;"	f
sqlite3PagerSetCachesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSetSpillsize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetSpillsize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSharedLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerSnapshotGet	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3PagerSnapshotOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3PagerSnapshotRecover	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSnapshotRecover(Pager *pPager){$/;"	f
sqlite3PagerState	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	sqlite\sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerUnrefPageOne	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefPageOne(DbPage *pPg){$/;"	f
sqlite3PagerUseWal	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerUseWal(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerUseWal	sqlite\sqlite3.c	14762;"	d	file:
sqlite3PagerVfs	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	sqlite\sqlite3.c	18168;"	d	file:
sqlite3ParseToplevel	sqlite\sqlite3.c	18178;"	d	file:
sqlite3ParseUri	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	sqlite\sqlite3.c	140033;"	d	file:
sqlite3ParserARG_PDECL	sqlite\sqlite3.c	140032;"	d	file:
sqlite3ParserARG_SDECL	sqlite\sqlite3.c	140031;"	d	file:
sqlite3ParserARG_STORE	sqlite\sqlite3.c	140034;"	d	file:
sqlite3ParserAlloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(YYMALLOCARGTYPE)){$/;"	f
sqlite3ParserCoverage	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserCoverage(FILE *out){$/;"	f
sqlite3ParserFinalize	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFinalize(void *p){$/;"	f
sqlite3ParserFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserInit(void *yypParser){$/;"	f
sqlite3ParserReset	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3ParserStackPeak	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	sqlite\sqlite3.c	140012;"	d	file:
sqlite3ParserTrace	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3Parser_ENGINEALWAYSONSTACK	sqlite\sqlite3.c	139837;"	d	file:
sqlite3Pcache1Mutex	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){$/;"	f
sqlite3PcacheCleanAll	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClearWritable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearWritable(PCache *pCache){$/;"	f
sqlite3PcacheClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	sqlite\sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	sqlite\sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheMxDump	sqlite\sqlite3.c	/^  int sqlite3PcacheMxDump = 9999;   \/* Max cache entries for pcacheDump() *\/$/;"	v
sqlite3PcacheOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePageSanity	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageSanity(PgHdr *pPg){$/;"	f
sqlite3PcachePagecount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	sqlite\sqlite3.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheSetSpillsize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetSpillsize(PCache *p, int mxPage){$/;"	f
sqlite3PcacheShrink	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTrace	sqlite\sqlite3.c	/^  int sqlite3PcacheTrace = 2;       \/* 0: off  1: simple  2: cache dumps *\/$/;"	v
sqlite3PcacheTruncate	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pow10	sqlite\sqlite3.c	/^static LONGDOUBLE_TYPE sqlite3Pow10(int E){$/;"	f	file:
sqlite3Pragma	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3PragmaVtabRegister	sqlite\sqlite3.c	/^SQLITE_PRIVATE Module *sqlite3PragmaVtabRegister(sqlite3 *db, const char *zName){$/;"	f
sqlite3Prepare	sqlite\sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	sqlite\sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	sqlite\sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3RealSameAsInt	sqlite\sqlite3.c	/^static int sqlite3RealSameAsInt(double r1, sqlite3_int64 i){$/;"	f	file:
sqlite3Realloc	sqlite\sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	sqlite\sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(void){$/;"	f
sqlite3RegisterDateTimeFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3RegisterPerConnectionBuiltinFunctions	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterPerConnectionBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3Reindex	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3ReportError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReportError(int iErr, int lineno, const char *zType){$/;"	f
sqlite3Reprepare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprListNames	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprListNames( $/;"	f
sqlite3ResolveExprNames	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RootPageMoved	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f
sqlite3RtreeInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){$/;"	f
sqlite3SafetyCheckOk	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	sqlite\sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	sqlite\sqlite3.c	14013;"	d	file:
sqlite3SchemaToIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3SectorSize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddColumnTypeAndCollation	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectAddColumnTypeAndCollation($/;"	f
sqlite3SelectAddTypeInfo	sqlite\sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *pDup, int flags){$/;"	f
sqlite3SelectExpand	sqlite\sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	sqlite\sqlite3.c	18581;"	d	file:
sqlite3SelectNew	sqlite\sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectSetName	sqlite\sqlite3.c	18129;"	d	file:
sqlite3SelectTrace	sqlite\sqlite3.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SelectWalkAssert2	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectWalkAssert2(Walker *NotUsed, Select *NotUsed2){$/;"	f
sqlite3SelectWalkFail	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectWalkFail(Walker *pWalker, Select *NotUsed){$/;"	f
sqlite3SelectWalkNoop	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectWalkNoop(Walker *NotUsed, Select *NotUsed2){$/;"	f
sqlite3SelectWrongNumTermsError	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p){$/;"	f
sqlite3SetHasNullFlag	sqlite\sqlite3.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetMakeRecordP5	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetMakeRecordP5(Vdbe *v, Table *pTab){$/;"	f
sqlite3SetMakeRecordP5	sqlite\sqlite3.c	18111;"	d	file:
sqlite3SetString	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zNew){$/;"	f
sqlite3SharedCacheList	sqlite\sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	sqlite\sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	sqlite\sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SmallTypeSizes	sqlite\sqlite3.c	/^static const u8 sqlite3SmallTypeSizes[] = {$/;"	v	file:
sqlite3SrcListAppend	sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	sqlite\sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListFuncArgs	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListFuncArgs(Parse *pParse, SrcList *p, ExprList *pList){$/;"	f
sqlite3SrcListIndexedBy	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	sqlite\sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	sqlite\sqlite3.c	17789;"	d	file:
sqlite3StackAllocRaw	sqlite\sqlite3.c	17793;"	d	file:
sqlite3StackAllocZero	sqlite\sqlite3.c	17790;"	d	file:
sqlite3StackAllocZero	sqlite\sqlite3.c	17794;"	d	file:
sqlite3StackFree	sqlite\sqlite3.c	17791;"	d	file:
sqlite3StackFree	sqlite\sqlite3.c	17795;"	d	file:
sqlite3StartTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	sqlite\sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	sqlite\sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	sqlite\sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatValueType	sqlite\sqlite3.c	/^typedef sqlite3_int64 sqlite3StatValueType;$/;"	t	file:
sqlite3StatValueType	sqlite\sqlite3.c	/^typedef u32 sqlite3StatValueType;$/;"	t	file:
sqlite3StatusDown	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){$/;"	f
sqlite3StatusHighwater	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusHighwater(int op, int X){$/;"	f
sqlite3StatusUp	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){$/;"	f
sqlite3StatusValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){$/;"	f
sqlite3Step	sqlite\sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StmtVtabInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3StmtVtabInit(sqlite3 *db){$/;"	f
sqlite3StrAccumAppend	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	sqlite\sqlite3.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrBINARY	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[] = "BINARY";$/;"	v
sqlite3StrBINARY	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char sqlite3StrBINARY[];$/;"	v
sqlite3StrICmp	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3StrNICmp	sqlite\sqlite3.c	17753;"	d	file:
sqlite3StringToId	sqlite\sqlite3.c	/^static void sqlite3StringToId(Expr *p){$/;"	f	file:
sqlite3Strlen30	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3SubselectError	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SubselectError(Parse *pParse, int nActual, int nExpect){$/;"	f
sqlite3SystemError	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3SystemError(sqlite3 *db, int rc){$/;"	f
sqlite3TableAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableColumnAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE char sqlite3TableColumnAffinity(Table *pTab, int iCol){$/;"	f
sqlite3TableLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	sqlite\sqlite3.c	18426;"	d	file:
sqlite3TempInMemory	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3ThreadCreate	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	sqlite\sqlite3.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3TokenInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TokenInit(Token *p, char *z){$/;"	f
sqlite3Tolower	sqlite\sqlite3.c	17731;"	d	file:
sqlite3Tolower	sqlite\sqlite3.c	17740;"	d	file:
sqlite3Toupper	sqlite\sqlite3.c	17725;"	d	file:
sqlite3Toupper	sqlite\sqlite3.c	17734;"	d	file:
sqlite3TransferBindings	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TreeViewBareExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewBareExprList($/;"	f
sqlite3TreeViewExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f
sqlite3TreeViewExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewExprList($/;"	f
sqlite3TreeViewItem	sqlite\sqlite3.c	/^static void sqlite3TreeViewItem(TreeView *p, const char *zLabel,u8 moreFollows){$/;"	f	file:
sqlite3TreeViewLine	sqlite\sqlite3.c	/^static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f	file:
sqlite3TreeViewPop	sqlite\sqlite3.c	/^static void sqlite3TreeViewPop(TreeView *p){$/;"	f	file:
sqlite3TreeViewPush	sqlite\sqlite3.c	/^static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f	file:
sqlite3TreeViewSelect	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f
sqlite3TreeViewWith	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3TreeViewWith(TreeView *pView, const With *pWith, u8 moreToFollow){$/;"	f
sqlite3TriggerColmask	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	sqlite\sqlite3.c	18180;"	d	file:
sqlite3TriggerDeleteStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	sqlite\sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	sqlite\sqlite3.c	18177;"	d	file:
sqlite3TriggerSelectStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep($/;"	f
sqlite3TriggerUpdateStep	sqlite\sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	sqlite\sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	sqlite\sqlite3.c	18171;"	d	file:
sqlite3TwoPartName	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite\sqlite3.c	18174;"	d	file:
sqlite3Update	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	sqlite\sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthTable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	sqlite\sqlite3.c	109671;"	d	file:
sqlite3Utf8To8	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	sqlite\sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VListAdd	sqlite\sqlite3.c	/^SQLITE_PRIVATE VList *sqlite3VListAdd($/;"	f
sqlite3VListNameToNum	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VListNameToNum(VList *pIn, const char *zName, int nName){$/;"	f
sqlite3VListNumToName	sqlite\sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3VListNumToName(VList *pIn, int iVal){$/;"	f
sqlite3VMPrintf	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse, Token *pNm){$/;"	f
sqlite3ValueApplyAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	sqlite\sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Dup8	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Dup8($/;"	f
sqlite3VdbeAddOp4Int	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	sqlite\sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeAddOpList($/;"	f
sqlite3VdbeAddParseSchemaOp	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	sqlite\sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAppendP4	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAppendP4(Vdbe *p, void *pP4, int n){$/;"	f
sqlite3VdbeAssertMayAbort	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeBooleanValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){$/;"	f
sqlite3VdbeChangeEncoding	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeOpcode	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){$/;"	f
sqlite3VdbeChangeP1	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u16 p5){$/;"	f
sqlite3VdbeChangeToNoop	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	sqlite\sqlite3.c	19549;"	d	file:
sqlite3VdbeCheckMemInvariants	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	sqlite\sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, int *piCol){$/;"	f
sqlite3VdbeCursorRestore	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(sqlite3 *db, AuxData **pp, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEndCoroutine	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEndCoroutine(Vdbe *v, int regYield){$/;"	f
sqlite3VdbeEnter	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	sqlite\sqlite3.c	19532;"	d	file:
sqlite3VdbeError	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeError(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeExec	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	sqlite\sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	sqlite\sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeGoto	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeGoto(Vdbe *p, int iDest){$/;"	f
sqlite3VdbeHalt	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite\sqlite3.c	18616;"	d	file:
sqlite3VdbeIdxKeyCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	sqlite\sqlite3.c	19538;"	d	file:
sqlite3VdbeLinkSubProgram	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeLoadString	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeLoadString(Vdbe *p, int iDest, const char *zStr){$/;"	f
sqlite3VdbeMakeLabel	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemConsistentDualRep	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemConsistentDualRep(Mem *p){$/;"	f
sqlite3VdbeMemCopy	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite\sqlite3.c	19565;"	d	file:
sqlite3VdbeMemFinalize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	sqlite\sqlite3.c	19487;"	d	file:
sqlite3VdbeMemSetInt64	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetPointer	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetPointer($/;"	f
sqlite3VdbeMemSetRowSet	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	sqlite\sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeMultiLoad	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMultiLoad(Vdbe *p, int iDest, const char *zTypes, ...){$/;"	f
sqlite3VdbeNoopComment	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeOneByteSerialTypeLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3VdbeOneByteSerialTypeLen(u8 serial_type){$/;"	f
sqlite3VdbeParameterIndex	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePreUpdateHook	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePreUpdateHook($/;"	f
sqlite3VdbePrepareFlags	sqlite\sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3VdbePrepareFlags(Vdbe *v){$/;"	f
sqlite3VdbePrintOp	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	sqlite\sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordCompareWithSkip	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip($/;"	f
sqlite3VdbeRecordUnpack	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeReusable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeReusable(Vdbe *p){$/;"	f
sqlite3VdbeRewind	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeScanStatus	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeScanStatus($/;"	f
sqlite3VdbeScanStatus	sqlite\sqlite3.c	14563;"	d	file:
sqlite3VdbeSerialGet	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){$/;"	f
sqlite3VdbeSerialTypeLen	sqlite\sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, u8 prepFlags){$/;"	f
sqlite3VdbeSetVarmask	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterReset	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	sqlite\sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3VdbeVerifyNoMallocRequired	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeVerifyNoMallocRequired(Vdbe *p, int N){$/;"	f
sqlite3VdbeVerifyNoMallocRequired	sqlite\sqlite3.c	14438;"	d	file:
sqlite3VdbeVerifyNoResultRow	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeVerifyNoResultRow(Vdbe *p){$/;"	f
sqlite3VdbeVerifyNoResultRow	sqlite\sqlite3.c	14439;"	d	file:
sqlite3VectorErrorMsg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VectorErrorMsg(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3VectorFieldSubexpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3VectorFieldSubexpr(Expr *pVector, int i){$/;"	f
sqlite3ViewGetColumnNames	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	sqlite\sqlite3.c	17968;"	d	file:
sqlite3VtabArgExtend	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	sqlite\sqlite3.c	18434;"	d	file:
sqlite3VtabCommit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	sqlite\sqlite3.c	18437;"	d	file:
sqlite3VtabCreateModule	sqlite\sqlite3.c	/^SQLITE_PRIVATE Module *sqlite3VtabCreateModule($/;"	f
sqlite3VtabDisconnect	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabEponymousTableClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabEponymousTableClear(sqlite3 *db, Module *pMod){$/;"	f
sqlite3VtabEponymousTableInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabEponymousTableInit(Parse *pParse, Module *pMod){$/;"	f
sqlite3VtabFinishParse	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	sqlite\sqlite3.c	18438;"	d	file:
sqlite3VtabInSync	sqlite\sqlite3.c	18463;"	d	file:
sqlite3VtabLock	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	sqlite\sqlite3.c	18439;"	d	file:
sqlite3VtabMakeWritable	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	sqlite\sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	sqlite\sqlite3.c	18436;"	d	file:
sqlite3VtabSavepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	sqlite\sqlite3.c	18442;"	d	file:
sqlite3VtabSync	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabSync	sqlite\sqlite3.c	18435;"	d	file:
sqlite3VtabUnlock	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	sqlite\sqlite3.c	18440;"	d	file:
sqlite3VtabUnlockList	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	sqlite\sqlite3.c	18441;"	d	file:
sqlite3WalBeginReadTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	sqlite\sqlite3.c	49022;"	d	file:
sqlite3WalBeginWriteTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	sqlite\sqlite3.c	49025;"	d	file:
sqlite3WalCallback	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	sqlite\sqlite3.c	49032;"	d	file:
sqlite3WalCheckpoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	sqlite\sqlite3.c	49031;"	d	file:
sqlite3WalClose	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	sqlite\sqlite3.c	49021;"	d	file:
sqlite3WalDbsize	sqlite\sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	sqlite\sqlite3.c	49024;"	d	file:
sqlite3WalDefaultHook	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	sqlite\sqlite3.c	49023;"	d	file:
sqlite3WalEndWriteTransaction	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	sqlite\sqlite3.c	49026;"	d	file:
sqlite3WalExclusiveMode	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	sqlite\sqlite3.c	49033;"	d	file:
sqlite3WalFile	sqlite\sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3WalFile(Wal *pWal){$/;"	f
sqlite3WalFile	sqlite\sqlite3.c	49037;"	d	file:
sqlite3WalFindFrame	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f
sqlite3WalFindFrame	sqlite\sqlite3.c	49036;"	d	file:
sqlite3WalFrames	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	sqlite\sqlite3.c	49030;"	d	file:
sqlite3WalFramesize	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	sqlite\sqlite3.c	49035;"	d	file:
sqlite3WalHeapMemory	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	sqlite\sqlite3.c	49034;"	d	file:
sqlite3WalLimit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	sqlite\sqlite3.c	49020;"	d	file:
sqlite3WalOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	sqlite\sqlite3.c	49019;"	d	file:
sqlite3WalReadFrame	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	sqlite\sqlite3.c	49028;"	d	file:
sqlite3WalSavepointUndo	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	sqlite\sqlite3.c	49029;"	d	file:
sqlite3WalSnapshotGet	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSnapshotGet(Wal *pWal, sqlite3_snapshot **ppSnapshot){$/;"	f
sqlite3WalSnapshotOpen	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSnapshotOpen(Wal *pWal, sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3WalSnapshotRecover	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSnapshotRecover(Wal *pWal){$/;"	f
sqlite3WalTrace	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	sqlite\sqlite3.c	49027;"	d	file:
sqlite3WalkExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereAddScanStatus	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereAddScanStatus($/;"	f
sqlite3WhereAddScanStatus	sqlite\sqlite3.c	130749;"	d	file:
sqlite3WhereBegin	sqlite\sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereClauseClear	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClauseClear(WhereClause *pWC){$/;"	f
sqlite3WhereClauseInit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClauseInit($/;"	f
sqlite3WhereClausePrint	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereClausePrint(WhereClause *pWC){$/;"	f
sqlite3WhereCodeOneLoopStart	sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereCodeOneLoopStart($/;"	f
sqlite3WhereContinueLabel	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereExplainOneScan	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereExplainOneScan($/;"	f
sqlite3WhereExplainOneScan	sqlite\sqlite3.c	130739;"	d	file:
sqlite3WhereExprAnalyze	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereExprAnalyze($/;"	f
sqlite3WhereExprListUsage	sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereExprListUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f
sqlite3WhereExprUsage	sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f
sqlite3WhereFindTerm	sqlite\sqlite3.c	/^SQLITE_PRIVATE WhereTerm *sqlite3WhereFindTerm($/;"	f
sqlite3WhereGetMask	sqlite\sqlite3.c	/^SQLITE_PRIVATE Bitmask sqlite3WhereGetMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f
sqlite3WhereIsDistinct	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOrderedInnerLoop	sqlite\sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOrderedInnerLoop(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOutputRowCount	sqlite\sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereSplit	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f
sqlite3WhereTabFuncArgs	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereTabFuncArgs($/;"	f
sqlite3WhereTrace	sqlite\sqlite3.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3Win32Wait	sqlite\sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	sqlite\sqlite3.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithDelete	sqlite\sqlite3.c	18497;"	d	file:
sqlite3WithPush	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3WithPush	sqlite\sqlite3.c	18496;"	d	file:
sqlite3XPrintf	sqlite\sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	sqlite\sqlite3.c	115171;"	d	file:
sqlite3_aggregate_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	sqlite\sqlite3.c	115173;"	d	file:
sqlite3_api_routines	sqlite\sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	sqlite\sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_auto_extension($/;"	f
sqlite3_auto_extension	sqlite\sqlite3.c	115376;"	d	file:
sqlite3_backup	sqlite\sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	sqlite\sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	sqlite\sqlite3.c	115337;"	d	file:
sqlite3_backup_init	sqlite\sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	sqlite\sqlite3.c	115338;"	d	file:
sqlite3_backup_pagecount	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	sqlite\sqlite3.c	115339;"	d	file:
sqlite3_backup_remaining	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	sqlite\sqlite3.c	115340;"	d	file:
sqlite3_backup_step	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	sqlite\sqlite3.c	115341;"	d	file:
sqlite3_bind_blob	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	sqlite\sqlite3.c	115175;"	d	file:
sqlite3_bind_blob64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64($/;"	f
sqlite3_bind_blob64	sqlite\sqlite3.c	115377;"	d	file:
sqlite3_bind_double	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	sqlite\sqlite3.c	115176;"	d	file:
sqlite3_bind_int	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	sqlite\sqlite3.c	115177;"	d	file:
sqlite3_bind_int64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	sqlite\sqlite3.c	115178;"	d	file:
sqlite3_bind_null	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	sqlite\sqlite3.c	115179;"	d	file:
sqlite3_bind_parameter_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	sqlite\sqlite3.c	115180;"	d	file:
sqlite3_bind_parameter_index	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	sqlite\sqlite3.c	115181;"	d	file:
sqlite3_bind_parameter_name	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	sqlite\sqlite3.c	115182;"	d	file:
sqlite3_bind_pointer	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_pointer($/;"	f
sqlite3_bind_pointer	sqlite\sqlite3.c	115410;"	d	file:
sqlite3_bind_text	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	sqlite\sqlite3.c	115183;"	d	file:
sqlite3_bind_text16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	sqlite\sqlite3.c	115184;"	d	file:
sqlite3_bind_text16	sqlite\sqlite3.c	115460;"	d	file:
sqlite3_bind_text64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_text64( $/;"	f
sqlite3_bind_text64	sqlite\sqlite3.c	115378;"	d	file:
sqlite3_bind_value	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	sqlite\sqlite3.c	115185;"	d	file:
sqlite3_bind_zeroblob	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	sqlite\sqlite3.c	115302;"	d	file:
sqlite3_bind_zeroblob	sqlite\sqlite3.c	115522;"	d	file:
sqlite3_bind_zeroblob64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt *pStmt, int i, sqlite3_uint64 n){$/;"	f
sqlite3_bind_zeroblob64	sqlite\sqlite3.c	115392;"	d	file:
sqlite3_blob	sqlite\sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	sqlite\sqlite3.c	115303;"	d	file:
sqlite3_blob_bytes	sqlite\sqlite3.c	115523;"	d	file:
sqlite3_blob_close	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	sqlite\sqlite3.c	115304;"	d	file:
sqlite3_blob_close	sqlite\sqlite3.c	115524;"	d	file:
sqlite3_blob_open	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	sqlite\sqlite3.c	115305;"	d	file:
sqlite3_blob_open	sqlite\sqlite3.c	115525;"	d	file:
sqlite3_blob_read	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	sqlite\sqlite3.c	115306;"	d	file:
sqlite3_blob_read	sqlite\sqlite3.c	115526;"	d	file:
sqlite3_blob_reopen	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	sqlite\sqlite3.c	115358;"	d	file:
sqlite3_blob_reopen	sqlite\sqlite3.c	115528;"	d	file:
sqlite3_blob_write	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	sqlite\sqlite3.c	115307;"	d	file:
sqlite3_blob_write	sqlite\sqlite3.c	115527;"	d	file:
sqlite3_busy_handler	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	sqlite\sqlite3.c	115186;"	d	file:
sqlite3_busy_timeout	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	sqlite\sqlite3.c	115187;"	d	file:
sqlite3_callback	sqlite\sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_cancel_auto_extension	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension($/;"	f
sqlite3_cancel_auto_extension	sqlite\sqlite3.c	115379;"	d	file:
sqlite3_changegroup	sqlite\sqlite3.c	/^struct sqlite3_changegroup {$/;"	s	file:
sqlite3_changegroup	sqlite\sqlite3.c	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup	file:
sqlite3_changes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	sqlite\sqlite3.c	115188;"	d	file:
sqlite3_changeset_iter	sqlite\sqlite3.c	/^struct sqlite3_changeset_iter {$/;"	s	file:
sqlite3_changeset_iter	sqlite\sqlite3.c	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter	file:
sqlite3_clear_bindings	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	sqlite\sqlite3.c	115301;"	d	file:
sqlite3_close	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close	sqlite\sqlite3.c	115189;"	d	file:
sqlite3_close_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_close_v2	sqlite\sqlite3.c	115362;"	d	file:
sqlite3_collation_needed	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	sqlite\sqlite3.c	115190;"	d	file:
sqlite3_collation_needed16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	sqlite\sqlite3.c	115191;"	d	file:
sqlite3_collation_needed16	sqlite\sqlite3.c	115461;"	d	file:
sqlite3_column_blob	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	sqlite\sqlite3.c	115192;"	d	file:
sqlite3_column_bytes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	sqlite\sqlite3.c	115193;"	d	file:
sqlite3_column_bytes16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	sqlite\sqlite3.c	115194;"	d	file:
sqlite3_column_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	sqlite\sqlite3.c	115195;"	d	file:
sqlite3_column_database_name	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	sqlite\sqlite3.c	115196;"	d	file:
sqlite3_column_database_name	sqlite\sqlite3.c	115447;"	d	file:
sqlite3_column_database_name16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	sqlite\sqlite3.c	115197;"	d	file:
sqlite3_column_database_name16	sqlite\sqlite3.c	115448;"	d	file:
sqlite3_column_database_name16	sqlite\sqlite3.c	115480;"	d	file:
sqlite3_column_decltype	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	sqlite\sqlite3.c	115198;"	d	file:
sqlite3_column_decltype	sqlite\sqlite3.c	115492;"	d	file:
sqlite3_column_decltype16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	sqlite\sqlite3.c	115199;"	d	file:
sqlite3_column_decltype16	sqlite\sqlite3.c	115462;"	d	file:
sqlite3_column_decltype16	sqlite\sqlite3.c	115491;"	d	file:
sqlite3_column_double	sqlite\sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	sqlite\sqlite3.c	115200;"	d	file:
sqlite3_column_int	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	sqlite\sqlite3.c	115201;"	d	file:
sqlite3_column_int64	sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	sqlite\sqlite3.c	115202;"	d	file:
sqlite3_column_name	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	sqlite\sqlite3.c	115203;"	d	file:
sqlite3_column_name16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	sqlite\sqlite3.c	115204;"	d	file:
sqlite3_column_name16	sqlite\sqlite3.c	115463;"	d	file:
sqlite3_column_origin_name	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	sqlite\sqlite3.c	115205;"	d	file:
sqlite3_column_origin_name	sqlite\sqlite3.c	115451;"	d	file:
sqlite3_column_origin_name16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	sqlite\sqlite3.c	115206;"	d	file:
sqlite3_column_origin_name16	sqlite\sqlite3.c	115452;"	d	file:
sqlite3_column_origin_name16	sqlite\sqlite3.c	115482;"	d	file:
sqlite3_column_table_name	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	sqlite\sqlite3.c	115207;"	d	file:
sqlite3_column_table_name	sqlite\sqlite3.c	115449;"	d	file:
sqlite3_column_table_name16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	sqlite\sqlite3.c	115208;"	d	file:
sqlite3_column_table_name16	sqlite\sqlite3.c	115450;"	d	file:
sqlite3_column_table_name16	sqlite\sqlite3.c	115481;"	d	file:
sqlite3_column_text	sqlite\sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	sqlite\sqlite3.c	115209;"	d	file:
sqlite3_column_text16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	sqlite\sqlite3.c	115210;"	d	file:
sqlite3_column_text16	sqlite\sqlite3.c	115464;"	d	file:
sqlite3_column_type	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	sqlite\sqlite3.c	115211;"	d	file:
sqlite3_column_value	sqlite\sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	sqlite\sqlite3.c	115212;"	d	file:
sqlite3_commit_hook	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	sqlite\sqlite3.c	115213;"	d	file:
sqlite3_compileoption_get	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	sqlite\sqlite3.c	115342;"	d	file:
sqlite3_compileoption_used	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	sqlite\sqlite3.c	115343;"	d	file:
sqlite3_complete	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	sqlite\sqlite3.c	115214;"	d	file:
sqlite3_complete	sqlite\sqlite3.c	115486;"	d	file:
sqlite3_complete16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	sqlite\sqlite3.c	115215;"	d	file:
sqlite3_complete16	sqlite\sqlite3.c	115465;"	d	file:
sqlite3_complete16	sqlite\sqlite3.c	115487;"	d	file:
sqlite3_config	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	sqlite\sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	sqlite\sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	sqlite\sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	sqlite\sqlite3.c	115331;"	d	file:
sqlite3_create_collation	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	sqlite\sqlite3.c	115216;"	d	file:
sqlite3_create_collation16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	sqlite\sqlite3.c	115217;"	d	file:
sqlite3_create_collation16	sqlite\sqlite3.c	115466;"	d	file:
sqlite3_create_collation_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	sqlite\sqlite3.c	115308;"	d	file:
sqlite3_create_function	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	sqlite\sqlite3.c	115218;"	d	file:
sqlite3_create_function16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	sqlite\sqlite3.c	115219;"	d	file:
sqlite3_create_function16	sqlite\sqlite3.c	115467;"	d	file:
sqlite3_create_function_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	sqlite\sqlite3.c	115344;"	d	file:
sqlite3_create_module	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	sqlite\sqlite3.c	115220;"	d	file:
sqlite3_create_module	sqlite\sqlite3.c	115500;"	d	file:
sqlite3_create_module_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	sqlite\sqlite3.c	115221;"	d	file:
sqlite3_create_module_v2	sqlite\sqlite3.c	115501;"	d	file:
sqlite3_current_time	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	sqlite\sqlite3.c	115222;"	d	file:
sqlite3_data_directory	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_db_cacheflush	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_cacheflush(sqlite3 *db){$/;"	f
sqlite3_db_cacheflush	sqlite\sqlite3.c	115399;"	d	file:
sqlite3_db_config	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	sqlite\sqlite3.c	115345;"	d	file:
sqlite3_db_filename	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_filename	sqlite\sqlite3.c	115363;"	d	file:
sqlite3_db_handle	sqlite\sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	sqlite\sqlite3.c	115223;"	d	file:
sqlite3_db_mutex	sqlite\sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	sqlite\sqlite3.c	115346;"	d	file:
sqlite3_db_readonly	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_readonly	sqlite\sqlite3.c	115364;"	d	file:
sqlite3_db_release_memory	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_release_memory	sqlite\sqlite3.c	115365;"	d	file:
sqlite3_db_status	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	sqlite\sqlite3.c	115347;"	d	file:
sqlite3_debug_mutex	sqlite\sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	sqlite\sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	sqlite\sqlite3.c	115224;"	d	file:
sqlite3_declare_vtab	sqlite\sqlite3.c	115502;"	d	file:
sqlite3_deserialize	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_deserialize($/;"	f
sqlite3_destructor_type	sqlite\sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	sqlite\sqlite3.c	115225;"	d	file:
sqlite3_enable_shared_cache	sqlite\sqlite3.c	115508;"	d	file:
sqlite3_errcode	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	sqlite\sqlite3.c	115226;"	d	file:
sqlite3_errmsg	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	sqlite\sqlite3.c	115227;"	d	file:
sqlite3_errmsg16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	sqlite\sqlite3.c	115228;"	d	file:
sqlite3_errmsg16	sqlite\sqlite3.c	115468;"	d	file:
sqlite3_errstr	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int rc){$/;"	f
sqlite3_errstr	sqlite\sqlite3.c	115366;"	d	file:
sqlite3_exec	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	sqlite\sqlite3.c	115229;"	d	file:
sqlite3_expanded_sql	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expanded_sql	sqlite\sqlite3.c	115404;"	d	file:
sqlite3_expired	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	sqlite\sqlite3.c	115231;"	d	file:
sqlite3_extended_errcode	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	sqlite\sqlite3.c	115348;"	d	file:
sqlite3_extended_result_codes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	sqlite\sqlite3.c	115332;"	d	file:
sqlite3_file	sqlite\sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	sqlite\sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	sqlite\sqlite3.c	115309;"	d	file:
sqlite3_finalize	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	sqlite\sqlite3.c	115233;"	d	file:
sqlite3_found_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	sqlite\sqlite3.c	115234;"	d	file:
sqlite3_free_table	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	sqlite\sqlite3.c	115235;"	d	file:
sqlite3_free_table	sqlite\sqlite3.c	115517;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	sqlite\sqlite3.c	157132;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite\sqlite3.c	157134;"	d	file:
sqlite3_fts5_may_be_corrupt	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_fts5_may_be_corrupt = 1;$/;"	v
sqlite3_fullsync_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	sqlite\sqlite3.c	115236;"	d	file:
sqlite3_get_auxdata	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	sqlite\sqlite3.c	115237;"	d	file:
sqlite3_get_table	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	sqlite\sqlite3.c	115238;"	d	file:
sqlite3_get_table	sqlite\sqlite3.c	115518;"	d	file:
sqlite3_get_table_cb	sqlite\sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	sqlite\sqlite3.c	115240;"	d	file:
sqlite3_hostid_num	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	sqlite\sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	sqlite\sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	sqlite\sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	sqlite\sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	sqlite\sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	sqlite\sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	sqlite\sqlite3.c	115242;"	d	file:
sqlite3_interrupt_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	sqlite\sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	sqlite\sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	sqlite\sqlite3.c	115243;"	d	file:
sqlite3_libversion	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	sqlite\sqlite3.c	115244;"	d	file:
sqlite3_libversion_number	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	sqlite\sqlite3.c	115245;"	d	file:
sqlite3_like_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	sqlite\sqlite3.c	115333;"	d	file:
sqlite3_load_extension	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_load_extension	sqlite\sqlite3.c	115380;"	d	file:
sqlite3_loadext_entry	sqlite\sqlite3.c	/^typedef int (*sqlite3_loadext_entry)($/;"	t	file:
sqlite3_log	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	sqlite\sqlite3.c	115349;"	d	file:
sqlite3_malloc	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	sqlite\sqlite3.c	115246;"	d	file:
sqlite3_malloc64	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_malloc64	sqlite\sqlite3.c	115381;"	d	file:
sqlite3_max_blobsize	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	sqlite\sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	sqlite\sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	sqlite\sqlite3.c	115310;"	d	file:
sqlite3_memory_used	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	sqlite\sqlite3.c	115311;"	d	file:
sqlite3_module	sqlite\sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	sqlite\sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	sqlite\sqlite3.c	115247;"	d	file:
sqlite3_msize	sqlite\sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){$/;"	f
sqlite3_msize	sqlite\sqlite3.c	115382;"	d	file:
sqlite3_mutex	sqlite\sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	sqlite\sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	sqlite\sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	sqlite\sqlite3.c	115312;"	d	file:
sqlite3_mutex_alloc	sqlite\sqlite3.c	15347;"	d	file:
sqlite3_mutex_enter	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	sqlite\sqlite3.c	115313;"	d	file:
sqlite3_mutex_enter	sqlite\sqlite3.c	15349;"	d	file:
sqlite3_mutex_free	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	sqlite\sqlite3.c	115314;"	d	file:
sqlite3_mutex_free	sqlite\sqlite3.c	15348;"	d	file:
sqlite3_mutex_held	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	sqlite\sqlite3.c	15352;"	d	file:
sqlite3_mutex_leave	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	sqlite\sqlite3.c	115315;"	d	file:
sqlite3_mutex_leave	sqlite\sqlite3.c	15351;"	d	file:
sqlite3_mutex_methods	sqlite\sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	sqlite\sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	sqlite\sqlite3.c	15353;"	d	file:
sqlite3_mutex_try	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	sqlite\sqlite3.c	115316;"	d	file:
sqlite3_mutex_try	sqlite\sqlite3.c	15350;"	d	file:
sqlite3_next_stmt	sqlite\sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	sqlite\sqlite3.c	115334;"	d	file:
sqlite3_open	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	sqlite\sqlite3.c	115248;"	d	file:
sqlite3_open16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	sqlite\sqlite3.c	115249;"	d	file:
sqlite3_open16	sqlite\sqlite3.c	115469;"	d	file:
sqlite3_open_file_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	sqlite\sqlite3.c	115317;"	d	file:
sqlite3_opentemp_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	sqlite\sqlite3.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	sqlite\sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	sqlite\sqlite3.c	115298;"	d	file:
sqlite3_pager_readdb_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	sqlite\sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	sqlite\sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods2	sqlite\sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_page	sqlite\sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	sqlite\sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_prepare	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	sqlite\sqlite3.c	115250;"	d	file:
sqlite3_prepare16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	sqlite\sqlite3.c	115251;"	d	file:
sqlite3_prepare16	sqlite\sqlite3.c	115470;"	d	file:
sqlite3_prepare16_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	sqlite\sqlite3.c	115253;"	d	file:
sqlite3_prepare16_v2	sqlite\sqlite3.c	115300;"	d	file:
sqlite3_prepare16_v2	sqlite\sqlite3.c	115471;"	d	file:
sqlite3_prepare16_v3	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v3($/;"	f
sqlite3_prepare16_v3	sqlite\sqlite3.c	115409;"	d	file:
sqlite3_prepare16_v3	sqlite\sqlite3.c	115472;"	d	file:
sqlite3_prepare_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	sqlite\sqlite3.c	115252;"	d	file:
sqlite3_prepare_v2	sqlite\sqlite3.c	115299;"	d	file:
sqlite3_prepare_v3	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_prepare_v3($/;"	f
sqlite3_prepare_v3	sqlite\sqlite3.c	115408;"	d	file:
sqlite3_preupdate_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_preupdate_count(sqlite3 *db){$/;"	f
sqlite3_preupdate_depth	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_preupdate_depth(sqlite3 *db){$/;"	f
sqlite3_preupdate_hook	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_preupdate_hook($/;"	f
sqlite3_preupdate_new	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_preupdate_new(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_preupdate_old	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_preupdate_old(sqlite3 *db, int iIdx, sqlite3_value **ppValue){$/;"	f
sqlite3_profile	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	sqlite\sqlite3.c	115254;"	d	file:
sqlite3_profile	sqlite\sqlite3.c	115512;"	d	file:
sqlite3_progress_handler	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	sqlite\sqlite3.c	115255;"	d	file:
sqlite3_progress_handler	sqlite\sqlite3.c	115496;"	d	file:
sqlite3_randomness	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	sqlite\sqlite3.c	115330;"	d	file:
sqlite3_realloc	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	sqlite\sqlite3.c	115256;"	d	file:
sqlite3_realloc64	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_realloc64	sqlite\sqlite3.c	115383;"	d	file:
sqlite3_rebaser	sqlite\sqlite3.c	/^struct sqlite3_rebaser {$/;"	s	file:
sqlite3_rebaser	sqlite\sqlite3.c	/^typedef struct sqlite3_rebaser sqlite3_rebaser;$/;"	t	typeref:struct:sqlite3_rebaser	file:
sqlite3_release_memory	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	sqlite\sqlite3.c	115318;"	d	file:
sqlite3_reset	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	sqlite\sqlite3.c	115257;"	d	file:
sqlite3_reset_auto_extension	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_reset_auto_extension	sqlite\sqlite3.c	115384;"	d	file:
sqlite3_result_blob	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	sqlite\sqlite3.c	115258;"	d	file:
sqlite3_result_blob64	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_blob64($/;"	f
sqlite3_result_blob64	sqlite\sqlite3.c	115385;"	d	file:
sqlite3_result_double	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	sqlite\sqlite3.c	115259;"	d	file:
sqlite3_result_error	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	sqlite\sqlite3.c	115260;"	d	file:
sqlite3_result_error16	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	sqlite\sqlite3.c	115261;"	d	file:
sqlite3_result_error16	sqlite\sqlite3.c	115473;"	d	file:
sqlite3_result_error_code	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	sqlite\sqlite3.c	115328;"	d	file:
sqlite3_result_error_nomem	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	sqlite\sqlite3.c	115319;"	d	file:
sqlite3_result_error_toobig	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	sqlite\sqlite3.c	115320;"	d	file:
sqlite3_result_int	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	sqlite\sqlite3.c	115262;"	d	file:
sqlite3_result_int64	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	sqlite\sqlite3.c	115263;"	d	file:
sqlite3_result_null	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	sqlite\sqlite3.c	115264;"	d	file:
sqlite3_result_pointer	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_pointer($/;"	f
sqlite3_result_pointer	sqlite\sqlite3.c	115411;"	d	file:
sqlite3_result_subtype	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_subtype(sqlite3_context *pCtx, unsigned int eSubtype){$/;"	f
sqlite3_result_subtype	sqlite\sqlite3.c	115395;"	d	file:
sqlite3_result_text	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	sqlite\sqlite3.c	115265;"	d	file:
sqlite3_result_text16	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	sqlite\sqlite3.c	115266;"	d	file:
sqlite3_result_text16	sqlite\sqlite3.c	115474;"	d	file:
sqlite3_result_text16be	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	sqlite\sqlite3.c	115267;"	d	file:
sqlite3_result_text16be	sqlite\sqlite3.c	115475;"	d	file:
sqlite3_result_text16le	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	sqlite\sqlite3.c	115268;"	d	file:
sqlite3_result_text16le	sqlite\sqlite3.c	115476;"	d	file:
sqlite3_result_text64	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_text64($/;"	f
sqlite3_result_text64	sqlite\sqlite3.c	115386;"	d	file:
sqlite3_result_value	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	sqlite\sqlite3.c	115269;"	d	file:
sqlite3_result_zeroblob	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	sqlite\sqlite3.c	115327;"	d	file:
sqlite3_result_zeroblob64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context *pCtx, u64 n){$/;"	f
sqlite3_result_zeroblob64	sqlite\sqlite3.c	115391;"	d	file:
sqlite3_rollback_hook	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	sqlite\sqlite3.c	115270;"	d	file:
sqlite3_rtree_dbl	sqlite\sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	sqlite\sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_geometry	sqlite\sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	sqlite\sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_rtree_query_callback	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	f
sqlite3_rtree_query_info	sqlite\sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	sqlite\sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_search_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_serialize	sqlite\sqlite3.c	/^SQLITE_API unsigned char *sqlite3_serialize($/;"	f
sqlite3_session	sqlite\sqlite3.c	/^struct sqlite3_session {$/;"	s	file:
sqlite3_session	sqlite\sqlite3.c	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session	file:
sqlite3_set_authorizer	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	sqlite\sqlite3.c	115271;"	d	file:
sqlite3_set_authorizer	sqlite\sqlite3.c	115456;"	d	file:
sqlite3_set_auxdata	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	sqlite\sqlite3.c	115272;"	d	file:
sqlite3_set_last_insert_rowid	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_set_last_insert_rowid(sqlite3 *db, sqlite3_int64 iRowid){$/;"	f
sqlite3_set_last_insert_rowid	sqlite\sqlite3.c	115406;"	d	file:
sqlite3_shutdown	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	sqlite\sqlite3.c	115321;"	d	file:
sqlite3_snapshot	sqlite\sqlite3.c	/^typedef struct sqlite3_snapshot {$/;"	s	file:
sqlite3_snapshot	sqlite\sqlite3.c	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot	file:
sqlite3_snapshot_cmp	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2){$/;"	f
sqlite3_snapshot_free	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_snapshot_free(sqlite3_snapshot *pSnapshot){$/;"	f
sqlite3_snapshot_get	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_snapshot_get($/;"	f
sqlite3_snapshot_open	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_snapshot_open($/;"	f
sqlite3_snapshot_recover	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_snprintf	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	sqlite\sqlite3.c	115273;"	d	file:
sqlite3_soft_heap_limit	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	sqlite\sqlite3.c	115322;"	d	file:
sqlite3_soft_heap_limit64	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	sqlite\sqlite3.c	115350;"	d	file:
sqlite3_sort_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	sqlite\sqlite3.c	115351;"	d	file:
sqlite3_sql	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	sqlite\sqlite3.c	115335;"	d	file:
sqlite3_status	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	sqlite\sqlite3.c	115336;"	d	file:
sqlite3_status64	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_status64($/;"	f
sqlite3_status64	sqlite\sqlite3.c	115397;"	d	file:
sqlite3_step	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	sqlite\sqlite3.c	115274;"	d	file:
sqlite3_stmt	sqlite\sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_busy	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_busy	sqlite\sqlite3.c	115367;"	d	file:
sqlite3_stmt_readonly	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	sqlite\sqlite3.c	115368;"	d	file:
sqlite3_stmt_scanstatus	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_scanstatus($/;"	f
sqlite3_stmt_scanstatus_reset	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	sqlite\sqlite3.c	115352;"	d	file:
sqlite3_strglob	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_strglob	sqlite\sqlite3.c	115387;"	d	file:
sqlite3_stricmp	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_stricmp	sqlite\sqlite3.c	115369;"	d	file:
sqlite3_strlike	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_strlike(const char *zPattern, const char *zStr, unsigned int esc){$/;"	f
sqlite3_strlike	sqlite\sqlite3.c	115398;"	d	file:
sqlite3_strnicmp	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	sqlite\sqlite3.c	115353;"	d	file:
sqlite3_sync_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	sqlite\sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_system_errno	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_system_errno(sqlite3 *db){$/;"	f
sqlite3_system_errno	sqlite\sqlite3.c	115401;"	d	file:
sqlite3_table_column_metadata	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	sqlite\sqlite3.c	115275;"	d	file:
sqlite3_temp_directory	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	sqlite\sqlite3.c	115329;"	d	file:
sqlite3_thread_cleanup	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	sqlite\sqlite3.c	115276;"	d	file:
sqlite3_threadsafe	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	sqlite\sqlite3.c	115326;"	d	file:
sqlite3_tokenizer	sqlite\sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	sqlite\sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	sqlite\sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	sqlite\sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	sqlite\sqlite3.c	115277;"	d	file:
sqlite3_trace	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void(*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	sqlite\sqlite3.c	115278;"	d	file:
sqlite3_trace	sqlite\sqlite3.c	115513;"	d	file:
sqlite3_trace_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_trace_v2($/;"	f
sqlite3_trace_v2	sqlite\sqlite3.c	115403;"	d	file:
sqlite3_trace_v2	sqlite\sqlite3.c	115532;"	d	file:
sqlite3_transfer_bindings	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	sqlite\sqlite3.c	115280;"	d	file:
sqlite3_uint64	sqlite\sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	sqlite\sqlite3.c	115354;"	d	file:
sqlite3_update_hook	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	sqlite\sqlite3.c	115282;"	d	file:
sqlite3_uri_boolean	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_boolean	sqlite\sqlite3.c	115370;"	d	file:
sqlite3_uri_int64	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_int64	sqlite\sqlite3.c	115371;"	d	file:
sqlite3_uri_parameter	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_parameter	sqlite\sqlite3.c	115372;"	d	file:
sqlite3_uri_vsnprintf	sqlite\sqlite3.c	115373;"	d	file:
sqlite3_user_data	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	sqlite\sqlite3.c	115283;"	d	file:
sqlite3_userauth	sqlite\sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	sqlite\sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	sqlite\sqlite3.c	/^struct sqlite3_value {$/;"	s	file:
sqlite3_value	sqlite\sqlite3.c	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value	file:
sqlite3_value_blob	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	sqlite\sqlite3.c	115284;"	d	file:
sqlite3_value_bytes	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	sqlite\sqlite3.c	115285;"	d	file:
sqlite3_value_bytes16	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	sqlite\sqlite3.c	115286;"	d	file:
sqlite3_value_double	sqlite\sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	sqlite\sqlite3.c	115287;"	d	file:
sqlite3_value_dup	sqlite\sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value *pOrig){$/;"	f
sqlite3_value_dup	sqlite\sqlite3.c	115389;"	d	file:
sqlite3_value_free	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_value_free(sqlite3_value *pOld){$/;"	f
sqlite3_value_free	sqlite\sqlite3.c	115390;"	d	file:
sqlite3_value_int	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	sqlite\sqlite3.c	115288;"	d	file:
sqlite3_value_int64	sqlite\sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	sqlite\sqlite3.c	115289;"	d	file:
sqlite3_value_nochange	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_nochange(sqlite3_value *pVal){$/;"	f
sqlite3_value_nochange	sqlite\sqlite3.c	115415;"	d	file:
sqlite3_value_numeric_type	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	sqlite\sqlite3.c	115290;"	d	file:
sqlite3_value_pointer	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_value_pointer(sqlite3_value *pVal, const char *zPType){$/;"	f
sqlite3_value_pointer	sqlite\sqlite3.c	115412;"	d	file:
sqlite3_value_subtype	sqlite\sqlite3.c	/^SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value *pVal){$/;"	f
sqlite3_value_subtype	sqlite\sqlite3.c	115394;"	d	file:
sqlite3_value_text	sqlite\sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	sqlite\sqlite3.c	115291;"	d	file:
sqlite3_value_text16	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	sqlite\sqlite3.c	115292;"	d	file:
sqlite3_value_text16	sqlite\sqlite3.c	115477;"	d	file:
sqlite3_value_text16be	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	sqlite\sqlite3.c	115293;"	d	file:
sqlite3_value_text16be	sqlite\sqlite3.c	115478;"	d	file:
sqlite3_value_text16le	sqlite\sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	sqlite\sqlite3.c	115294;"	d	file:
sqlite3_value_text16le	sqlite\sqlite3.c	115479;"	d	file:
sqlite3_value_type	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	sqlite\sqlite3.c	115295;"	d	file:
sqlite3_version	sqlite\sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	sqlite\sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	sqlite\sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	sqlite\sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	sqlite\sqlite3.c	115323;"	d	file:
sqlite3_vfs_register	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	sqlite\sqlite3.c	115324;"	d	file:
sqlite3_vfs_unregister	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	sqlite\sqlite3.c	115325;"	d	file:
sqlite3_vmprintf	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	sqlite\sqlite3.c	115296;"	d	file:
sqlite3_vsnprintf	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vsnprintf	sqlite\sqlite3.c	115297;"	d	file:
sqlite3_vtab	sqlite\sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	sqlite\sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_collation	sqlite\sqlite3.c	/^SQLITE_API const char *sqlite3_vtab_collation(sqlite3_index_info *pIdxInfo, int iCons){$/;"	f
sqlite3_vtab_collation	sqlite\sqlite3.c	115416;"	d	file:
sqlite3_vtab_config	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	sqlite\sqlite3.c	115359;"	d	file:
sqlite3_vtab_config	sqlite\sqlite3.c	115503;"	d	file:
sqlite3_vtab_cursor	sqlite\sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	sqlite\sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_nochange	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vtab_nochange(sqlite3_context *p){$/;"	f
sqlite3_vtab_nochange	sqlite\sqlite3.c	115414;"	d	file:
sqlite3_vtab_on_conflict	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	sqlite\sqlite3.c	115360;"	d	file:
sqlite3_vtab_on_conflict	sqlite\sqlite3.c	115504;"	d	file:
sqlite3_wal_autocheckpoint	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	sqlite\sqlite3.c	115355;"	d	file:
sqlite3_wal_checkpoint	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	sqlite\sqlite3.c	115356;"	d	file:
sqlite3_wal_checkpoint_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_checkpoint_v2	sqlite\sqlite3.c	115374;"	d	file:
sqlite3_wal_hook	sqlite\sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	sqlite\sqlite3.c	115357;"	d	file:
sqlite3_win32_compact_heap	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zText){$/;"	f
sqlite3_win32_mbcs_to_utf8_v2	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_reset_heap	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_unicode_to_utf8	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_unicode_to_utf8(LPCWSTR zWideText){$/;"	f
sqlite3_win32_utf8_to_mbcs	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zText){$/;"	f
sqlite3_win32_utf8_to_mbcs_v2	sqlite\sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs_v2(const char *zText, int useAnsi){$/;"	f
sqlite3_win32_utf8_to_unicode	sqlite\sqlite3.c	/^SQLITE_API LPWSTR sqlite3_win32_utf8_to_unicode(const char *zText){$/;"	f
sqlite3_win32_write_debug	sqlite\sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_xauth	sqlite\sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	sqlite\sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3azCompileOpt	sqlite\sqlite3.c	/^static const char * const sqlite3azCompileOpt[] = {$/;"	v	file:
sqlite3changegroup_add	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup *pGrp, int nData, void *pData){$/;"	f
sqlite3changegroup_add_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changegroup_add_strm($/;"	f
sqlite3changegroup_delete	sqlite\sqlite3.c	/^SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup *pGrp){$/;"	f
sqlite3changegroup_new	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp){$/;"	f
sqlite3changegroup_output	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changegroup_output($/;"	f
sqlite3changegroup_output_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changegroup_output_strm($/;"	f
sqlite3changeset_apply	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_apply($/;"	f
sqlite3changeset_apply_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_apply_strm($/;"	f
sqlite3changeset_apply_v2	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_apply_v2($/;"	f
sqlite3changeset_apply_v2_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_apply_v2_strm($/;"	f
sqlite3changeset_concat	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_concat($/;"	f
sqlite3changeset_concat_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_concat_strm($/;"	f
sqlite3changeset_conflict	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_conflict($/;"	f
sqlite3changeset_finalize	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *p){$/;"	f
sqlite3changeset_fk_conflicts	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_fk_conflicts($/;"	f
sqlite3changeset_invert	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_invert($/;"	f
sqlite3changeset_invert_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_invert_strm($/;"	f
sqlite3changeset_new	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_new($/;"	f
sqlite3changeset_next	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *p){$/;"	f
sqlite3changeset_old	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_old($/;"	f
sqlite3changeset_op	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_op($/;"	f
sqlite3changeset_pk	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_pk($/;"	f
sqlite3changeset_start	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_start($/;"	f
sqlite3changeset_start_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3changeset_start_strm($/;"	f
sqlite3one	sqlite\sqlite3.c	/^  const int sqlite3one = 1;$/;"	v
sqlite3one	sqlite\sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3rbu	sqlite\sqlite3.c	/^struct sqlite3rbu {$/;"	s	file:
sqlite3rbu	sqlite\sqlite3.c	/^typedef struct sqlite3rbu sqlite3rbu;$/;"	t	typeref:struct:sqlite3rbu	file:
sqlite3rbu_bp_progress	sqlite\sqlite3.c	/^SQLITE_API void sqlite3rbu_bp_progress(sqlite3rbu *p, int *pnOne, int *pnTwo){$/;"	f
sqlite3rbu_close	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rbu_close(sqlite3rbu *p, char **pzErrmsg){$/;"	f
sqlite3rbu_create_vfs	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rbu_create_vfs(const char *zName, const char *zParent){$/;"	f
sqlite3rbu_db	sqlite\sqlite3.c	/^SQLITE_API sqlite3 *sqlite3rbu_db(sqlite3rbu *pRbu, int bRbu){$/;"	f
sqlite3rbu_destroy_vfs	sqlite\sqlite3.c	/^SQLITE_API void sqlite3rbu_destroy_vfs(const char *zName){$/;"	f
sqlite3rbu_open	sqlite\sqlite3.c	/^SQLITE_API sqlite3rbu *sqlite3rbu_open($/;"	f
sqlite3rbu_progress	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3rbu_progress(sqlite3rbu *pRbu){$/;"	f
sqlite3rbu_savestate	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rbu_savestate(sqlite3rbu *p){$/;"	f
sqlite3rbu_state	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rbu_state(sqlite3rbu *p){$/;"	f
sqlite3rbu_step	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rbu_step(sqlite3rbu *p){$/;"	f
sqlite3rbu_temp_size	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3rbu_temp_size(sqlite3rbu *pRbu){$/;"	f
sqlite3rbu_temp_size_limit	sqlite\sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3rbu_temp_size_limit(sqlite3rbu *pRbu, sqlite3_int64 n){$/;"	f
sqlite3rbu_vacuum	sqlite\sqlite3.c	/^SQLITE_API sqlite3rbu *sqlite3rbu_vacuum($/;"	f
sqlite3rebaser_configure	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rebaser_configure($/;"	f
sqlite3rebaser_create	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rebaser_create(sqlite3_rebaser **ppNew){$/;"	f
sqlite3rebaser_delete	sqlite\sqlite3.c	/^SQLITE_API void sqlite3rebaser_delete(sqlite3_rebaser *p){$/;"	f
sqlite3rebaser_rebase	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rebaser_rebase($/;"	f
sqlite3rebaser_rebase_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3rebaser_rebase_strm($/;"	f
sqlite3session_attach	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_attach($/;"	f
sqlite3session_changeset	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_changeset($/;"	f
sqlite3session_changeset_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_changeset_strm($/;"	f
sqlite3session_create	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_create($/;"	f
sqlite3session_delete	sqlite\sqlite3.c	/^SQLITE_API void sqlite3session_delete(sqlite3_session *pSession){$/;"	f
sqlite3session_diff	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_diff($/;"	f
sqlite3session_enable	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable){$/;"	f
sqlite3session_indirect	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect){$/;"	f
sqlite3session_isempty	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession){$/;"	f
sqlite3session_patchset	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_patchset($/;"	f
sqlite3session_patchset_strm	sqlite\sqlite3.c	/^SQLITE_API int sqlite3session_patchset_strm($/;"	f
sqlite3session_table_filter	sqlite\sqlite3.c	/^SQLITE_API void sqlite3session_table_filter($/;"	f
sqliteAuthBadReturnCode	sqlite\sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	sqlite\sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteErrorFromPosixError	sqlite\sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	sqlite\sqlite3.c	12869;"	d	file:
sqliteHashFirst	sqlite\sqlite3.c	12867;"	d	file:
sqliteHashNext	sqlite\sqlite3.c	12868;"	d	file:
sqliteProcessJoin	sqlite\sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	sqlite\sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	sqlite\sqlite3.c	105469;"	d	file:
sqlite_int64	sqlite\sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite\sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite\sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	sqlite\sqlite3.c	/^    typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite\sqlite3.c	/^    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite\sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite\sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
star_oh	sqlite\sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
startEndFlag	sqlite\sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	sqlite\sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat4Destructor	sqlite\sqlite3.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	sqlite\sqlite3.c	/^static int stat4ValueFromExpr($/;"	f	file:
statBestIndex	sqlite\sqlite3.c	/^static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
statClearPage	sqlite\sqlite3.c	/^static void statClearPage(StatPage *p){$/;"	f	file:
statClose	sqlite\sqlite3.c	/^static int statClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statColumn	sqlite\sqlite3.c	/^static int statColumn($/;"	f	file:
statConnect	sqlite\sqlite3.c	/^static int statConnect($/;"	f	file:
statDecodePage	sqlite\sqlite3.c	/^static int statDecodePage(Btree *pBt, StatPage *p){$/;"	f	file:
statDisconnect	sqlite\sqlite3.c	/^static int statDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
statEof	sqlite\sqlite3.c	/^static int statEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statFilter	sqlite\sqlite3.c	/^static int statFilter($/;"	f	file:
statGet	sqlite\sqlite3.c	/^static void statGet($/;"	f	file:
statGetFuncdef	sqlite\sqlite3.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	sqlite\sqlite3.c	/^static void statInit($/;"	f	file:
statInitFuncdef	sqlite\sqlite3.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statMutex	sqlite\sqlite3.c	/^static const char statMutex[] = {$/;"	v	file:
statNext	sqlite\sqlite3.c	/^static int statNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statOpen	sqlite\sqlite3.c	/^static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
statPush	sqlite\sqlite3.c	/^static void statPush($/;"	f	file:
statPushFuncdef	sqlite\sqlite3.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
statResetCsr	sqlite\sqlite3.c	/^static void statResetCsr(StatCursor *pCsr){$/;"	f	file:
statRowid	sqlite\sqlite3.c	/^static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
statSizeAndOffset	sqlite\sqlite3.c	/^static void statSizeAndOffset(StatCursor *pCsr){$/;"	f	file:
stateno	sqlite\sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number, or reduce action in SHIFTREDUCE *\/$/;"	m	struct:yyStackEntry	file:
stateno	sqlite\sqlite3.c	/^  fts5YYACTIONTYPE stateno;  \/* The state-number, or reduce action in SHIFTREDUCE *\/$/;"	m	struct:fts5yyStackEntry	file:
status	sqlite\sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
status64	sqlite\sqlite3.c	/^  int (*status64)(int,sqlite3_int64*,sqlite3_int64*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	sqlite\sqlite3.c	/^static int stem($/;"	f	file:
step	sqlite\sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	sqlite\sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmtBestIndex	sqlite\sqlite3.c	/^static int stmtBestIndex($/;"	f	file:
stmtClose	sqlite\sqlite3.c	/^static int stmtClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
stmtColumn	sqlite\sqlite3.c	/^static int stmtColumn($/;"	f	file:
stmtConnect	sqlite\sqlite3.c	/^static int stmtConnect($/;"	f	file:
stmtDisconnect	sqlite\sqlite3.c	/^static int stmtDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
stmtEof	sqlite\sqlite3.c	/^static int stmtEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
stmtFilter	sqlite\sqlite3.c	/^static int stmtFilter($/;"	f	file:
stmtModule	sqlite\sqlite3.c	/^static sqlite3_module stmtModule = {$/;"	v	file:
stmtNext	sqlite\sqlite3.c	/^static int stmtNext(sqlite3_vtab_cursor *cur){$/;"	f	file:
stmtOpen	sqlite\sqlite3.c	/^static int stmtOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
stmtRowid	sqlite\sqlite3.c	/^static int stmtRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){$/;"	f	file:
stmt_busy	sqlite\sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_cursor	sqlite\sqlite3.c	/^struct stmt_cursor {$/;"	s	file:
stmt_cursor	sqlite\sqlite3.c	/^typedef struct stmt_cursor stmt_cursor;$/;"	t	typeref:struct:stmt_cursor	file:
stmt_readonly	sqlite\sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_status	sqlite\sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
stmt_vtab	sqlite\sqlite3.c	/^struct stmt_vtab {$/;"	s	file:
stmt_vtab	sqlite\sqlite3.c	/^typedef struct stmt_vtab stmt_vtab;$/;"	t	typeref:struct:stmt_vtab	file:
storeLastErrno	sqlite\sqlite3.c	/^static void storeLastErrno(unixFile *pFile, int error){$/;"	f	file:
strAccumFinishRealloc	sqlite\sqlite3.c	/^static SQLITE_NOINLINE char *strAccumFinishRealloc(StrAccum *p){$/;"	f	file:
strHash	sqlite\sqlite3.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
strftimeFunc	sqlite\sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strglob	sqlite\sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stricmp	sqlite\sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
strlike	sqlite\sqlite3.c	/^  int (*strlike)(const char*,const char*,unsigned int);$/;"	m	struct:sqlite3_api_routines	file:
strnicmp	sqlite\sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	sqlite\sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	sqlite\sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	sqlite\sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
subjournalPageIfRequired	sqlite\sqlite3.c	/^static int subjournalPageIfRequired(PgHdr *pPg){$/;"	f	file:
substExpr	sqlite\sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	sqlite\sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	sqlite\sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	sqlite\sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	sqlite\sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	sqlite\sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	sqlite\sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	sqlite\sqlite3.c	77577;"	d	file:
swapMixedEndianFloat	sqlite\sqlite3.c	77579;"	d	file:
switchLockProxyPath	sqlite\sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	sqlite\sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	sqlite\sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	sqlite\sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	sqlite\sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	sqlite\sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	sqlite\sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
system_errno	sqlite\sqlite3.c	/^  int (*system_errno)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
sz	sqlite\sqlite3.c	/^  i64 sz;                         \/* Size of file in bytes (temp only) *\/$/;"	m	struct:rbu_file	file:
sz	sqlite\sqlite3.c	/^  sqlite3_int64 sz;               \/* Size of the file *\/$/;"	m	struct:MemFile	file:
sz	sqlite\sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAlloc	sqlite\sqlite3.c	/^  int szAlloc;                        \/* Total size of one pcache line *\/$/;"	m	struct:PCache1	file:
szAtom	sqlite\sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	sqlite\sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szCell	sqlite\sqlite3.c	/^  u16 *szCell;            \/* Local size of all cells in apCell[] *\/$/;"	m	struct:CellArray	file:
szChunk	sqlite\sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	sqlite\sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szCol	sqlite\sqlite3.c	/^  int szCol;                      \/* Size of column value in tokens *\/$/;"	m	struct:Fts5InsertCtx	file:
szCol	sqlite\sqlite3.c	/^  int szCol;$/;"	m	struct:Fts5IntegrityCtx	file:
szEst	sqlite\sqlite3.c	/^  u8 szEst;        \/* Estimated size of value in this column. sizeof(INT)==1 *\/$/;"	m	struct:Column	file:
szExtra	sqlite\sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	sqlite\sqlite3.c	/^  int szExtra;                        \/* sizeof(MemPage)+sizeof(PgHdr) *\/$/;"	m	struct:PCache1	file:
szFirstBlock	sqlite\sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	sqlite\sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:
szLeaf	sqlite\sqlite3.c	/^  int szLeaf;                     \/* Size of leaf without page-index *\/$/;"	m	struct:Fts5Data	file:
szLookaside	sqlite\sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMalloc	sqlite\sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:sqlite3_value	file:
szMaster	sqlite\sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMax	sqlite\sqlite3.c	/^  sqlite3_int64 szMax;            \/* Space allocated to aData *\/$/;"	m	struct:MemFile	file:
szMmap	sqlite\sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:
szMmap	sqlite\sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:
szMmap	sqlite\sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szOpAlloc	sqlite\sqlite3.c	/^  int szOpAlloc;       \/* Bytes of memory space allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
szOsFile	sqlite\sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPMA	sqlite\sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                         \/* Size of database content section *\/$/;"	m	struct:PCache1	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                     \/* Size of each page in bytes *\/$/;"	m	struct:DbpageCursor	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                     \/* Value of 'pgSize' column *\/$/;"	m	struct:StatCursor	file:
szPage	sqlite\sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	sqlite\sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	sqlite\sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPma	sqlite\sqlite3.c	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config	file:
szRegion	sqlite\sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	sqlite\sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	sqlite\sqlite3.c	/^  u32 szRow;              \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:
szSlot	sqlite\sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szSpill	sqlite\sqlite3.c	/^  int szSpill;                        \/* Size before spilling occurs *\/$/;"	m	struct:PCache	file:
szTabRow	sqlite\sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:
szTemp	sqlite\sqlite3.c	/^  i64 szTemp;                     \/* Current size of all temp files in use *\/$/;"	m	struct:sqlite3rbu	file:
szTempLimit	sqlite\sqlite3.c	/^  i64 szTempLimit;                \/* Total size limit for temp files *\/$/;"	m	struct:sqlite3rbu	file:
tRowcnt	sqlite\sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	sqlite\sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	sqlite\sqlite3.c	/^  u32 tabFlags;        \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
tabTnct	sqlite\sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	sqlite\sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	sqlite\sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	sqlite\sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	sqlite\sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
targetSrcList	sqlite\sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	sqlite\sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tblhdr	sqlite\sqlite3.c	/^  SessionBuffer tblhdr;           \/* Buffer to hold apValue\/zTab\/abPK\/ *\/$/;"	m	struct:sqlite3_changeset_iter	file:
tempFile	sqlite\sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	sqlite\sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	sqlite\sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	sqlite\sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
term	sqlite\sqlite3.c	/^  Fts5Buffer term;                \/* Buffer containing previous term on page *\/$/;"	m	struct:Fts5PageWriter	file:
term	sqlite\sqlite3.c	/^  Fts5Buffer term;                \/* Current term *\/$/;"	m	struct:Fts5SegIter	file:
term	sqlite\sqlite3.c	/^  Fts5Buffer term;                \/* Current value of 'term' column *\/$/;"	m	struct:Fts5VocabCursor	file:
termCanDriveIndex	sqlite\sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
termIsEquivalence	sqlite\sqlite3.c	/^static int termIsEquivalence(Parse *pParse, Expr *pExpr){$/;"	f	file:
testFunc	sqlite\sqlite3.c	/^static void testFunc($/;"	f	file:
test_addop_breakpoint	sqlite\sqlite3.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_control	sqlite\sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	sqlite\sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	sqlite\sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	sqlite\sqlite3.c	12645;"	d	file:
testcase	sqlite\sqlite3.c	12647;"	d	file:
testcase	sqlite\sqlite3.c	150337;"	d	file:
testcase	sqlite\sqlite3.c	169179;"	d	file:
testcase	sqlite\sqlite3.c	188902;"	d	file:
thread_cleanup	sqlite\sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	sqlite\sqlite3.c	31553;"	d	file:
threadid	sqlite\sqlite3.c	31555;"	d	file:
tid	sqlite\sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	sqlite\sqlite3.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
timeFunc	sqlite\sqlite3.c	/^static void timeFunc($/;"	f	file:
tkCREATE	sqlite\sqlite3.c	144723;"	d	file:
tkEND	sqlite\sqlite3.c	144726;"	d	file:
tkEXPLAIN	sqlite\sqlite3.c	144722;"	d	file:
tkOTHER	sqlite\sqlite3.c	144720;"	d	file:
tkSEMI	sqlite\sqlite3.c	144718;"	d	file:
tkTEMP	sqlite\sqlite3.c	144724;"	d	file:
tkTRIGGER	sqlite\sqlite3.c	144725;"	d	file:
tkWS	sqlite\sqlite3.c	144719;"	d	file:
tmask	sqlite\sqlite3.c	113505;"	d	file:
tnum	sqlite\sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:
tnum	sqlite\sqlite3.c	/^  int tnum;            \/* Root BTree page for this table *\/$/;"	m	struct:Table	file:
token	sqlite\sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	sqlite\sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
tokenExpr	sqlite\sqlite3.c	/^  static Expr *tokenExpr(Parse *pParse, int op, Token t){$/;"	f	file:
tokenizer	sqlite\sqlite3.c	/^  fts5_tokenizer tokenizer;       \/* Parent tokenizer module *\/$/;"	m	struct:PorterTokenizer	file:
totalAlloc	sqlite\sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	sqlite\sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	sqlite\sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	sqlite\sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	sqlite\sqlite3.c	/^static void total_changes($/;"	f	file:
tr_tm	sqlite\sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	sqlite\sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	sqlite\sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	sqlite\sqlite3.c	/^  volatile LONG trace;       \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace_v2	sqlite\sqlite3.c	/^  int (*trace_v2)(sqlite3*,unsigned,int(*)(unsigned,void*,void*,void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
transCntrChng	sqlite\sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	sqlite\sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	sqlite\sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	sqlite\sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
translateColumnToCopy	sqlite\sqlite3.c	/^static void translateColumnToCopy($/;"	f	file:
translateP	sqlite\sqlite3.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
trigHash	sqlite\sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerSpanDup	sqlite\sqlite3.c	/^static char *triggerSpanDup(sqlite3 *db, const char *zStart, const char *zEnd){$/;"	f	file:
triggerStepAllocate	sqlite\sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	sqlite\sqlite3.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	sqlite\sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	sqlite\sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:
ts	sqlite\sqlite3.c	/^  struct Fts5TransactionState ts;$/;"	m	struct:Fts5Table	typeref:struct:Fts5Table::Fts5TransactionState	file:
type	sqlite\sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
typeMask	sqlite\sqlite3.c	/^  u8 typeMask;$/;"	m	struct:VdbeSorter	file:
typeofFunc	sqlite\sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	sqlite\sqlite3.c	/^  int tz;             \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
tzSet	sqlite\sqlite3.c	/^  char tzSet;         \/* Timezone was set explicitly *\/$/;"	m	struct:DateTime	file:
u	sqlite\sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon5	file:
u	sqlite\sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon17	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon3	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:FuncDef	typeref:union:FuncDef::__anon2	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:JsonNode	typeref:union:JsonNode::__anon30	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon14	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon29	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon18	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon19	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon10	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon20	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon22	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon25	file:
u	sqlite\sqlite3.c	/^  } u;$/;"	m	struct:sqlite3_value	typeref:union:sqlite3_value::MemValue	file:
u1	sqlite\sqlite3.c	/^    } u1;$/;"	m	struct:SrcList::SrcList_item	typeref:union:SrcList::SrcList_item::__anon8	file:
u1	sqlite\sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon1	file:
u16	sqlite\sqlite3.c	/^  typedef unsigned short int u16;$/;"	t	file:
u16	sqlite\sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	sqlite\sqlite3.c	/^typedef unsigned short u16;$/;"	t	file:
u32	sqlite\sqlite3.c	/^  typedef unsigned int u32;$/;"	t	file:
u32	sqlite\sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite\sqlite3.c	/^typedef unsigned int   u32;$/;"	t	file:
u32	sqlite\sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite\sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u64	sqlite\sqlite3.c	/^  typedef sqlite3_uint64 u64;$/;"	t	file:
u64	sqlite\sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	sqlite\sqlite3.c	/^typedef sqlite3_uint64 u64;$/;"	t	file:
u64	sqlite\sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	sqlite\sqlite3.c	/^  typedef unsigned char u8;$/;"	t	file:
u8	sqlite\sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	sqlite\sqlite3.c	/^typedef unsigned char  u8;$/;"	t	file:
u8	sqlite\sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	sqlite\sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
uTemp	sqlite\sqlite3.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:sqlite3_value	file:
uc	sqlite\sqlite3.c	/^  } uc;$/;"	m	struct:VdbeCursor	typeref:union:VdbeCursor::__anon11	file:
unLockFlag	sqlite\sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeAddExceptions	sqlite\sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	sqlite\sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	sqlite\sqlite3.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	sqlite\sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeFunc	sqlite\sqlite3.c	/^static void unicodeFunc($/;"	f	file:
unicodeIsAlnum	sqlite\sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	sqlite\sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	sqlite\sqlite3.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	sqlite\sqlite3.c	/^static int unicodeOpen($/;"	f	file:
unicode_cursor	sqlite\sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	sqlite\sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_tokenizer	sqlite\sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	sqlite\sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
uniqNotNull	sqlite\sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:
unixAccess	sqlite\sqlite3.c	/^static int unixAccess($/;"	f	file:
unixBigLock	sqlite\sqlite3.c	/^static sqlite3_mutex *unixBigLock = 0;$/;"	v	file:
unixCheckReservedLock	sqlite\sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	sqlite\sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	sqlite\sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTime	sqlite\sqlite3.c	37713;"	d	file:
unixCurrentTimeInt64	sqlite\sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	sqlite\sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	sqlite\sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	sqlite\sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	sqlite\sqlite3.c	37579;"	d	file:
unixDlError	sqlite\sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	sqlite\sqlite3.c	37577;"	d	file:
unixDlOpen	sqlite\sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	sqlite\sqlite3.c	37576;"	d	file:
unixDlSym	sqlite\sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	sqlite\sqlite3.c	37578;"	d	file:
unixEnterMutex	sqlite\sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	sqlite\sqlite3.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	sqlite\sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	sqlite\sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	sqlite\sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	sqlite\sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	sqlite\sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	sqlite\sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	sqlite\sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	sqlite\sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	sqlite\sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	sqlite\sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	sqlite\sqlite3.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	sqlite\sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	sqlite\sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	sqlite\sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	sqlite\sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLockSharedMemory	sqlite\sqlite3.c	/^static int unixLockSharedMemory(unixFile *pDbFd, unixShmNode *pShmNode){$/;"	f	file:
unixLogError	sqlite\sqlite3.c	32398;"	d	file:
unixLogErrorAtLine	sqlite\sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	sqlite\sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nMap){$/;"	f	file:
unixModeBit	sqlite\sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	sqlite\sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	sqlite\sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	sqlite\sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	sqlite\sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	sqlite\sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	sqlite\sqlite3.c	/^static int unixRead($/;"	f	file:
unixRemapfile	sqlite\sqlite3.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	sqlite\sqlite3.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	sqlite\sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	sqlite\sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	sqlite\sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	sqlite\sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	sqlite\sqlite3.c	36118;"	d	file:
unixShmLock	sqlite\sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	sqlite\sqlite3.c	36117;"	d	file:
unixShmMap	sqlite\sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	sqlite\sqlite3.c	36116;"	d	file:
unixShmNode	sqlite\sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	sqlite\sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	sqlite\sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	sqlite\sqlite3.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	sqlite\sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	sqlite\sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	sqlite\sqlite3.c	36119;"	d	file:
unixSleep	sqlite\sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	sqlite\sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	sqlite\sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	sqlite\sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	sqlite\sqlite3.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	sqlite\sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	sqlite\sqlite3.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	sqlite\sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	sqlite\sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unknownFunc	sqlite\sqlite3.c	/^static void unknownFunc($/;"	f	file:
unlikely	sqlite\sqlite3.c	12779;"	d	file:
unlockBtreeIfUnused	sqlite\sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	sqlite\sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
unsetJoinExpr	sqlite\sqlite3.c	/^static void unsetJoinExpr(Expr *p, int iTable){$/;"	f	file:
untestedTerms	sqlite\sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	sqlite\sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	sqlite\sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	sqlite\sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	sqlite\sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateRangeAffinityStr	sqlite\sqlite3.c	/^static void updateRangeAffinityStr($/;"	f	file:
updateVirtualTable	sqlite\sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	sqlite\sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	sqlite\sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uptr	sqlite\sqlite3.c	/^  typedef u32 uptr;$/;"	t	file:
uptr	sqlite\sqlite3.c	/^  typedef u64 uptr;$/;"	t	file:
uptr	sqlite\sqlite3.c	/^  typedef uintptr_t uptr;$/;"	t	file:
uri_boolean	sqlite\sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
uri_int64	sqlite\sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
uri_parameter	sqlite\sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
usable	sqlite\sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	sqlite\sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	sqlite\sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useRandomRowid	sqlite\sqlite3.c	/^  Bool useRandomRowid:1;  \/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	sqlite\sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
usedAsColumnCache	sqlite\sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	sqlite\sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	sqlite\sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
v	sqlite\sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	sqlite\sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	sqlite\sqlite3.c	/^  Vdbe *v;$/;"	m	struct:PreUpdate	file:
v	sqlite\sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	sqlite\sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
v2	sqlite\sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
validHMS	sqlite\sqlite3.c	/^  char validHMS;      \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	sqlite\sqlite3.c	/^  char validJD;       \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validJulianDay	sqlite\sqlite3.c	/^static int validJulianDay(sqlite3_int64 iJD){$/;"	f	file:
validTZ	sqlite\sqlite3.c	/^  char validTZ;       \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	sqlite\sqlite3.c	/^  char validYMD;      \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	sqlite\sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	struct:__anon26::__anon27	file:
valueBytes	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int valueBytes(sqlite3_value *pVal, u8 enc){$/;"	f	file:
valueFromExpr	sqlite\sqlite3.c	/^static int valueFromExpr($/;"	f	file:
valueFromFunction	sqlite\sqlite3.c	/^static int valueFromFunction($/;"	f	file:
valueFromFunction	sqlite\sqlite3.c	73758;"	d	file:
valueNew	sqlite\sqlite3.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	sqlite\sqlite3.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:
value_blob	sqlite\sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	sqlite\sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	sqlite\sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	sqlite\sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_dup	sqlite\sqlite3.c	/^  sqlite3_value *(*value_dup)(const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_free	sqlite\sqlite3.c	/^  void (*value_free)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	sqlite\sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	sqlite\sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_nochange	sqlite\sqlite3.c	/^  int (*value_nochange)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	sqlite\sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_pointer	sqlite\sqlite3.c	/^  void *(*value_pointer)(sqlite3_value*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
value_subtype	sqlite\sqlite3.c	/^  unsigned int (*value_subtype)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	sqlite\sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	sqlite\sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	sqlite\sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	sqlite\sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	sqlite\sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeAssertFieldCountWithinLimits	sqlite\sqlite3.c	/^static void vdbeAssertFieldCountWithinLimits($/;"	f	file:
vdbeAssertFieldCountWithinLimits	sqlite\sqlite3.c	77983;"	d	file:
vdbeChangeP4Full	sqlite\sqlite3.c	/^static void SQLITE_NOINLINE vdbeChangeP4Full($/;"	f	file:
vdbeCloseStatement	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int vdbeCloseStatement(Vdbe *p, int eOp){$/;"	f	file:
vdbeClrCopy	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeClrCopy(Mem *pTo, const Mem *pFrom, int eType){$/;"	f	file:
vdbeCommit	sqlite\sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	sqlite\sqlite3.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	sqlite\sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeFreeUnpacked	sqlite\sqlite3.c	/^static void vdbeFreeUnpacked(sqlite3 *db, int nField, UnpackedRecord *p){$/;"	f	file:
vdbeIncrBgPopulate	sqlite\sqlite3.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	sqlite\sqlite3.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	sqlite\sqlite3.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	sqlite\sqlite3.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	sqlite\sqlite3.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	sqlite\sqlite3.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	sqlite\sqlite3.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	sqlite\sqlite3.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeInvokeSqllog	sqlite\sqlite3.c	77105;"	d	file:
vdbeLeave	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeLeave(Vdbe *p){$/;"	f	file:
vdbeMemAddTerminator	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMemFromBtreeResize	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemFromBtreeResize($/;"	f	file:
vdbeMergeEngineCompare	sqlite\sqlite3.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	sqlite\sqlite3.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	sqlite\sqlite3.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	sqlite\sqlite3.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	sqlite\sqlite3.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	sqlite\sqlite3.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	sqlite\sqlite3.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	sqlite\sqlite3.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	sqlite\sqlite3.c	/^static void *vdbePmaReaderBgIncrInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	sqlite\sqlite3.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrInit	sqlite\sqlite3.c	/^static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderIncrMergeInit	sqlite\sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	sqlite\sqlite3.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	sqlite\sqlite3.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	sqlite\sqlite3.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	sqlite\sqlite3.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	sqlite\sqlite3.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	sqlite\sqlite3.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	sqlite\sqlite3.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	sqlite\sqlite3.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	sqlite\sqlite3.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	sqlite\sqlite3.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordDecodeInt	sqlite\sqlite3.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	sqlite\sqlite3.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	sqlite\sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	sqlite\sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	sqlite\sqlite3.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	sqlite\sqlite3.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	sqlite\sqlite3.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	sqlite\sqlite3.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterBlockDebug	sqlite\sqlite3.c	90201;"	d	file:
vdbeSorterCompare	sqlite\sqlite3.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCompareInt	sqlite\sqlite3.c	/^static int vdbeSorterCompareInt($/;"	f	file:
vdbeSorterCompareTail	sqlite\sqlite3.c	/^static int vdbeSorterCompareTail($/;"	f	file:
vdbeSorterCompareText	sqlite\sqlite3.c	/^static int vdbeSorterCompareText($/;"	f	file:
vdbeSorterCreateThread	sqlite\sqlite3.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	sqlite\sqlite3.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterExtendFile	sqlite\sqlite3.c	90392;"	d	file:
vdbeSorterFlushPMA	sqlite\sqlite3.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	sqlite\sqlite3.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterGetCompare	sqlite\sqlite3.c	/^static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){$/;"	f	file:
vdbeSorterJoinAll	sqlite\sqlite3.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinAll	sqlite\sqlite3.c	90261;"	d	file:
vdbeSorterJoinThread	sqlite\sqlite3.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterJoinThread	sqlite\sqlite3.c	90262;"	d	file:
vdbeSorterListToPMA	sqlite\sqlite3.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	sqlite\sqlite3.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	sqlite\sqlite3.c	/^static SorterRecord *vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	sqlite\sqlite3.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	sqlite\sqlite3.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	sqlite\sqlite3.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterPopulateDebug	sqlite\sqlite3.c	90200;"	d	file:
vdbeSorterRecordFree	sqlite\sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	sqlite\sqlite3.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRewindDebug	sqlite\sqlite3.c	90199;"	d	file:
vdbeSorterRowkey	sqlite\sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	sqlite\sqlite3.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	sqlite\sqlite3.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	sqlite\sqlite3.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	sqlite\sqlite3.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeSorterWorkDebug	sqlite\sqlite3.c	90198;"	d	file:
vdbeTakeBranch	sqlite\sqlite3.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	sqlite\sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeUnpackRecord	sqlite\sqlite3.c	/^static UnpackedRecord *vdbeUnpackRecord($/;"	f	file:
vdbeVComment	sqlite\sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verifyDbFile	sqlite\sqlite3.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
versionFunc	sqlite\sqlite3.c	/^static void versionFunc($/;"	f	file:
vfsFlags	sqlite\sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	sqlite\sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	sqlite\sqlite3.c	21522;"	d	file:
vfsUnlink	sqlite\sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	sqlite\sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	sqlite\sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	sqlite\sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viaCoroutine	sqlite\sqlite3.c	/^      unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item::__anon7	file:
vmprintf	sqlite\sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtab	sqlite\sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon22	typeref:struct:WhereLoop::__anon22::__anon24	file:
vtabBestIndex	sqlite\sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	sqlite\sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	sqlite\sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	sqlite\sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_collation	sqlite\sqlite3.c	/^  const char *(*vtab_collation)(sqlite3_index_info*,int);$/;"	m	struct:sqlite3_api_routines	file:
vtab_config	sqlite\sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_nochange	sqlite\sqlite3.c	/^  int (*vtab_nochange)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	sqlite\sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	sqlite\sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	sqlite\sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	sqlite\sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksIoFinder	sqlite\sqlite3.c	/^  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;$/;"	v	file:
vxworksIoFinderImpl	sqlite\sqlite3.c	/^static const sqlite3_io_methods *vxworksIoFinderImpl($/;"	f	file:
vxworksReleaseFileId	sqlite\sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	sqlite\sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
walBeginShmUnreliable	sqlite\sqlite3.c	/^static int walBeginShmUnreliable(Wal *pWal, int *pChanged){$/;"	f	file:
walBusyLock	sqlite\sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	sqlite\sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	sqlite\sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	sqlite\sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	sqlite\sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	sqlite\sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	sqlite\sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	sqlite\sqlite3.c	57212;"	d	file:
walFramePage	sqlite\sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	sqlite\sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	sqlite\sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	sqlite\sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	sqlite\sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	sqlite\sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	sqlite\sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	sqlite\sqlite3.c	/^static int walIndexPage($/;"	f	file:
walIndexPageRealloc	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int walIndexPageRealloc($/;"	f	file:
walIndexReadHdr	sqlite\sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	sqlite\sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	sqlite\sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	sqlite\sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	sqlite\sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	sqlite\sqlite3.c	/^static int walIteratorInit(Wal *pWal, u32 nBackfill, WalIterator **pp){$/;"	f	file:
walIteratorNext	sqlite\sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	sqlite\sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	sqlite\sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	sqlite\sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	sqlite\sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	sqlite\sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	sqlite\sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	sqlite\sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	sqlite\sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartHdr	sqlite\sqlite3.c	/^static void walRestartHdr(Wal *pWal, u32 salt1){$/;"	f	file:
walRestartLog	sqlite\sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walRewriteChecksums	sqlite\sqlite3.c	/^static int walRewriteChecksums(Wal *pWal, u32 iLast){$/;"	f	file:
walShmBarrier	sqlite\sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	sqlite\sqlite3.c	/^  u8 walSyncFlags;            \/* See description above *\/$/;"	m	struct:Pager	file:
walTryBeginRead	sqlite\sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	sqlite\sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	sqlite\sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	sqlite\sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	sqlite\sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	sqlite\sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	sqlite\sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint_v2	sqlite\sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	sqlite\sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
walkExpr	sqlite\sqlite3.c	/^static SQLITE_NOINLINE int walkExpr(Walker *pWalker, Expr *pExpr){$/;"	f	file:
walkerDepth	sqlite\sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:
wantToLock	sqlite\sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	sqlite\sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	sqlite\sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	sqlite\sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	sqlite\sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseInsert	sqlite\sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){$/;"	f	file:
whereCombineDisjuncts	sqlite\sqlite3.c	/^static void whereCombineDisjuncts($/;"	f	file:
whereEqualScanEst	sqlite\sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	sqlite\sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	sqlite\sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereIndexExprTrans	sqlite\sqlite3.c	/^static void whereIndexExprTrans($/;"	f	file:
whereIndexExprTransNode	sqlite\sqlite3.c	/^static int whereIndexExprTransNode(Walker *p, Expr *pExpr){$/;"	f	file:
whereInfoFree	sqlite\sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	sqlite\sqlite3.c	/^static int whereKeyStats($/;"	f	file:
whereLikeOptimizationStringFixup	sqlite\sqlite3.c	/^static void whereLikeOptimizationStringFixup($/;"	f	file:
whereLikeOptimizationStringFixup	sqlite\sqlite3.c	131598;"	d	file:
whereLoopAddAll	sqlite\sqlite3.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	sqlite\sqlite3.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	sqlite\sqlite3.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	sqlite\sqlite3.c	/^static int whereLoopAddOr($/;"	f	file:
whereLoopAddVirtual	sqlite\sqlite3.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAddVirtualOne	sqlite\sqlite3.c	/^static int whereLoopAddVirtualOne($/;"	f	file:
whereLoopAdjustCost	sqlite\sqlite3.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	sqlite\sqlite3.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	sqlite\sqlite3.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	sqlite\sqlite3.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	sqlite\sqlite3.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	sqlite\sqlite3.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	sqlite\sqlite3.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	sqlite\sqlite3.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	sqlite\sqlite3.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	sqlite\sqlite3.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	sqlite\sqlite3.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	sqlite\sqlite3.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereNthSubterm	sqlite\sqlite3.c	/^static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){$/;"	f	file:
whereOrInfoDelete	sqlite\sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	sqlite\sqlite3.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	sqlite\sqlite3.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	sqlite\sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	sqlite\sqlite3.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	sqlite\sqlite3.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	sqlite\sqlite3.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	sqlite\sqlite3.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	sqlite\sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	sqlite\sqlite3.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereRangeVectorLen	sqlite\sqlite3.c	/^static int whereRangeVectorLen($/;"	f	file:
whereScanInit	sqlite\sqlite3.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	sqlite\sqlite3.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	sqlite\sqlite3.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	sqlite\sqlite3.c	/^static LogEst whereSortingCost($/;"	f	file:
whereTempTriggers	sqlite\sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereTermPrint	sqlite\sqlite3.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:
whereUsablePartialIndex	sqlite\sqlite3.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
winAccess	sqlite\sqlite3.c	/^static int winAccess($/;"	f	file:
winAppData	sqlite\sqlite3.c	/^static winVfsAppData winAppData = {$/;"	v	file:
winBigLock	sqlite\sqlite3.c	/^static sqlite3_mutex *winBigLock = 0;$/;"	v	file:
winCheckReservedLock	sqlite\sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	sqlite\sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	sqlite\sqlite3.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	sqlite\sqlite3.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	sqlite\sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	sqlite\sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	sqlite\sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	sqlite\sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	sqlite\sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	sqlite\sqlite3.c	44968;"	d	file:
winDlError	sqlite\sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	sqlite\sqlite3.c	44966;"	d	file:
winDlOpen	sqlite\sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	sqlite\sqlite3.c	44965;"	d	file:
winDlSym	sqlite\sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winDlSym	sqlite\sqlite3.c	44967;"	d	file:
winFetch	sqlite\sqlite3.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	sqlite\sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	sqlite\sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	sqlite\sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	sqlite\sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	sqlite\sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	sqlite\sqlite3.c	39416;"	d	file:
winGetLastError	sqlite\sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	sqlite\sqlite3.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	sqlite\sqlite3.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	sqlite\sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	sqlite\sqlite3.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	sqlite\sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoNolockMethod	sqlite\sqlite3.c	/^static const sqlite3_io_methods winIoNolockMethod = {$/;"	v	file:
winIoerrCanRetry1	sqlite\sqlite3.c	41351;"	d	file:
winIoerrRetry	sqlite\sqlite3.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	sqlite\sqlite3.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	sqlite\sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	sqlite\sqlite3.c	39401;"	d	file:
winIsDriveLetterAndColon	sqlite\sqlite3.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	sqlite\sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	sqlite\sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	sqlite\sqlite3.c	/^static BOOL winLockFile($/;"	f	file:
winLockSharedMemory	sqlite\sqlite3.c	/^static int winLockSharedMemory(winShmNode *pShmNode){$/;"	f	file:
winLogError	sqlite\sqlite3.c	41294;"	d	file:
winLogErrorAtLine	sqlite\sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	sqlite\sqlite3.c	/^static void winLogIoerr(int nRetry, int lineno){$/;"	f	file:
winMakeEndInDirSep	sqlite\sqlite3.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	sqlite\sqlite3.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	sqlite\sqlite3.c	/^static LPWSTR winMbcsToUnicode(const char *zText, int useAnsi){$/;"	f	file:
winMbcsToUtf8	sqlite\sqlite3.c	/^static char *winMbcsToUtf8(const char *zText, int useAnsi){$/;"	f	file:
winMemAssertMagic	sqlite\sqlite3.c	39699;"	d	file:
winMemAssertMagic	sqlite\sqlite3.c	39701;"	d	file:
winMemAssertMagic1	sqlite\sqlite3.c	39697;"	d	file:
winMemAssertMagic2	sqlite\sqlite3.c	39698;"	d	file:
winMemData	sqlite\sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	sqlite\sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	sqlite\sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	sqlite\sqlite3.c	39704;"	d	file:
winMemGetHeap	sqlite\sqlite3.c	39705;"	d	file:
winMemGetOwned	sqlite\sqlite3.c	39706;"	d	file:
winMemInit	sqlite\sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	sqlite\sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	sqlite\sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	sqlite\sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	sqlite\sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	sqlite\sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	sqlite\sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	sqlite\sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	sqlite\sqlite3.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	sqlite\sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	sqlite\sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	sqlite\sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	sqlite\sqlite3.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	sqlite\sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	sqlite\sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	sqlite\sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	sqlite\sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	sqlite\sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	sqlite\sqlite3.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	sqlite\sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	sqlite\sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	sqlite\sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winNolockAppData	sqlite\sqlite3.c	/^static winVfsAppData winNolockAppData = {$/;"	v	file:
winNolockCheckReservedLock	sqlite\sqlite3.c	/^static int winNolockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winNolockLock	sqlite\sqlite3.c	/^static int winNolockLock(sqlite3_file *id, int locktype){$/;"	f	file:
winNolockUnlock	sqlite\sqlite3.c	/^static int winNolockUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winOpen	sqlite\sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	sqlite\sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	sqlite\sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	sqlite\sqlite3.c	/^static int winRead($/;"	f	file:
winRetryIoerr	sqlite\sqlite3.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	sqlite\sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	sqlite\sqlite3.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	sqlite\sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	sqlite\sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	sqlite\sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	sqlite\sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	sqlite\sqlite3.c	43530;"	d	file:
winShmEnterMutex	sqlite\sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	sqlite\sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	sqlite\sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	sqlite\sqlite3.c	43529;"	d	file:
winShmMap	sqlite\sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	sqlite\sqlite3.c	43528;"	d	file:
winShmMutexHeld	sqlite\sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	sqlite\sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	sqlite\sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	sqlite\sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	sqlite\sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	sqlite\sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	sqlite\sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	sqlite\sqlite3.c	43531;"	d	file:
winSleep	sqlite\sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	sqlite\sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	sqlite\sqlite3.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	sqlite\sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	sqlite\sqlite3.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	sqlite\sqlite3.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideText, int useAnsi){$/;"	f	file:
winUnicodeToUtf8	sqlite\sqlite3.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideText){$/;"	f	file:
winUnlock	sqlite\sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	sqlite\sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	sqlite\sqlite3.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	sqlite\sqlite3.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToMbcs	sqlite\sqlite3.c	/^static char *winUtf8ToMbcs(const char *zText, int useAnsi){$/;"	f	file:
winUtf8ToUnicode	sqlite\sqlite3.c	/^static LPWSTR winUtf8ToUnicode(const char *zText){$/;"	f	file:
winVfsAppData	sqlite\sqlite3.c	/^struct winVfsAppData {$/;"	s	file:
winVfsAppData	sqlite\sqlite3.c	/^typedef struct winVfsAppData winVfsAppData;$/;"	t	typeref:struct:winVfsAppData	file:
winWrite	sqlite\sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	sqlite\sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	sqlite\sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	sqlite\sqlite3.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	sqlite\sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	sqlite\sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	sqlite\sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	sqlite\sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	sqlite\sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	sqlite\sqlite3.c	41455;"	d	file:
winceUnlockFile	sqlite\sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
withDup	sqlite\sqlite3.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withDup	sqlite\sqlite3.c	95315;"	d	file:
withExpand	sqlite\sqlite3.c	/^static int withExpand($/;"	f	file:
wrFlag	sqlite\sqlite3.c	/^  u8 wrFlag;              \/* The wrFlag argument to sqlite3BtreeCursor() *\/$/;"	m	struct:VdbeCursor	file:
write32bits	sqlite\sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	sqlite\sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	sqlite\sqlite3.c	/^static void writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	sqlite\sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	sqlite\sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	sqlite\sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	sqlite\sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	sqlite\sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
writer	sqlite\sqlite3.c	/^  Fts5PageWriter writer;          \/* PageWriter object *\/$/;"	m	struct:Fts5SegWriter	file:
writer	sqlite\sqlite3.c	/^  Fts5PoslistWriter writer;       \/* Writer context *\/$/;"	m	struct:Fts5NearTrimmer	file:
writer	sqlite\sqlite3.c	/^  Fts5PoslistWriter writer;$/;"	m	struct:Fts5PoslistPopulator	file:
writer	sqlite\sqlite3.c	/^  Fts5SegWriter writer; $/;"	m	struct:Fts5FlushCtx	file:
wsFlags	sqlite\sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:
wsdAutoext	sqlite\sqlite3.c	116079;"	d	file:
wsdAutoext	sqlite\sqlite3.c	116082;"	d	file:
wsdAutoextInit	sqlite\sqlite3.c	116077;"	d	file:
wsdAutoextInit	sqlite\sqlite3.c	116081;"	d	file:
wsdHooks	sqlite\sqlite3.c	21662;"	d	file:
wsdHooks	sqlite\sqlite3.c	21665;"	d	file:
wsdHooksInit	sqlite\sqlite3.c	21660;"	d	file:
wsdHooksInit	sqlite\sqlite3.c	21664;"	d	file:
wsdPrng	sqlite\sqlite3.c	28053;"	d	file:
wsdStat	sqlite\sqlite3.c	19614;"	d	file:
wsdStat	sqlite\sqlite3.c	19617;"	d	file:
wsdStatInit	sqlite\sqlite3.c	19613;"	d	file:
wsdStatInit	sqlite\sqlite3.c	19616;"	d	file:
wtFlags	sqlite\sqlite3.c	/^  u16 wtFlags;            \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	sqlite\sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon5	typeref:struct:ExprList::ExprList_item::__anon5::__anon6	file:
x	sqlite\sqlite3.c	/^  fts5_tokenizer x;               \/* Tokenizer functions *\/$/;"	m	struct:Fts5TokenizerModule	file:
x	sqlite\sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:
xAccess	sqlite\sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAdvance	sqlite\sqlite3.c	/^    int (*xAdvance)(BtCursor *, int);$/;"	m	union:VdbeOp::p4union	file:
xAuth	sqlite\sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:
xBacktrace	sqlite\sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon13	file:
xBegin	sqlite\sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	sqlite\sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	sqlite\sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	sqlite\sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	sqlite\sqlite3.c	/^  int (*xBusyHandler)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xBusyHandler	sqlite\sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	sqlite\sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	sqlite\sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCellSize	sqlite\sqlite3.c	/^  u16 (*xCellSize)(MemPage*,u8*);             \/* cellSizePtr method *\/$/;"	m	struct:MemPage	file:
xCheckReservedLock	sqlite\sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	sqlite\sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	sqlite\sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	sqlite\sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	sqlite\sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	sqlite\sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	sqlite\sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	sqlite\sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	sqlite\sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xColumnCount	sqlite\sqlite3.c	/^  int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnSize	sqlite\sqlite3.c	/^  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnText	sqlite\sqlite3.c	/^  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi	file:
xColumnTotalSize	sqlite\sqlite3.c	/^  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi	file:
xCommit	sqlite\sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	sqlite\sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xCompare	sqlite\sqlite3.c	/^  SorterCompare xCompare;         \/* Compare function to use *\/$/;"	m	struct:SortSubtask	file:
xCond	sqlite\sqlite3.c	/^  int (*xCond)(char *zStem, int nStem);$/;"	m	struct:PorterRule	file:
xConnect	sqlite\sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCount	sqlite\sqlite3.c	/^  int (*xCount)(void*);$/;"	m	struct:SessionHook	file:
xCreate	sqlite\sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	sqlite\sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	sqlite\sqlite3.c	/^  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer	file:
xCreate	sqlite\sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	sqlite\sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCreateFunction	sqlite\sqlite3.c	/^  int (*xCreateFunction)($/;"	m	struct:fts5_api	file:
xCreateTokenizer	sqlite\sqlite3.c	/^  int (*xCreateTokenizer)($/;"	m	struct:fts5_api	file:
xCurrentTime	sqlite\sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	sqlite\sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	sqlite\sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDel	sqlite\sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:sqlite3_value	file:
xDelUser	sqlite\sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	sqlite\sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
xDelete	sqlite\sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	sqlite\sqlite3.c	/^  void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer	file:
xDelete	sqlite\sqlite3.c	/^  void(*xDelete)(void*);          \/* Destructor *\/$/;"	m	struct:Fts5Auxdata	file:
xDeleteAux	sqlite\sqlite3.c	/^  void (*xDeleteAux)(void*);      \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:
xDepth	sqlite\sqlite3.c	/^  int (*xDepth)(void*);$/;"	m	struct:SessionHook	file:
xDestroy	sqlite\sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	sqlite\sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(void*);        \/* Destructor function *\/$/;"	m	struct:Fts5Auxiliary	file:
xDestroy	sqlite\sqlite3.c	/^  void (*xDestroy)(void*);        \/* Destructor function *\/$/;"	m	struct:Fts5TokenizerModule	file:
xDestructor	sqlite\sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:
xDeviceCharacteristics	sqlite\sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	sqlite\sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	sqlite\sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	sqlite\sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	sqlite\sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	sqlite\sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	sqlite\sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	sqlite\sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:
xFetch	sqlite\sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	sqlite\sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	sqlite\sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	sqlite\sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	sqlite\sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	sqlite\sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                  \/* Agg finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	sqlite\sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFindTokenizer	sqlite\sqlite3.c	/^  int (*xFindTokenizer)($/;"	m	struct:fts5_api	file:
xFree	sqlite\sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	sqlite\sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	sqlite\sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	sqlite\sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	sqlite\sqlite3.c	/^  fts5_extension_function xFunc;  \/* Callback function *\/$/;"	m	struct:Fts5Auxiliary	file:
xGeom	sqlite\sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon29	file:
xGeom	sqlite\sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGet	sqlite\sqlite3.c	/^  int (*xGet)(Pager*,Pgno,DbPage**,int); \/* Routine to fetch a patch *\/$/;"	m	struct:Pager	file:
xGetAuxdata	sqlite\sqlite3.c	/^  void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi	file:
xGetLastError	sqlite\sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	sqlite\sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xInit	sqlite\sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	sqlite\sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	sqlite\sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xInput	sqlite\sqlite3.c	/^  int (*xInput)(void*, void*, int*);        \/* Input stream call (or NULL) *\/$/;"	m	struct:SessionInput	file:
xInst	sqlite\sqlite3.c	/^  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	file:
xInstCount	sqlite\sqlite3.c	/^  int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi	file:
xLanguageid	sqlite\sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	sqlite\sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	sqlite\sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	sqlite\sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	sqlite\sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	sqlite\sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	sqlite\sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	sqlite\sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	sqlite\sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	sqlite\sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	sqlite\sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	sqlite\sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	sqlite\sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNew	sqlite\sqlite3.c	/^  int (*xNew)(void*,int,sqlite3_value**);$/;"	m	struct:SessionHook	file:
xNext	sqlite\sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	sqlite\sqlite3.c	/^  int (*xNext)(Fts5Expr*, Fts5ExprNode*, int, i64);$/;"	m	struct:Fts5ExprNode	file:
xNext	sqlite\sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNext	sqlite\sqlite3.c	/^  void (*xNext)(Fts5Index*, Fts5SegIter*, int*);$/;"	m	struct:Fts5SegIter	file:
xNextSystemCall	sqlite\sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xOld	sqlite\sqlite3.c	/^  int (*xOld)(void*,int,sqlite3_value**);$/;"	m	struct:SessionHook	file:
xOpen	sqlite\sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	sqlite\sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	sqlite\sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	sqlite\sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	sqlite\sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xParseCell	sqlite\sqlite3.c	/^  void (*xParseCell)(MemPage*,u8*,CellInfo*); \/* btreeParseCell method *\/$/;"	m	struct:MemPage	file:
xPhraseCount	sqlite\sqlite3.c	/^  int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseFirst	sqlite\sqlite3.c	/^  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseFirstColumn	sqlite\sqlite3.c	/^  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseNext	sqlite\sqlite3.c	/^  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseNextColumn	sqlite\sqlite3.c	/^  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi	file:
xPhraseSize	sqlite\sqlite3.c	/^  int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi	file:
xPreUpdate	sqlite\sqlite3.c	/^static void xPreUpdate($/;"	f	file:
xPreUpdateCallback	sqlite\sqlite3.c	/^  void (*xPreUpdateCallback)(   \/* Registered using sqlite3_preupdate_hook() *\/$/;"	m	struct:sqlite3	file:
xProfile	sqlite\sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	sqlite\sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xQueryFunc	sqlite\sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon29	file:
xQueryFunc	sqlite\sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:
xQueryPhrase	sqlite\sqlite3.c	/^  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi	file:
xRandomness	sqlite\sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	sqlite\sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	sqlite\sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	sqlite\sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	sqlite\sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	sqlite\sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRelease	sqlite\sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRename	sqlite\sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	sqlite\sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	sqlite\sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	sqlite\sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRoundup	sqlite\sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowCount	sqlite\sqlite3.c	/^  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi	file:
xRowid	sqlite\sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xRowid	sqlite\sqlite3.c	/^  sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xSFunc	sqlite\sqlite3.c	/^  void (*xSFunc)(sqlite3_context*,int,sqlite3_value**); \/* func or agg-step *\/$/;"	m	struct:FuncDef	file:
xSavepoint	sqlite\sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSectorSize	sqlite\sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	sqlite\sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSelectCallback2	sqlite\sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetAuxdata	sqlite\sqlite3.c	/^  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi	file:
xSetOutputs	sqlite\sqlite3.c	/^  void (*xSetOutputs)(Fts5Iter*, Fts5SegIter*);$/;"	m	struct:Fts5Iter	file:
xSetSystemCall	sqlite\sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xShmBarrier	sqlite\sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	sqlite\sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	sqlite\sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	sqlite\sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShrink	sqlite\sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	sqlite\sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	sqlite\sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	sqlite\sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xSize	sqlite\sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	sqlite\sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSqllog	sqlite\sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:
xStress	sqlite\sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	sqlite\sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	sqlite\sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTableFilter	sqlite\sqlite3.c	/^  int (*xTableFilter)(void *pCtx, const char *zTab);$/;"	m	struct:sqlite3_session	file:
xTask	sqlite\sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	sqlite\sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTestCallback	sqlite\sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:
xToken	sqlite\sqlite3.c	/^  int (*xToken)(void*, int, const char*, int, int, int);$/;"	m	struct:PorterContext	file:
xTokenize	sqlite\sqlite3.c	/^  int (*xTokenize)(Fts5Context*, $/;"	m	struct:Fts5ExtensionApi	file:
xTokenize	sqlite\sqlite3.c	/^  int (*xTokenize)(Fts5Tokenizer*, $/;"	m	struct:fts5_tokenizer	file:
xTrace	sqlite\sqlite3.c	/^  int (*xTrace)(u32,void*,void*,void*);     \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	sqlite\sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	sqlite\sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	sqlite\sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnfetch	sqlite\sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	sqlite\sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	sqlite\sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	sqlite\sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	sqlite\sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	sqlite\sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	sqlite\sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xUserData	sqlite\sqlite3.c	/^  void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi	file:
xVdbeBranch	sqlite\sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:
xWalCallback	sqlite\sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	sqlite\sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleIndex	sqlite\sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	sqlite\sqlite3.c	/^static int xferOptimization($/;"	f	file:
xorMemory	sqlite\sqlite3.c	/^static void xorMemory(EntropyGatherer *p, unsigned char *x, int sz){$/;"	f	file:
xsnprintf	sqlite\sqlite3.c	/^  char * (*xsnprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
xthreadsafe	sqlite\sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
xvsnprintf	sqlite\sqlite3.c	/^  char *(*xvsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	sqlite\sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	sqlite\sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	sqlite\sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	sqlite\sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	sqlite\sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	sqlite\sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon26	file:
yy203	sqlite\sqlite3.c	/^  TriggerStep* yy203;$/;"	m	union:__anon26	file:
yy215	sqlite\sqlite3.c	/^  struct {int value; int mask;} yy215;$/;"	m	union:__anon26	typeref:struct:__anon26::__anon27	file:
yy259	sqlite\sqlite3.c	/^  SrcList* yy259;$/;"	m	union:__anon26	file:
yy314	sqlite\sqlite3.c	/^  Expr* yy314;$/;"	m	union:__anon26	file:
yy322	sqlite\sqlite3.c	/^  ExprList* yy322;$/;"	m	union:__anon26	file:
yy336	sqlite\sqlite3.c	/^  const char* yy336;$/;"	m	union:__anon26	file:
yy384	sqlite\sqlite3.c	/^  IdList* yy384;$/;"	m	union:__anon26	file:
yy387	sqlite\sqlite3.c	/^  Select* yy387;$/;"	m	union:__anon26	file:
yy4	sqlite\sqlite3.c	/^  int yy4;$/;"	m	union:__anon26	file:
yy451	sqlite\sqlite3.c	/^  With* yy451;$/;"	m	union:__anon26	file:
yy90	sqlite\sqlite3.c	/^  struct TrigEvent yy90;$/;"	m	union:__anon26	typeref:struct:__anon26::TrigEvent	file:
yyFallback	sqlite\sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	sqlite\sqlite3.c	/^static int yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	sqlite\sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	sqlite\sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	sqlite\sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon28	file:
yyRuleName	sqlite\sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	sqlite\sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	sqlite\sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	sqlite\sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser){$/;"	f	file:
yyTokenName	sqlite\sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	sqlite\sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	sqlite\sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yyTraceShift	sqlite\sqlite3.c	/^static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){$/;"	f	file:
yyTraceShift	sqlite\sqlite3.c	141797;"	d	file:
yy_accept	sqlite\sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_action	sqlite\sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	sqlite\sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	sqlite\sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	sqlite\sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	sqlite\sqlite3.c	/^static unsigned int yy_find_shift_action($/;"	f	file:
yy_lookahead	sqlite\sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	sqlite\sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	sqlite\sqlite3.c	/^static void yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	sqlite\sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	sqlite\sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	sqlite\sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	sqlite\sqlite3.c	/^static const unsigned short int yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	sqlite\sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yycoverage	sqlite\sqlite3.c	/^static unsigned char yycoverage[YYNSTATE][YYNTOKEN];$/;"	v	file:
yyerrcnt	sqlite\sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyhwm	sqlite\sqlite3.c	/^  int yyhwm;                    \/* High-water mark of the stack *\/$/;"	m	struct:yyParser	file:
yyinit	sqlite\sqlite3.c	/^  int yyinit;$/;"	m	union:__anon26	file:
yystack	sqlite\sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystk0	sqlite\sqlite3.c	/^  yyStackEntry yystk0;          \/* First stack entry *\/$/;"	m	struct:yyParser	file:
yystksz	sqlite\sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	sqlite\sqlite3.c	139819;"	d	file:
yytestcase	sqlite\sqlite3.c	140058;"	d	file:
yytos	sqlite\sqlite3.c	/^  yyStackEntry *yytos;          \/* Pointer to top element of the stack *\/$/;"	m	struct:yyParser	file:
z	sqlite\sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::p4union	file:
z	sqlite\sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	sqlite\sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	sqlite\sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:sqlite3_value	file:
z	sqlite\sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAffSdst	sqlite\sqlite3.c	/^  char *zAffSdst;      \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
zAlias	sqlite\sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	sqlite\sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	sqlite\sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zAuthPW	sqlite\sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zAuthUser	sqlite\sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zBuf	sqlite\sqlite3.c	/^  char *zBuf;              \/* Append JSON content here *\/$/;"	m	struct:JsonString	file:
zBuffer	sqlite\sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	sqlite\sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	sqlite\sqlite3.c	/^  u8 zChunk[8];                   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zClose	sqlite\sqlite3.c	/^  const char *zClose;             \/* Closing highlight *\/$/;"	m	struct:HighlightContext	file:
zCol	sqlite\sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	sqlite\sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColAff	sqlite\sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColl	sqlite\sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zCollName	sqlite\sqlite3.c	/^  const char *zCollName;     \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:
zComment	sqlite\sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContent	sqlite\sqlite3.c	/^  char *zContent;                 \/* content table *\/ $/;"	m	struct:Fts5Config	file:
zContentExprlist	sqlite\sqlite3.c	/^  char *zContentExprlist;$/;"	m	struct:Fts5Config	file:
zContentRowid	sqlite\sqlite3.c	/^  char *zContentRowid;            \/* "content_rowid=" option value *\/ $/;"	m	struct:Fts5Config	file:
zContentTbl	sqlite\sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zCteErr	sqlite\sqlite3.c	/^    const char *zCteErr;            \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:
zData	sqlite\sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:
zDataTbl	sqlite\sqlite3.c	/^  char *zDataTbl;                 \/* Name of %_data table *\/$/;"	m	struct:Fts5Index	file:
zDataTbl	sqlite\sqlite3.c	/^  const char *zDataTbl;           \/* Name of rbu db table (or null) *\/$/;"	m	struct:RbuObjIter	file:
zDatabase	sqlite\sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	sqlite\sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	sqlite\sqlite3.c	/^  char *zDb;                      \/* Database holding FTS index (e.g. "main") *\/$/;"	m	struct:Fts5Config	file:
zDb	sqlite\sqlite3.c	/^  char *zDb;                      \/* Name of database session is attached to *\/$/;"	m	struct:sqlite3_session	file:
zDb	sqlite\sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	sqlite\sqlite3.c	/^  char *zDb;              \/* Database name *\/$/;"	m	struct:Incrblob	file:
zDb	sqlite\sqlite3.c	/^  const char *zDb;                \/* Database containing rtree table *\/$/;"	m	struct:RtreeCheck	file:
zDb	sqlite\sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	sqlite\sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDbSName	sqlite\sqlite3.c	/^  char *zDbSName;      \/* Name of this database. (schema name, not filename) *\/$/;"	m	struct:Db	file:
zDel	sqlite\sqlite3.c	/^  char *zDel;                     \/* Delete this when closing file *\/$/;"	m	struct:rbu_file	file:
zDeleteOnClose	sqlite\sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDoc	sqlite\sqlite3.c	/^  const char *zDoc;               \/* Document being tokenized *\/$/;"	m	struct:Fts5SFinder	file:
zErr	sqlite\sqlite3.c	/^  char *zErr;$/;"	m	struct:Fts5Parse	file:
zErrMsg	sqlite\sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	sqlite\sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	sqlite\sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	sqlite\sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrmsg	sqlite\sqlite3.c	/^  char *zErrmsg;                  \/* Error message if rc!=SQLITE_OK *\/$/;"	m	struct:sqlite3rbu	file:
zFilename	sqlite\sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	sqlite\sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	sqlite\sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zFts5Db	sqlite\sqlite3.c	/^  char *zFts5Db;                  \/* Db containing fts5 table *\/$/;"	m	struct:Fts5VocabTable	file:
zFts5Tbl	sqlite\sqlite3.c	/^  char *zFts5Tbl;                 \/* Name of fts5 table *\/$/;"	m	struct:Fts5VocabTable	file:
zFunc	sqlite\sqlite3.c	/^  char *zFunc;                    \/* Function name (nul-terminated) *\/$/;"	m	struct:Fts5Auxiliary	file:
zIdx	sqlite\sqlite3.c	/^  char *zIdx;$/;"	m	struct:RbuState	file:
zIdx	sqlite\sqlite3.c	/^  const char *zIdx;               \/* Name of target db index (or null) *\/$/;"	m	struct:RbuObjIter	file:
zIn	sqlite\sqlite3.c	/^  const char *zIn;                \/* Input text *\/$/;"	m	struct:HighlightContext	file:
zIndexedBy	sqlite\sqlite3.c	/^      char *zIndexedBy;    \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	union:SrcList::SrcList_item::__anon8	file:
zInput	sqlite\sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:
zInput	sqlite\sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJContent	sqlite\sqlite3.c	/^    const char *zJContent; \/* Content for INT, REAL, and STRING *\/$/;"	m	union:JsonNode::__anon30	file:
zJournal	sqlite\sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	sqlite\sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:MemJournal	file:
zJson	sqlite\sqlite3.c	/^  char *zJson;               \/* Input JSON *\/$/;"	m	struct:JsonEachCursor	file:
zJson	sqlite\sqlite3.c	/^  const char *zJson; \/* Original JSON string *\/$/;"	m	struct:JsonParse	file:
zKWText	sqlite\sqlite3.c	/^static const char zKWText[553] = {$/;"	v	file:
zLanguageid	sqlite\sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLeTerm	sqlite\sqlite3.c	/^  char *zLeTerm;                  \/* (term <= $zLeTerm) paramater, or NULL *\/$/;"	m	struct:Fts5VocabCursor	file:
zLocale	sqlite\sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zLockName	sqlite\sqlite3.c	/^  const char *zLockName; \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zMagicHeader	sqlite\sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	sqlite\sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	sqlite\sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	sqlite\sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:sqlite3_value	file:
zMask	sqlite\sqlite3.c	/^  char *zMask;                    \/* Copy of update mask used with pUpdate *\/$/;"	m	struct:RbuUpdateStmt	file:
zMatchinfo	sqlite\sqlite3.c	/^  char *zMatchinfo;$/;"	m	struct:MatchinfoBuffer	file:
zName	sqlite\sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:
zName	sqlite\sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	sqlite\sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	sqlite\sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	sqlite\sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	sqlite\sqlite3.c	/^  char *zName;                    \/* Local name of table *\/$/;"	m	struct:SessionTable	file:
zName	sqlite\sqlite3.c	/^  char *zName;                    \/* Name of FTS index *\/$/;"	m	struct:Fts5Config	file:
zName	sqlite\sqlite3.c	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus	file:
zName	sqlite\sqlite3.c	/^  char *zName;                    \/* Name of tokenizer *\/$/;"	m	struct:Fts5TokenizerModule	file:
zName	sqlite\sqlite3.c	/^  char *zName;                    \/* Value of 'name' column *\/$/;"	m	struct:StatCursor	file:
zName	sqlite\sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	sqlite\sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	sqlite\sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	sqlite\sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	sqlite\sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	sqlite\sqlite3.c	/^  char *zName;        \/* Name of the transformation *\/$/;"	m	struct:__anon12	file:
zName	sqlite\sqlite3.c	/^  char *zName;     \/* Name of this column, \\000, then the type *\/$/;"	m	struct:Column	file:
zName	sqlite\sqlite3.c	/^  const char *const zName; \/* Name of pragma *\/$/;"	m	struct:PragmaName	file:
zName	sqlite\sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	sqlite\sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	sqlite\sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	sqlite\sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	sqlite\sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	sqlite\sqlite3.c	/^  const char *zName;   \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	sqlite\sqlite3.c	/^  const char *zName;$/;"	m	struct:Fts5Enum	file:
zOpen	sqlite\sqlite3.c	/^  const char *zOpen;              \/* Opening highlight *\/$/;"	m	struct:HighlightContext	file:
zOut	sqlite\sqlite3.c	/^  char *zOut;                     \/* Output value *\/$/;"	m	struct:HighlightContext	file:
zOutput	sqlite\sqlite3.c	/^  const char *zOutput;$/;"	m	struct:PorterRule	file:
zPType	sqlite\sqlite3.c	/^    const char *zPType; \/* Pointer type when MEM_Term|MEM_Subtype|MEM_Null *\/$/;"	m	union:sqlite3_value::MemValue	file:
zPagetype	sqlite\sqlite3.c	/^  char *zPagetype;                \/* Value of 'pagetype' column *\/$/;"	m	struct:StatCursor	file:
zPath	sqlite\sqlite3.c	/^  char *zPath;                    \/* Path to this page *\/$/;"	m	struct:StatPage	file:
zPath	sqlite\sqlite3.c	/^  char *zPath;                    \/* Value of 'path' column *\/$/;"	m	struct:StatCursor	file:
zPath	sqlite\sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	sqlite\sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPfx	sqlite\sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:
zPool	sqlite\sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zRank	sqlite\sqlite3.c	/^  char *zRank;                    \/* Custom rank function *\/$/;"	m	struct:Fts5Cursor	file:
zRank	sqlite\sqlite3.c	/^  char *zRank;                    \/* Name of rank function *\/$/;"	m	struct:Fts5Config	file:
zRankArgs	sqlite\sqlite3.c	/^  char *zRankArgs;                \/* Arguments to rank function *\/$/;"	m	struct:Fts5Config	file:
zRankArgs	sqlite\sqlite3.c	/^  char *zRankArgs;                \/* Custom rank function args *\/$/;"	m	struct:Fts5Cursor	file:
zRbu	sqlite\sqlite3.c	/^  char *zRbu;                     \/* Path to rbu db *\/$/;"	m	struct:sqlite3rbu	file:
zReadExprlist	sqlite\sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zReport	sqlite\sqlite3.c	/^  char *zReport;                  \/* Message to report *\/$/;"	m	struct:RtreeCheck	file:
zRoot	sqlite\sqlite3.c	/^  char *zRoot;               \/* Path by which to filter zJson *\/$/;"	m	struct:JsonEachCursor	file:
zSegmentsTbl	sqlite\sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSelName	sqlite\sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:
zSpace	sqlite\sqlite3.c	/^  char zSpace[100];        \/* Initial static space *\/$/;"	m	struct:JsonString	file:
zSpan	sqlite\sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSpan	sqlite\sqlite3.c	/^  char *zSpan;         \/* Original SQL text of this command *\/$/;"	m	struct:TriggerStep	file:
zSql	sqlite\sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zState	sqlite\sqlite3.c	/^  char *zState;                   \/* Path to state db (or NULL if zRbu) *\/$/;"	m	struct:sqlite3rbu	file:
zStateDb	sqlite\sqlite3.c	/^  char zStateDb[5];               \/* Db name for state ("stat" or "main") *\/$/;"	m	struct:sqlite3rbu	file:
zStop	sqlite\sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zSuffix	sqlite\sqlite3.c	/^  const char *zSuffix;$/;"	m	struct:PorterRule	file:
zTab	sqlite\sqlite3.c	/^  char *zTab;                     \/* Current table *\/$/;"	m	struct:sqlite3_changeset_iter	file:
zTab	sqlite\sqlite3.c	/^  const char *zTab;               \/* Name of rtree table *\/$/;"	m	struct:RtreeCheck	file:
zTail	sqlite\sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTarget	sqlite\sqlite3.c	/^  char *zTarget;                  \/* Path to target db *\/$/;"	m	struct:sqlite3rbu	file:
zTarget	sqlite\sqlite3.c	/^  char *zTarget;       \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
zTbl	sqlite\sqlite3.c	/^  char *zTbl;$/;"	m	struct:RbuState	file:
zTbl	sqlite\sqlite3.c	/^  const char *zTbl;               \/* Name of target db table *\/$/;"	m	struct:RbuObjIter	file:
zTerm	sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	sqlite\sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	sqlite\sqlite3.c	/^  char *zTerm;                    \/* nul-terminated term *\/$/;"	m	struct:Fts5ExprTerm	file:
zTerm	sqlite\sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	sqlite\sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	sqlite\sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon13	file:
zTo	sqlite\sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	sqlite\sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon3	file:
zToken	sqlite\sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	sqlite\sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	sqlite\sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:
zType	sqlite\sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zVfsName	sqlite\sqlite3.c	/^  const char *zVfsName;           \/* Name of automatically created rbu vfs *\/$/;"	m	struct:sqlite3rbu	file:
zWal	sqlite\sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWal	sqlite\sqlite3.c	/^  const char *zWal;               \/* Wal filename for this main db file *\/$/;"	m	struct:rbu_file	file:
zWalName	sqlite\sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	sqlite\sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	sqlite\sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	sqlite\sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	sqlite\sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
FTS5_TOKENIZE_AUX	sqlite\sqlite3.h	11123;"	d
FTS5_TOKENIZE_DOCUMENT	sqlite\sqlite3.h	11122;"	d
FTS5_TOKENIZE_PREFIX	sqlite\sqlite3.h	11121;"	d
FTS5_TOKENIZE_QUERY	sqlite\sqlite3.h	11120;"	d
FTS5_TOKEN_COLOCATED	sqlite\sqlite3.h	11127;"	d
FULLY_WITHIN	sqlite\sqlite3.h	9002;"	d
Fts5Context	sqlite\sqlite3.h	/^typedef struct Fts5Context Fts5Context;$/;"	t	typeref:struct:Fts5Context
Fts5ExtensionApi	sqlite\sqlite3.h	/^struct Fts5ExtensionApi {$/;"	s
Fts5ExtensionApi	sqlite\sqlite3.h	/^typedef struct Fts5ExtensionApi Fts5ExtensionApi;$/;"	t	typeref:struct:Fts5ExtensionApi
Fts5PhraseIter	sqlite\sqlite3.h	/^struct Fts5PhraseIter {$/;"	s
Fts5PhraseIter	sqlite\sqlite3.h	/^typedef struct Fts5PhraseIter Fts5PhraseIter;$/;"	t	typeref:struct:Fts5PhraseIter
Fts5Tokenizer	sqlite\sqlite3.h	/^typedef struct Fts5Tokenizer Fts5Tokenizer;$/;"	t	typeref:struct:Fts5Tokenizer
NOT_WITHIN	sqlite\sqlite3.h	9000;"	d
PARTLY_WITHIN	sqlite\sqlite3.h	9001;"	d
SQLITE3_H	sqlite\sqlite3.h	34;"	d
SQLITE3_TEXT	sqlite\sqlite3.h	4291;"	d
SQLITE_ABORT	sqlite\sqlite3.h	427;"	d
SQLITE_ABORT_ROLLBACK	sqlite\sqlite3.h	520;"	d
SQLITE_ACCESS_EXISTS	sqlite\sqlite3.h	1361;"	d
SQLITE_ACCESS_READ	sqlite\sqlite3.h	1363;"	d
SQLITE_ACCESS_READWRITE	sqlite\sqlite3.h	1362;"	d
SQLITE_ALTER_TABLE	sqlite\sqlite3.h	2854;"	d
SQLITE_ANALYZE	sqlite\sqlite3.h	2856;"	d
SQLITE_ANY	sqlite\sqlite3.h	4694;"	d
SQLITE_API	sqlite\sqlite3.h	52;"	d
SQLITE_APICALL	sqlite\sqlite3.h	58;"	d
SQLITE_ATTACH	sqlite\sqlite3.h	2852;"	d
SQLITE_AUTH	sqlite\sqlite3.h	446;"	d
SQLITE_AUTH_USER	sqlite\sqlite3.h	534;"	d
SQLITE_BLOB	sqlite\sqlite3.h	4284;"	d
SQLITE_BUSY	sqlite\sqlite3.h	428;"	d
SQLITE_BUSY_RECOVERY	sqlite\sqlite3.h	507;"	d
SQLITE_BUSY_SNAPSHOT	sqlite\sqlite3.h	508;"	d
SQLITE_CALLBACK	sqlite\sqlite3.h	64;"	d
SQLITE_CANTOPEN	sqlite\sqlite3.h	437;"	d
SQLITE_CANTOPEN_CONVPATH	sqlite\sqlite3.h	512;"	d
SQLITE_CANTOPEN_FULLPATH	sqlite\sqlite3.h	511;"	d
SQLITE_CANTOPEN_ISDIR	sqlite\sqlite3.h	510;"	d
SQLITE_CANTOPEN_NOTEMPDIR	sqlite\sqlite3.h	509;"	d
SQLITE_CDECL	sqlite\sqlite3.h	55;"	d
SQLITE_CHANGESETAPPLY_NOSAVEPOINT	sqlite\sqlite3.h	10166;"	d
SQLITE_CHANGESET_ABORT	sqlite\sqlite3.h	10262;"	d
SQLITE_CHANGESET_CONFLICT	sqlite\sqlite3.h	10225;"	d
SQLITE_CHANGESET_CONSTRAINT	sqlite\sqlite3.h	10226;"	d
SQLITE_CHANGESET_DATA	sqlite\sqlite3.h	10223;"	d
SQLITE_CHANGESET_FOREIGN_KEY	sqlite\sqlite3.h	10227;"	d
SQLITE_CHANGESET_NOTFOUND	sqlite\sqlite3.h	10224;"	d
SQLITE_CHANGESET_OMIT	sqlite\sqlite3.h	10260;"	d
SQLITE_CHANGESET_REPLACE	sqlite\sqlite3.h	10261;"	d
SQLITE_CHECKPOINT_FULL	sqlite\sqlite3.h	8205;"	d
SQLITE_CHECKPOINT_PASSIVE	sqlite\sqlite3.h	8204;"	d
SQLITE_CHECKPOINT_RESTART	sqlite\sqlite3.h	8206;"	d
SQLITE_CHECKPOINT_TRUNCATE	sqlite\sqlite3.h	8207;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite\sqlite3.h	1954;"	d
SQLITE_CONFIG_GETMALLOC	sqlite\sqlite3.h	1939;"	d
SQLITE_CONFIG_GETMUTEX	sqlite\sqlite3.h	1945;"	d
SQLITE_CONFIG_GETPCACHE	sqlite\sqlite3.h	1949;"	d
SQLITE_CONFIG_GETPCACHE2	sqlite\sqlite3.h	1953;"	d
SQLITE_CONFIG_HEAP	sqlite\sqlite3.h	1942;"	d
SQLITE_CONFIG_LOG	sqlite\sqlite3.h	1950;"	d
SQLITE_CONFIG_LOOKASIDE	sqlite\sqlite3.h	1947;"	d
SQLITE_CONFIG_MALLOC	sqlite\sqlite3.h	1938;"	d
SQLITE_CONFIG_MEMSTATUS	sqlite\sqlite3.h	1943;"	d
SQLITE_CONFIG_MMAP_SIZE	sqlite\sqlite3.h	1956;"	d
SQLITE_CONFIG_MULTITHREAD	sqlite\sqlite3.h	1936;"	d
SQLITE_CONFIG_MUTEX	sqlite\sqlite3.h	1944;"	d
SQLITE_CONFIG_PAGECACHE	sqlite\sqlite3.h	1941;"	d
SQLITE_CONFIG_PCACHE	sqlite\sqlite3.h	1948;"	d
SQLITE_CONFIG_PCACHE2	sqlite\sqlite3.h	1952;"	d
SQLITE_CONFIG_PCACHE_HDRSZ	sqlite\sqlite3.h	1958;"	d
SQLITE_CONFIG_PMASZ	sqlite\sqlite3.h	1959;"	d
SQLITE_CONFIG_SCRATCH	sqlite\sqlite3.h	1940;"	d
SQLITE_CONFIG_SERIALIZED	sqlite\sqlite3.h	1937;"	d
SQLITE_CONFIG_SINGLETHREAD	sqlite\sqlite3.h	1935;"	d
SQLITE_CONFIG_SMALL_MALLOC	sqlite\sqlite3.h	1961;"	d
SQLITE_CONFIG_SQLLOG	sqlite\sqlite3.h	1955;"	d
SQLITE_CONFIG_STMTJRNL_SPILL	sqlite\sqlite3.h	1960;"	d
SQLITE_CONFIG_URI	sqlite\sqlite3.h	1951;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite\sqlite3.h	1957;"	d
SQLITE_CONSTRAINT	sqlite\sqlite3.h	442;"	d
SQLITE_CONSTRAINT_CHECK	sqlite\sqlite3.h	521;"	d
SQLITE_CONSTRAINT_COMMITHOOK	sqlite\sqlite3.h	522;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite\sqlite3.h	523;"	d
SQLITE_CONSTRAINT_FUNCTION	sqlite\sqlite3.h	524;"	d
SQLITE_CONSTRAINT_NOTNULL	sqlite\sqlite3.h	525;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite\sqlite3.h	526;"	d
SQLITE_CONSTRAINT_ROWID	sqlite\sqlite3.h	530;"	d
SQLITE_CONSTRAINT_TRIGGER	sqlite\sqlite3.h	527;"	d
SQLITE_CONSTRAINT_UNIQUE	sqlite\sqlite3.h	528;"	d
SQLITE_CONSTRAINT_VTAB	sqlite\sqlite3.h	529;"	d
SQLITE_COPY	sqlite\sqlite3.h	2861;"	d
SQLITE_CORRUPT	sqlite\sqlite3.h	434;"	d
SQLITE_CORRUPT_VTAB	sqlite\sqlite3.h	513;"	d
SQLITE_CREATE_INDEX	sqlite\sqlite3.h	2829;"	d
SQLITE_CREATE_TABLE	sqlite\sqlite3.h	2830;"	d
SQLITE_CREATE_TEMP_INDEX	sqlite\sqlite3.h	2831;"	d
SQLITE_CREATE_TEMP_TABLE	sqlite\sqlite3.h	2832;"	d
SQLITE_CREATE_TEMP_TRIGGER	sqlite\sqlite3.h	2833;"	d
SQLITE_CREATE_TEMP_VIEW	sqlite\sqlite3.h	2834;"	d
SQLITE_CREATE_TRIGGER	sqlite\sqlite3.h	2835;"	d
SQLITE_CREATE_VIEW	sqlite\sqlite3.h	2836;"	d
SQLITE_CREATE_VTABLE	sqlite\sqlite3.h	2857;"	d
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite\sqlite3.h	2102;"	d
SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER	sqlite\sqlite3.h	2104;"	d
SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION	sqlite\sqlite3.h	2105;"	d
SQLITE_DBCONFIG_ENABLE_QPSG	sqlite\sqlite3.h	2107;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite\sqlite3.h	2103;"	d
SQLITE_DBCONFIG_LOOKASIDE	sqlite\sqlite3.h	2101;"	d
SQLITE_DBCONFIG_MAINDBNAME	sqlite\sqlite3.h	2100;"	d
SQLITE_DBCONFIG_MAX	sqlite\sqlite3.h	2109;"	d
SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE	sqlite\sqlite3.h	2106;"	d
SQLITE_DBCONFIG_TRIGGER_EQP	sqlite\sqlite3.h	2108;"	d
SQLITE_DBSTATUS_CACHE_HIT	sqlite\sqlite3.h	7272;"	d
SQLITE_DBSTATUS_CACHE_MISS	sqlite\sqlite3.h	7273;"	d
SQLITE_DBSTATUS_CACHE_SPILL	sqlite\sqlite3.h	7277;"	d
SQLITE_DBSTATUS_CACHE_USED	sqlite\sqlite3.h	7266;"	d
SQLITE_DBSTATUS_CACHE_USED_SHARED	sqlite\sqlite3.h	7276;"	d
SQLITE_DBSTATUS_CACHE_WRITE	sqlite\sqlite3.h	7274;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite\sqlite3.h	7275;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite\sqlite3.h	7269;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite\sqlite3.h	7271;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite\sqlite3.h	7270;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite\sqlite3.h	7265;"	d
SQLITE_DBSTATUS_MAX	sqlite\sqlite3.h	7278;"	d
SQLITE_DBSTATUS_SCHEMA_USED	sqlite\sqlite3.h	7267;"	d
SQLITE_DBSTATUS_STMT_USED	sqlite\sqlite3.h	7268;"	d
SQLITE_DELETE	sqlite\sqlite3.h	2837;"	d
SQLITE_DENY	sqlite\sqlite3.h	2806;"	d
SQLITE_DEPRECATED	sqlite\sqlite3.h	83;"	d
SQLITE_DESERIALIZE_FREEONCLOSE	sqlite\sqlite3.h	8876;"	d
SQLITE_DESERIALIZE_READONLY	sqlite\sqlite3.h	8878;"	d
SQLITE_DESERIALIZE_RESIZEABLE	sqlite\sqlite3.h	8877;"	d
SQLITE_DETACH	sqlite\sqlite3.h	2853;"	d
SQLITE_DETERMINISTIC	sqlite\sqlite3.h	4705;"	d
SQLITE_DONE	sqlite\sqlite3.h	453;"	d
SQLITE_DROP_INDEX	sqlite\sqlite3.h	2838;"	d
SQLITE_DROP_TABLE	sqlite\sqlite3.h	2839;"	d
SQLITE_DROP_TEMP_INDEX	sqlite\sqlite3.h	2840;"	d
SQLITE_DROP_TEMP_TABLE	sqlite\sqlite3.h	2841;"	d
SQLITE_DROP_TEMP_TRIGGER	sqlite\sqlite3.h	2842;"	d
SQLITE_DROP_TEMP_VIEW	sqlite\sqlite3.h	2843;"	d
SQLITE_DROP_TRIGGER	sqlite\sqlite3.h	2844;"	d
SQLITE_DROP_VIEW	sqlite\sqlite3.h	2845;"	d
SQLITE_DROP_VTABLE	sqlite\sqlite3.h	2858;"	d
SQLITE_EMPTY	sqlite\sqlite3.h	439;"	d
SQLITE_ERROR	sqlite\sqlite3.h	424;"	d
SQLITE_ERROR_MISSING_COLLSEQ	sqlite\sqlite3.h	473;"	d
SQLITE_ERROR_RETRY	sqlite\sqlite3.h	474;"	d
SQLITE_EXPERIMENTAL	sqlite\sqlite3.h	84;"	d
SQLITE_EXTERN	sqlite\sqlite3.h	49;"	d
SQLITE_FAIL	sqlite\sqlite3.h	8326;"	d
SQLITE_FCNTL_BEGIN_ATOMIC_WRITE	sqlite\sqlite3.h	1104;"	d
SQLITE_FCNTL_BUSYHANDLER	sqlite\sqlite3.h	1089;"	d
SQLITE_FCNTL_CHUNK_SIZE	sqlite\sqlite3.h	1080;"	d
SQLITE_FCNTL_COMMIT_ATOMIC_WRITE	sqlite\sqlite3.h	1105;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite\sqlite3.h	1095;"	d
SQLITE_FCNTL_FILE_POINTER	sqlite\sqlite3.h	1081;"	d
SQLITE_FCNTL_GET_LOCKPROXYFILE	sqlite\sqlite3.h	1076;"	d
SQLITE_FCNTL_HAS_MOVED	sqlite\sqlite3.h	1093;"	d
SQLITE_FCNTL_JOURNAL_POINTER	sqlite\sqlite3.h	1101;"	d
SQLITE_FCNTL_LAST_ERRNO	sqlite\sqlite3.h	1078;"	d
SQLITE_FCNTL_LOCKSTATE	sqlite\sqlite3.h	1075;"	d
SQLITE_FCNTL_LOCK_TIMEOUT	sqlite\sqlite3.h	1107;"	d
SQLITE_FCNTL_MMAP_SIZE	sqlite\sqlite3.h	1091;"	d
SQLITE_FCNTL_OVERWRITE	sqlite\sqlite3.h	1085;"	d
SQLITE_FCNTL_PDB	sqlite\sqlite3.h	1103;"	d
SQLITE_FCNTL_PERSIST_WAL	sqlite\sqlite3.h	1084;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite\sqlite3.h	1087;"	d
SQLITE_FCNTL_PRAGMA	sqlite\sqlite3.h	1088;"	d
SQLITE_FCNTL_RBU	sqlite\sqlite3.h	1099;"	d
SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE	sqlite\sqlite3.h	1106;"	d
SQLITE_FCNTL_SET_LOCKPROXYFILE	sqlite\sqlite3.h	1077;"	d
SQLITE_FCNTL_SIZE_HINT	sqlite\sqlite3.h	1079;"	d
SQLITE_FCNTL_SYNC	sqlite\sqlite3.h	1094;"	d
SQLITE_FCNTL_SYNC_OMITTED	sqlite\sqlite3.h	1082;"	d
SQLITE_FCNTL_TEMPFILENAME	sqlite\sqlite3.h	1090;"	d
SQLITE_FCNTL_TRACE	sqlite\sqlite3.h	1092;"	d
SQLITE_FCNTL_VFSNAME	sqlite\sqlite3.h	1086;"	d
SQLITE_FCNTL_VFS_POINTER	sqlite\sqlite3.h	1100;"	d
SQLITE_FCNTL_WAL_BLOCK	sqlite\sqlite3.h	1097;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite\sqlite3.h	1083;"	d
SQLITE_FCNTL_WIN32_GET_HANDLE	sqlite\sqlite3.h	1102;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite\sqlite3.h	1096;"	d
SQLITE_FCNTL_ZIPVFS	sqlite\sqlite3.h	1098;"	d
SQLITE_FLOAT	sqlite\sqlite3.h	4283;"	d
SQLITE_FORMAT	sqlite\sqlite3.h	447;"	d
SQLITE_FULL	sqlite\sqlite3.h	436;"	d
SQLITE_FUNCTION	sqlite\sqlite3.h	2859;"	d
SQLITE_GET_LOCKPROXYFILE	sqlite\sqlite3.h	1110;"	d
SQLITE_IGNORE	sqlite\sqlite3.h	2807;"	d
SQLITE_INDEX_CONSTRAINT_EQ	sqlite\sqlite3.h	6238;"	d
SQLITE_INDEX_CONSTRAINT_GE	sqlite\sqlite3.h	6242;"	d
SQLITE_INDEX_CONSTRAINT_GLOB	sqlite\sqlite3.h	6245;"	d
SQLITE_INDEX_CONSTRAINT_GT	sqlite\sqlite3.h	6239;"	d
SQLITE_INDEX_CONSTRAINT_IS	sqlite\sqlite3.h	6251;"	d
SQLITE_INDEX_CONSTRAINT_ISNOT	sqlite\sqlite3.h	6248;"	d
SQLITE_INDEX_CONSTRAINT_ISNOTNULL	sqlite\sqlite3.h	6249;"	d
SQLITE_INDEX_CONSTRAINT_ISNULL	sqlite\sqlite3.h	6250;"	d
SQLITE_INDEX_CONSTRAINT_LE	sqlite\sqlite3.h	6240;"	d
SQLITE_INDEX_CONSTRAINT_LIKE	sqlite\sqlite3.h	6244;"	d
SQLITE_INDEX_CONSTRAINT_LT	sqlite\sqlite3.h	6241;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite\sqlite3.h	6243;"	d
SQLITE_INDEX_CONSTRAINT_NE	sqlite\sqlite3.h	6247;"	d
SQLITE_INDEX_CONSTRAINT_REGEXP	sqlite\sqlite3.h	6246;"	d
SQLITE_INDEX_SCAN_UNIQUE	sqlite\sqlite3.h	6228;"	d
SQLITE_INSERT	sqlite\sqlite3.h	2846;"	d
SQLITE_INTEGER	sqlite\sqlite3.h	4282;"	d
SQLITE_INTERNAL	sqlite\sqlite3.h	425;"	d
SQLITE_INTERRUPT	sqlite\sqlite3.h	432;"	d
SQLITE_IOCAP_ATOMIC	sqlite\sqlite3.h	600;"	d
SQLITE_IOCAP_ATOMIC16K	sqlite\sqlite3.h	606;"	d
SQLITE_IOCAP_ATOMIC1K	sqlite\sqlite3.h	602;"	d
SQLITE_IOCAP_ATOMIC2K	sqlite\sqlite3.h	603;"	d
SQLITE_IOCAP_ATOMIC32K	sqlite\sqlite3.h	607;"	d
SQLITE_IOCAP_ATOMIC4K	sqlite\sqlite3.h	604;"	d
SQLITE_IOCAP_ATOMIC512	sqlite\sqlite3.h	601;"	d
SQLITE_IOCAP_ATOMIC64K	sqlite\sqlite3.h	608;"	d
SQLITE_IOCAP_ATOMIC8K	sqlite\sqlite3.h	605;"	d
SQLITE_IOCAP_BATCH_ATOMIC	sqlite\sqlite3.h	614;"	d
SQLITE_IOCAP_IMMUTABLE	sqlite\sqlite3.h	613;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite\sqlite3.h	612;"	d
SQLITE_IOCAP_SAFE_APPEND	sqlite\sqlite3.h	609;"	d
SQLITE_IOCAP_SEQUENTIAL	sqlite\sqlite3.h	610;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite\sqlite3.h	611;"	d
SQLITE_IOERR	sqlite\sqlite3.h	433;"	d
SQLITE_IOERR_ACCESS	sqlite\sqlite3.h	487;"	d
SQLITE_IOERR_AUTH	sqlite\sqlite3.h	502;"	d
SQLITE_IOERR_BEGIN_ATOMIC	sqlite\sqlite3.h	503;"	d
SQLITE_IOERR_BLOCKED	sqlite\sqlite3.h	485;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite\sqlite3.h	488;"	d
SQLITE_IOERR_CLOSE	sqlite\sqlite3.h	490;"	d
SQLITE_IOERR_COMMIT_ATOMIC	sqlite\sqlite3.h	504;"	d
SQLITE_IOERR_CONVPATH	sqlite\sqlite3.h	500;"	d
SQLITE_IOERR_DELETE	sqlite\sqlite3.h	484;"	d
SQLITE_IOERR_DELETE_NOENT	sqlite\sqlite3.h	497;"	d
SQLITE_IOERR_DIR_CLOSE	sqlite\sqlite3.h	491;"	d
SQLITE_IOERR_DIR_FSYNC	sqlite\sqlite3.h	479;"	d
SQLITE_IOERR_FSTAT	sqlite\sqlite3.h	481;"	d
SQLITE_IOERR_FSYNC	sqlite\sqlite3.h	478;"	d
SQLITE_IOERR_GETTEMPPATH	sqlite\sqlite3.h	499;"	d
SQLITE_IOERR_LOCK	sqlite\sqlite3.h	489;"	d
SQLITE_IOERR_MMAP	sqlite\sqlite3.h	498;"	d
SQLITE_IOERR_NOMEM	sqlite\sqlite3.h	486;"	d
SQLITE_IOERR_RDLOCK	sqlite\sqlite3.h	483;"	d
SQLITE_IOERR_READ	sqlite\sqlite3.h	475;"	d
SQLITE_IOERR_ROLLBACK_ATOMIC	sqlite\sqlite3.h	505;"	d
SQLITE_IOERR_SEEK	sqlite\sqlite3.h	496;"	d
SQLITE_IOERR_SHMLOCK	sqlite\sqlite3.h	494;"	d
SQLITE_IOERR_SHMMAP	sqlite\sqlite3.h	495;"	d
SQLITE_IOERR_SHMOPEN	sqlite\sqlite3.h	492;"	d
SQLITE_IOERR_SHMSIZE	sqlite\sqlite3.h	493;"	d
SQLITE_IOERR_SHORT_READ	sqlite\sqlite3.h	476;"	d
SQLITE_IOERR_TRUNCATE	sqlite\sqlite3.h	480;"	d
SQLITE_IOERR_UNLOCK	sqlite\sqlite3.h	482;"	d
SQLITE_IOERR_VNODE	sqlite\sqlite3.h	501;"	d
SQLITE_IOERR_WRITE	sqlite\sqlite3.h	477;"	d
SQLITE_LAST_ERRNO	sqlite\sqlite3.h	1112;"	d
SQLITE_LIMIT_ATTACHED	sqlite\sqlite3.h	3492;"	d
SQLITE_LIMIT_COLUMN	sqlite\sqlite3.h	3487;"	d
SQLITE_LIMIT_COMPOUND_SELECT	sqlite\sqlite3.h	3489;"	d
SQLITE_LIMIT_EXPR_DEPTH	sqlite\sqlite3.h	3488;"	d
SQLITE_LIMIT_FUNCTION_ARG	sqlite\sqlite3.h	3491;"	d
SQLITE_LIMIT_LENGTH	sqlite\sqlite3.h	3485;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite\sqlite3.h	3493;"	d
SQLITE_LIMIT_SQL_LENGTH	sqlite\sqlite3.h	3486;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite\sqlite3.h	3495;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite\sqlite3.h	3494;"	d
SQLITE_LIMIT_VDBE_OP	sqlite\sqlite3.h	3490;"	d
SQLITE_LIMIT_WORKER_THREADS	sqlite\sqlite3.h	3496;"	d
SQLITE_LOCKED	sqlite\sqlite3.h	429;"	d
SQLITE_LOCKED_SHAREDCACHE	sqlite\sqlite3.h	506;"	d
SQLITE_LOCK_EXCLUSIVE	sqlite\sqlite3.h	627;"	d
SQLITE_LOCK_NONE	sqlite\sqlite3.h	623;"	d
SQLITE_LOCK_PENDING	sqlite\sqlite3.h	626;"	d
SQLITE_LOCK_RESERVED	sqlite\sqlite3.h	625;"	d
SQLITE_LOCK_SHARED	sqlite\sqlite3.h	624;"	d
SQLITE_MISMATCH	sqlite\sqlite3.h	443;"	d
SQLITE_MISUSE	sqlite\sqlite3.h	444;"	d
SQLITE_MUTEX_FAST	sqlite\sqlite3.h	6896;"	d
SQLITE_MUTEX_RECURSIVE	sqlite\sqlite3.h	6897;"	d
SQLITE_MUTEX_STATIC_APP1	sqlite\sqlite3.h	6906;"	d
SQLITE_MUTEX_STATIC_APP2	sqlite\sqlite3.h	6907;"	d
SQLITE_MUTEX_STATIC_APP3	sqlite\sqlite3.h	6908;"	d
SQLITE_MUTEX_STATIC_LRU	sqlite\sqlite3.h	6903;"	d
SQLITE_MUTEX_STATIC_LRU2	sqlite\sqlite3.h	6904;"	d
SQLITE_MUTEX_STATIC_MASTER	sqlite\sqlite3.h	6898;"	d
SQLITE_MUTEX_STATIC_MEM	sqlite\sqlite3.h	6899;"	d
SQLITE_MUTEX_STATIC_MEM2	sqlite\sqlite3.h	6900;"	d
SQLITE_MUTEX_STATIC_OPEN	sqlite\sqlite3.h	6901;"	d
SQLITE_MUTEX_STATIC_PMEM	sqlite\sqlite3.h	6905;"	d
SQLITE_MUTEX_STATIC_PRNG	sqlite\sqlite3.h	6902;"	d
SQLITE_MUTEX_STATIC_VFS1	sqlite\sqlite3.h	6909;"	d
SQLITE_MUTEX_STATIC_VFS2	sqlite\sqlite3.h	6910;"	d
SQLITE_MUTEX_STATIC_VFS3	sqlite\sqlite3.h	6911;"	d
SQLITE_NOLFS	sqlite\sqlite3.h	445;"	d
SQLITE_NOMEM	sqlite\sqlite3.h	430;"	d
SQLITE_NOTADB	sqlite\sqlite3.h	449;"	d
SQLITE_NOTFOUND	sqlite\sqlite3.h	435;"	d
SQLITE_NOTICE	sqlite\sqlite3.h	450;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite\sqlite3.h	532;"	d
SQLITE_NOTICE_RECOVER_WAL	sqlite\sqlite3.h	531;"	d
SQLITE_NULL	sqlite\sqlite3.h	4285;"	d
SQLITE_OK	sqlite\sqlite3.h	422;"	d
SQLITE_OK_LOAD_PERMANENTLY	sqlite\sqlite3.h	535;"	d
SQLITE_OPEN_AUTOPROXY	sqlite\sqlite3.h	549;"	d
SQLITE_OPEN_CREATE	sqlite\sqlite3.h	546;"	d
SQLITE_OPEN_DELETEONCLOSE	sqlite\sqlite3.h	547;"	d
SQLITE_OPEN_EXCLUSIVE	sqlite\sqlite3.h	548;"	d
SQLITE_OPEN_FULLMUTEX	sqlite\sqlite3.h	560;"	d
SQLITE_OPEN_MAIN_DB	sqlite\sqlite3.h	552;"	d
SQLITE_OPEN_MAIN_JOURNAL	sqlite\sqlite3.h	555;"	d
SQLITE_OPEN_MASTER_JOURNAL	sqlite\sqlite3.h	558;"	d
SQLITE_OPEN_MEMORY	sqlite\sqlite3.h	551;"	d
SQLITE_OPEN_NOMUTEX	sqlite\sqlite3.h	559;"	d
SQLITE_OPEN_PRIVATECACHE	sqlite\sqlite3.h	562;"	d
SQLITE_OPEN_READONLY	sqlite\sqlite3.h	544;"	d
SQLITE_OPEN_READWRITE	sqlite\sqlite3.h	545;"	d
SQLITE_OPEN_SHAREDCACHE	sqlite\sqlite3.h	561;"	d
SQLITE_OPEN_SUBJOURNAL	sqlite\sqlite3.h	557;"	d
SQLITE_OPEN_TEMP_DB	sqlite\sqlite3.h	553;"	d
SQLITE_OPEN_TEMP_JOURNAL	sqlite\sqlite3.h	556;"	d
SQLITE_OPEN_TRANSIENT_DB	sqlite\sqlite3.h	554;"	d
SQLITE_OPEN_URI	sqlite\sqlite3.h	550;"	d
SQLITE_OPEN_WAL	sqlite\sqlite3.h	563;"	d
SQLITE_PERM	sqlite\sqlite3.h	426;"	d
SQLITE_PRAGMA	sqlite\sqlite3.h	2847;"	d
SQLITE_PREPARE_PERSISTENT	sqlite\sqlite3.h	3520;"	d
SQLITE_PROTOCOL	sqlite\sqlite3.h	438;"	d
SQLITE_RANGE	sqlite\sqlite3.h	448;"	d
SQLITE_READ	sqlite\sqlite3.h	2848;"	d
SQLITE_READONLY	sqlite\sqlite3.h	431;"	d
SQLITE_READONLY_CANTINIT	sqlite\sqlite3.h	518;"	d
SQLITE_READONLY_CANTLOCK	sqlite\sqlite3.h	515;"	d
SQLITE_READONLY_DBMOVED	sqlite\sqlite3.h	517;"	d
SQLITE_READONLY_DIRECTORY	sqlite\sqlite3.h	519;"	d
SQLITE_READONLY_RECOVERY	sqlite\sqlite3.h	514;"	d
SQLITE_READONLY_ROLLBACK	sqlite\sqlite3.h	516;"	d
SQLITE_RECURSIVE	sqlite\sqlite3.h	2862;"	d
SQLITE_REINDEX	sqlite\sqlite3.h	2855;"	d
SQLITE_REPLACE	sqlite\sqlite3.h	8328;"	d
SQLITE_ROLLBACK	sqlite\sqlite3.h	8324;"	d
SQLITE_ROW	sqlite\sqlite3.h	452;"	d
SQLITE_SAVEPOINT	sqlite\sqlite3.h	2860;"	d
SQLITE_SCANSTAT_EST	sqlite\sqlite3.h	8379;"	d
SQLITE_SCANSTAT_EXPLAIN	sqlite\sqlite3.h	8381;"	d
SQLITE_SCANSTAT_NAME	sqlite\sqlite3.h	8380;"	d
SQLITE_SCANSTAT_NLOOP	sqlite\sqlite3.h	8377;"	d
SQLITE_SCANSTAT_NVISIT	sqlite\sqlite3.h	8378;"	d
SQLITE_SCANSTAT_SELECTID	sqlite\sqlite3.h	8382;"	d
SQLITE_SCHEMA	sqlite\sqlite3.h	440;"	d
SQLITE_SELECT	sqlite\sqlite3.h	2849;"	d
SQLITE_SERIALIZE_NOCOPY	sqlite\sqlite3.h	8815;"	d
SQLITE_SET_LOCKPROXYFILE	sqlite\sqlite3.h	1111;"	d
SQLITE_SHM_EXCLUSIVE	sqlite\sqlite3.h	1390;"	d
SQLITE_SHM_LOCK	sqlite\sqlite3.h	1388;"	d
SQLITE_SHM_NLOCK	sqlite\sqlite3.h	1400;"	d
SQLITE_SHM_SHARED	sqlite\sqlite3.h	1389;"	d
SQLITE_SHM_UNLOCK	sqlite\sqlite3.h	1387;"	d
SQLITE_SOURCE_ID	sqlite\sqlite3.h	128;"	d
SQLITE_STATIC	sqlite\sqlite3.h	5018;"	d
SQLITE_STATUS_MALLOC_COUNT	sqlite\sqlite3.h	7127;"	d
SQLITE_STATUS_MALLOC_SIZE	sqlite\sqlite3.h	7123;"	d
SQLITE_STATUS_MEMORY_USED	sqlite\sqlite3.h	7118;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite\sqlite3.h	7120;"	d
SQLITE_STATUS_PAGECACHE_SIZE	sqlite\sqlite3.h	7125;"	d
SQLITE_STATUS_PAGECACHE_USED	sqlite\sqlite3.h	7119;"	d
SQLITE_STATUS_PARSER_STACK	sqlite\sqlite3.h	7124;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite\sqlite3.h	7122;"	d
SQLITE_STATUS_SCRATCH_SIZE	sqlite\sqlite3.h	7126;"	d
SQLITE_STATUS_SCRATCH_USED	sqlite\sqlite3.h	7121;"	d
SQLITE_STDCALL	sqlite\sqlite3.h	61;"	d
SQLITE_STMTSTATUS_AUTOINDEX	sqlite\sqlite3.h	7364;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite\sqlite3.h	7362;"	d
SQLITE_STMTSTATUS_MEMUSED	sqlite\sqlite3.h	7368;"	d
SQLITE_STMTSTATUS_REPREPARE	sqlite\sqlite3.h	7366;"	d
SQLITE_STMTSTATUS_RUN	sqlite\sqlite3.h	7367;"	d
SQLITE_STMTSTATUS_SORT	sqlite\sqlite3.h	7363;"	d
SQLITE_STMTSTATUS_VM_STEP	sqlite\sqlite3.h	7365;"	d
SQLITE_SYNC_DATAONLY	sqlite\sqlite3.h	657;"	d
SQLITE_SYNC_FULL	sqlite\sqlite3.h	656;"	d
SQLITE_SYNC_NORMAL	sqlite\sqlite3.h	655;"	d
SQLITE_SYSAPI	sqlite\sqlite3.h	67;"	d
SQLITE_TESTCTRL_ALWAYS	sqlite\sqlite3.h	6999;"	d
SQLITE_TESTCTRL_ASSERT	sqlite\sqlite3.h	6998;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite\sqlite3.h	6996;"	d
SQLITE_TESTCTRL_BITVEC_TEST	sqlite\sqlite3.h	6994;"	d
SQLITE_TESTCTRL_BYTEORDER	sqlite\sqlite3.h	7009;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite\sqlite3.h	7005;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite\sqlite3.h	6995;"	d
SQLITE_TESTCTRL_FIRST	sqlite\sqlite3.h	6990;"	d
SQLITE_TESTCTRL_IMPOSTER	sqlite\sqlite3.h	7012;"	d
SQLITE_TESTCTRL_ISINIT	sqlite\sqlite3.h	7010;"	d
SQLITE_TESTCTRL_ISKEYWORD	sqlite\sqlite3.h	7002;"	d
SQLITE_TESTCTRL_LAST	sqlite\sqlite3.h	7014;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite\sqlite3.h	7004;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite\sqlite3.h	7007;"	d
SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD	sqlite\sqlite3.h	7006;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite\sqlite3.h	7001;"	d
SQLITE_TESTCTRL_PARSER_COVERAGE	sqlite\sqlite3.h	7013;"	d
SQLITE_TESTCTRL_PENDING_BYTE	sqlite\sqlite3.h	6997;"	d
SQLITE_TESTCTRL_PRNG_RESET	sqlite\sqlite3.h	6993;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite\sqlite3.h	6992;"	d
SQLITE_TESTCTRL_PRNG_SAVE	sqlite\sqlite3.h	6991;"	d
SQLITE_TESTCTRL_RESERVE	sqlite\sqlite3.h	7000;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite\sqlite3.h	7003;"	d
SQLITE_TESTCTRL_SORTER_MMAP	sqlite\sqlite3.h	7011;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite\sqlite3.h	7008;"	d
SQLITE_TEXT	sqlite\sqlite3.h	4287;"	d
SQLITE_TEXT	sqlite\sqlite3.h	4289;"	d
SQLITE_TOOBIG	sqlite\sqlite3.h	441;"	d
SQLITE_TRACE_CLOSE	sqlite\sqlite3.h	2956;"	d
SQLITE_TRACE_PROFILE	sqlite\sqlite3.h	2954;"	d
SQLITE_TRACE_ROW	sqlite\sqlite3.h	2955;"	d
SQLITE_TRACE_STMT	sqlite\sqlite3.h	2953;"	d
SQLITE_TRANSACTION	sqlite\sqlite3.h	2850;"	d
SQLITE_TRANSIENT	sqlite\sqlite3.h	5019;"	d
SQLITE_UPDATE	sqlite\sqlite3.h	2851;"	d
SQLITE_UTF16	sqlite\sqlite3.h	4693;"	d
SQLITE_UTF16BE	sqlite\sqlite3.h	4692;"	d
SQLITE_UTF16LE	sqlite\sqlite3.h	4691;"	d
SQLITE_UTF16_ALIGNED	sqlite\sqlite3.h	4695;"	d
SQLITE_UTF8	sqlite\sqlite3.h	4690;"	d
SQLITE_VERSION	sqlite\sqlite3.h	126;"	d
SQLITE_VERSION	sqlite\sqlite3.h	90;"	d
SQLITE_VERSION_NUMBER	sqlite\sqlite3.h	127;"	d
SQLITE_VERSION_NUMBER	sqlite\sqlite3.h	93;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite\sqlite3.h	8264;"	d
SQLITE_WARNING	sqlite\sqlite3.h	451;"	d
SQLITE_WARNING_AUTOINDEX	sqlite\sqlite3.h	533;"	d
_FTS5_H	sqlite\sqlite3.h	10619;"	d
_SQLITE3RTREE_H_	sqlite\sqlite3.h	8908;"	d
__SQLITESESSION_H_	sqlite\sqlite3.h	9015;"	d
a	sqlite\sqlite3.h	/^  const unsigned char *a;$/;"	m	struct:Fts5PhraseIter
aConstraint	sqlite\sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	sqlite\sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info
aOrderBy	sqlite\sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aParam	sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
aParam	sqlite\sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
anQueue	sqlite\sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info
apSqlParam	sqlite\sqlite3.h	/^  sqlite3_value **apSqlParam;       \/* Original SQL values of parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
argvIndex	sqlite\sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
b	sqlite\sqlite3.h	/^  const unsigned char *b;$/;"	m	struct:Fts5PhraseIter
colUsed	sqlite\sqlite3.h	/^  sqlite3_uint64 colUsed;    \/* Input: Mask of columns used by statement *\/$/;"	m	struct:sqlite3_index_info
desc	sqlite\sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
double	sqlite\sqlite3.h	286;"	d
double	sqlite\sqlite3.h	8885;"	d
eParentWithin	sqlite\sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
eWithin	sqlite\sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info
estimatedCost	sqlite\sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
estimatedRows	sqlite\sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info
fts5_api	sqlite\sqlite3.h	/^struct fts5_api {$/;"	s
fts5_api	sqlite\sqlite3.h	/^typedef struct fts5_api fts5_api;$/;"	t	typeref:struct:fts5_api
fts5_extension_function	sqlite\sqlite3.h	/^typedef void (*fts5_extension_function)($/;"	t
fts5_tokenizer	sqlite\sqlite3.h	/^struct fts5_tokenizer {$/;"	s
fts5_tokenizer	sqlite\sqlite3.h	/^typedef struct fts5_tokenizer fts5_tokenizer;$/;"	t	typeref:struct:fts5_tokenizer
hidden	sqlite\sqlite3.h	/^  unsigned char hidden[48];$/;"	m	struct:sqlite3_snapshot
iColumn	sqlite\sqlite3.h	/^     int iColumn;              \/* Column constrained.  -1 for ROWID *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iColumn	sqlite\sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iLevel	sqlite\sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iRowid	sqlite\sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iTermOffset	sqlite\sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iVersion	sqlite\sqlite3.h	/^  int iVersion;                   \/* Currently always set to 2 *\/$/;"	m	struct:fts5_api
iVersion	sqlite\sqlite3.h	/^  int iVersion;                   \/* Currently always set to 3 *\/$/;"	m	struct:Fts5ExtensionApi
iVersion	sqlite\sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	sqlite\sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
idxFlags	sqlite\sqlite3.h	/^  int idxFlags;              \/* Mask of SQLITE_INDEX_SCAN_* flags *\/$/;"	m	struct:sqlite3_index_info
idxNum	sqlite\sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	sqlite\sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
mxLevel	sqlite\sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info
mxPathname	sqlite\sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
nConstraint	sqlite\sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCoord	sqlite\sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info
nOrderBy	sqlite\sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nParam	sqlite\sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
nParam	sqlite\sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nRef	sqlite\sqlite3.h	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab
needToFreeIdxStr	sqlite\sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
omit	sqlite\sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
op	sqlite\sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
orderByConsumed	sqlite\sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
pAppData	sqlite\sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	sqlite\sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	sqlite\sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	sqlite\sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pBuf	sqlite\sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pContext	sqlite\sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info
pContext	sqlite\sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pExtra	sqlite\sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pMethods	sqlite\sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pModule	sqlite\sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNext	sqlite\sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pUser	sqlite\sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info
pUser	sqlite\sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pVtab	sqlite\sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
rParentScore	sqlite\sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
rScore	sqlite\sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info
sqlite3	sqlite\sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3_api_routines	sqlite\sqlite3.h	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines
sqlite3_backup	sqlite\sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_blob	sqlite\sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_callback	sqlite\sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_changegroup	sqlite\sqlite3.h	/^typedef struct sqlite3_changegroup sqlite3_changegroup;$/;"	t	typeref:struct:sqlite3_changegroup
sqlite3_changeset_iter	sqlite\sqlite3.h	/^typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;$/;"	t	typeref:struct:sqlite3_changeset_iter
sqlite3_context	sqlite\sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_data_directory	sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_destructor_type	sqlite\sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_file	sqlite\sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	sqlite\sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_index_constraint	sqlite\sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	sqlite\sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	sqlite\sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	sqlite\sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	sqlite\sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_int64	sqlite\sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_io_methods	sqlite\sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	sqlite\sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_mem_methods	sqlite\sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	sqlite\sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_module	sqlite\sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	sqlite\sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mutex	sqlite\sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_methods	sqlite\sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	sqlite\sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_pcache	sqlite\sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	sqlite\sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	sqlite\sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	sqlite\sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	sqlite\sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_rebaser	sqlite\sqlite3.h	/^typedef struct sqlite3_rebaser sqlite3_rebaser;$/;"	t	typeref:struct:sqlite3_rebaser
sqlite3_rtree_dbl	sqlite\sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_dbl	sqlite\sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_geometry	sqlite\sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	sqlite\sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_query_info	sqlite\sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	sqlite\sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_session	sqlite\sqlite3.h	/^typedef struct sqlite3_session sqlite3_session;$/;"	t	typeref:struct:sqlite3_session
sqlite3_snapshot	sqlite\sqlite3.h	/^typedef struct sqlite3_snapshot {$/;"	s
sqlite3_snapshot	sqlite\sqlite3.h	/^} sqlite3_snapshot;$/;"	t	typeref:struct:sqlite3_snapshot
sqlite3_stmt	sqlite\sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_syscall_ptr	sqlite\sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_temp_directory	sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_uint64	sqlite\sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_value	sqlite\sqlite3.h	/^typedef struct sqlite3_value sqlite3_value;$/;"	t	typeref:struct:sqlite3_value
sqlite3_version	sqlite\sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	sqlite\sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	sqlite\sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vtab	sqlite\sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	sqlite\sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_cursor	sqlite\sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	sqlite\sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite_int64	sqlite\sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	sqlite\sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	sqlite\sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	sqlite\sqlite3.h	/^    typedef SQLITE_UINT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	sqlite\sqlite3.h	/^    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	sqlite\sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	sqlite\sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
szOsFile	sqlite\sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
usable	sqlite\sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
xAccess	sqlite\sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xBegin	sqlite\sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBestIndex	sqlite\sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xCachesize	sqlite\sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	sqlite\sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	sqlite\sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	sqlite\sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	sqlite\sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xColumn	sqlite\sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xColumnCount	sqlite\sqlite3.h	/^  int (*xColumnCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi
xColumnSize	sqlite\sqlite3.h	/^  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);$/;"	m	struct:Fts5ExtensionApi
xColumnText	sqlite\sqlite3.h	/^  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);$/;"	m	struct:Fts5ExtensionApi
xColumnTotalSize	sqlite\sqlite3.h	/^  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);$/;"	m	struct:Fts5ExtensionApi
xCommit	sqlite\sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xConnect	sqlite\sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	sqlite\sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	sqlite\sqlite3.h	/^  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);$/;"	m	struct:fts5_tokenizer
xCreate	sqlite\sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	sqlite\sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCreateFunction	sqlite\sqlite3.h	/^  int (*xCreateFunction)($/;"	m	struct:fts5_api
xCreateTokenizer	sqlite\sqlite3.h	/^  int (*xCreateTokenizer)($/;"	m	struct:fts5_api
xCurrentTime	sqlite\sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	sqlite\sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDelUser	sqlite\sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelUser	sqlite\sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info
xDelete	sqlite\sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDelete	sqlite\sqlite3.h	/^  void (*xDelete)(Fts5Tokenizer*);$/;"	m	struct:fts5_tokenizer
xDestroy	sqlite\sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	sqlite\sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	sqlite\sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDeviceCharacteristics	sqlite\sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	sqlite\sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	sqlite\sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	sqlite\sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	sqlite\sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	sqlite\sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xFetch	sqlite\sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods
xFetch	sqlite\sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	sqlite\sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	sqlite\sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	sqlite\sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	sqlite\sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFindFunction	sqlite\sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFindTokenizer	sqlite\sqlite3.h	/^  int (*xFindTokenizer)($/;"	m	struct:fts5_api
xFree	sqlite\sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFullPathname	sqlite\sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xGetAuxdata	sqlite\sqlite3.h	/^  void *(*xGetAuxdata)(Fts5Context*, int bClear);$/;"	m	struct:Fts5ExtensionApi
xGetLastError	sqlite\sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	sqlite\sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	sqlite\sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	sqlite\sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	sqlite\sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xInst	sqlite\sqlite3.h	/^  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi
xInstCount	sqlite\sqlite3.h	/^  int (*xInstCount)(Fts5Context*, int *pnInst);$/;"	m	struct:Fts5ExtensionApi
xLock	sqlite\sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xMalloc	sqlite\sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	sqlite\sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	sqlite\sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	sqlite\sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	sqlite\sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	sqlite\sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	sqlite\sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	sqlite\sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	sqlite\sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	sqlite\sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	sqlite\sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	sqlite\sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	sqlite\sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	sqlite\sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	sqlite\sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	sqlite\sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xPhraseCount	sqlite\sqlite3.h	/^  int (*xPhraseCount)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi
xPhraseFirst	sqlite\sqlite3.h	/^  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);$/;"	m	struct:Fts5ExtensionApi
xPhraseFirstColumn	sqlite\sqlite3.h	/^  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);$/;"	m	struct:Fts5ExtensionApi
xPhraseNext	sqlite\sqlite3.h	/^  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);$/;"	m	struct:Fts5ExtensionApi
xPhraseNextColumn	sqlite\sqlite3.h	/^  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);$/;"	m	struct:Fts5ExtensionApi
xPhraseSize	sqlite\sqlite3.h	/^  int (*xPhraseSize)(Fts5Context*, int iPhrase);$/;"	m	struct:Fts5ExtensionApi
xQueryPhrase	sqlite\sqlite3.h	/^  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,$/;"	m	struct:Fts5ExtensionApi
xRandomness	sqlite\sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	sqlite\sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	sqlite\sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xRekey	sqlite\sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	sqlite\sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	sqlite\sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	sqlite\sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	sqlite\sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackTo	sqlite\sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	sqlite\sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowCount	sqlite\sqlite3.h	/^  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);$/;"	m	struct:Fts5ExtensionApi
xRowid	sqlite\sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xRowid	sqlite\sqlite3.h	/^  sqlite3_int64 (*xRowid)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi
xSavepoint	sqlite\sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	sqlite\sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSetAuxdata	sqlite\sqlite3.h	/^  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));$/;"	m	struct:Fts5ExtensionApi
xSetSystemCall	sqlite\sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	sqlite\sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	sqlite\sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	sqlite\sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	sqlite\sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	sqlite\sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	sqlite\sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	sqlite\sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	sqlite\sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	sqlite\sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	sqlite\sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xSync	sqlite\sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	sqlite\sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTokenize	sqlite\sqlite3.h	/^  int (*xTokenize)(Fts5Context*, $/;"	m	struct:Fts5ExtensionApi
xTokenize	sqlite\sqlite3.h	/^  int (*xTokenize)(Fts5Tokenizer*, $/;"	m	struct:fts5_tokenizer
xTruncate	sqlite\sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	sqlite\sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	sqlite\sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnfetch	sqlite\sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods
xUnlock	sqlite\sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnpin	sqlite\sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	sqlite\sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	sqlite\sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUserData	sqlite\sqlite3.h	/^  void *(*xUserData)(Fts5Context*);$/;"	m	struct:Fts5ExtensionApi
xWrite	sqlite\sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
zErrMsg	sqlite\sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zName	sqlite\sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
